#!/bin/sh
# Maxime Guillet - mar., 09 ao√ªt 2011 17:37:02 +0200


show_usage() {
	echo "Usage: $(basename $0) -c|<zonefile>"
	echo "\t-c for changed versionned files"
}

get_serial_from_file() {
	[ $# -ne 1 ] || [ ! -f "$1" ] && return 1

	value=$(sed $SED_OPTS -ne '/SOA/,/\)/s/^.*[[:space:]]+([0-9]+)[[:space:]]+.*$/\1/p' "$1" | head -n1)

	echo "$value" | grep -E '^[0-9]+$' || return 1

	return 0
}

update_serial() {
	[ $# -ne 1 ] && return 1
	serial="$1"
	if ! echo $serial | grep -qE "^$(date +%Y%m%d)"; then
		serial="$(date +%Y%m%d)00"
	else
		serial="$((serial+1))"
	fi
	echo $serial

	return 0
}

update_file() {
	[ ! -f "$1" ] && { echo "file $1 not found." >&2; return 1; }

	file="$1"
	serial="$(get_serial_from_file $file)"
	[ $? -ne 0 ] && { echo "can't retrieve serial from $file" >&2; return 1; }

	new_serial="$(update_serial $serial)"

	if [ -h "$file" ]; then
		echo "file $file is a symlink, following to real path..."
		file="$(readlink $file)"
	fi

	echo "updating serial from $serial to $new_serial for $file..."

	sed -e "s/$serial/$new_serial/" $SED_OPTS_REPLACE "$file"
	[ $? -ne 0 ] && { echo "failed to change serial for $file!" >&2; return 1; }

}


[ $# -ne 1 ] && { show_usage ; exit 0; }

[ "$(uname -s)" = 'Darwin' ] && { SED_OPTS='-E'; SED_OPTS_REPLACE='-i "" '; } || { SED_OPTS='-r'; SED_OPTS_REPLACE='-i '; }

if [ "$1" = '-c' ]; then
	rcs_status_command=''
	if svn info . >/dev/null 2>&1 ; then
		rcs_status_command='svn status'
	elif git svn info . >/dev/null 2>&1 ; then
		rcs_status_command='git status -s'
	else
		echo "current folder is not versionned" >&2
		exit 1
	fi

	zones=$($rcs_status_command . | awk '$1~/^(A|M)/ && $2!~/scripts|common/ {print $2}')

	for zone_file in $zones; do 
		update_file "$zone_file"
	done
elif [ -f "$1" ]; then
	update_file "$1"
fi

exit 0



