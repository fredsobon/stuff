#!/bin/bash
#
# emsvn: E-Merchant SVN management script
#        Vincent Batoufflet <vbatoufflet@e-merchant.com>
#

SVN_BASE=/srv/svn
SVN_USER=www-data
SVN_GROUP=www-data

HOOK_BIN=/usr/local/bin/emsvn-exec-hooks

LOCK_FILE=/tmp/emsvn-remotesync.lock
LAST_FILE=/tmp/emsvn-remotesync.lastrun

[ -f /etc/default/emsvn ] && source /etc/default/emsvn

RED='\e[1;31m'
YELLOW='\e[1;33m'
RESET='\e[0m'


action_create() {
    NAME=$1
    MANAGER=$2
    INIT=$3

    if [ -z "$NAME" -o -z "$MANAGER" ]; then
        msg_err "Error: name or manager shouldn't be empty"
        print_usage
        exit 1
    elif ( echo "$NAME" | grep -q '_' ); then
        msg_err "Error: name shouldn't contain underscores"
        print_usage
        exit 1
    elif [ -d $SVN_BASE/$NAME ]; then
        msg_warn "Warning: repository $NAME already exists"
        exit 1
    fi

    # Create new repository
    svnadmin create $SVN_BASE/$NAME

    ln -s $HOOK_BIN $SVN_BASE/$NAME/hooks/post-commit
    ln -s $HOOK_BIN $SVN_BASE/$NAME/hooks/pre-commit
    ln -s $HOOK_BIN $SVN_BASE/$NAME/hooks/pre-revprop-change
    mkdir $SVN_BASE/$NAME/hooks/{post-commit,pre-commit,pre-revprop-change}.d

    if [ "$INIT" != "no" ]; then
        TMP_DIR=$(mktemp -d)

        # Create base directories
        mkdir $TMP_DIR/{branches,tags,trunk}

        # Add ACL file
        echo "$MANAGER = rw" >$TMP_DIR/acl

        svn import --quiet -m 'Initial import.' $TMP_DIR file://$SVN_BASE/$NAME

        rm -rf $TMP_DIR
    fi

    chown -R $SVN_USER:$SVN_GROUP $SVN_BASE/$NAME
}

action_import() {
    NAME=$1
    MANAGER=$2
    DUMP_FILE=$3

    # Create empty empty repository
    action_create $1 $2 no

    # Load dump file
    svnadmin load $SVN_BASE/$NAME <$DUMP_FILE

    # Add new ACL file
    TMP_FILE=$(mktemp)

    echo "$MANAGER = rw" >$TMP_FILE
    svn import --quiet -m 'Added ACL file.' $TMP_FILE file://$SVN_BASE/$NAME/acl

    rm -f $TMP_FILE

    chown -R $SVN_USER:$SVN_GROUP $SVN_BASE/$NAME
}

action_update_acl() {
    # Export repositories ACL files
    TMP_DIR=$(mktemp -d)

    ( cat <<EOF
# DO NOT EDIT: Automatically generated by the \`emsvn updateacl' command.
EOF

    cat /etc/svn/acl.src ) >$TMP_DIR/acl.tmp

    for NAME in $(get_list); do
        ( cat <<EOF

[$NAME:/]
@admin = rw
EOF

        svn cat file://$SVN_BASE/$NAME/acl | grep -Pi '^\s*([a-z0-9_\-\.]+|\*)\s*=\s*rw?\s*$') | \
            sed -e 's///g' | tr '[A-Z]' '[a-z]' >>$TMP_DIR/acl.tmp
    done

    cp -f $TMP_DIR/acl.tmp /etc/svn/acl.conf

    rm -rf $TMP_DIR
}

action_remote_sync() {
    if [ -z "$SYNC_ENABLE" -o "$SYNC_ENABLE" == '0' ]; then
        msg_warn 'Warning: please set SYNC_ENABLE=1 in /etc/default/emsvn'
        return
    elif [ -z "$SYNC_REMOTE" ]; then
        msg_warn 'Warning: please set SYNC_REMOTE in /etc/default/emsvn'
        return
    elif [ -f "$LOCK_FILE" ]; then
        msg_warn "Warning: $LOCK_FILE file found"
        return
    fi

    FAIL=0

    # Synchronize repositories with remote server
    touch $LOCK_FILE

    for NAME in $(get_list); do
        TMP_DIR=$(mktemp -du)

        svnadmin hotcopy $SVN_BASE/$NAME $TMP_DIR
        rsync -a --delete $TMP_DIR/ $SYNC_REMOTE/$NAME/ || FAIL=1

        rm -rf $TMP_DIR
    done

    # Cleanup old repositories
    TMP_DIR=$(mktemp -d)

    get_list | sort >$TMP_DIR/local
    rsync $SYNC_REMOTE | awk '$5 != "." {print $5}' | sort >$TMP_DIR/remote

    touch $TMP_DIR/rsync

    for NAME in $(comm -13 $TMP_DIR/local $TMP_DIR/remote); do
        echo -e "+ $NAME\n+ $NAME/**\n" >>$TMP_DIR/rsync
    done

    echo '- **' >>$TMP_DIR/rsync.action

    rsync -a --delete --include-from=$TMP_DIR/rsync $SVN_BASE/ $SYNC_REMOTE/ || FAIL=1

    rm -rf $TMP_DIR

    # Remove .lock file
    rm -f $LOCK_FILE

    # Update timestamp
    [ $FAIL -eq 0 ] && touch $LAST_FILE
}

get_list() {
    find $SVN_BASE -mindepth 1 -maxdepth 1 -type d ! -name 'lost+found' \
        -printf '%f\n'
}

msg_err() {
    echo -e "${RED}$1${RESET}"
}

msg_warn() {
    echo -e "${YELLOW}$1${RESET}"
}

print_usage() {
    BASENAME=$(basename $0)

    cat <<EOF
Usage: $BASENAME create NAME MANAGER
       $BASENAME import NAME MANAGER FILE
       $BASENAME remotesync
       $BASENAME updateacl

Commands:
   create      create a new repository
   import      import repository dump file
   remotesync  perform remote synchronization
   updateacl   update repositories ACL file
EOF
}


# Parse command line arguments
COMMAND=$1
shift

case "$COMMAND" in
    create)
        [ $# -ne 2 ] && print_usage && exit 1
        action_create $@
        ;;

    import)
        [ $# -ne 3 ] && print_usage && exit 1
        action_import $@
        ;;

    remotesync)
        [ $# -ne 0 ] && print_usage && exit 1
        action_remote_sync
        ;;

    updateacl)
        [ $# -ne 0 ] && print_usage && exit 1
        action_update_acl
        ;;

    *)
        print_usage
        exit 1
        ;;
esac

# vim: ts=4 sw=4 et
