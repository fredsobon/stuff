==  memo _ bigip cli ==


- exam des confs bigip : -
  

list ltm rule irule_to_exam
ltm rule i_rule_to_exam {
    when HTTP_REQUEST {
        if { [HTTP::host] contains "bla.net" } {
                use pool  pool_bla
                # log connection info
                log local0.info "ok pool are correctly set"
        } else {
                use pool  pool_bla_other
        }
   }
}



list ltm pool lapin
ltm pool lapin {
    members {
        node_www.lapin1:http {
            address 10.0.4.4
            session monitor-enabled
            state up
        }
        NODE_www.lapin2:http {
            address 10.0.4.5
            session monitor-enabled
            state up
        }
    }
    monitor tcp_half_open 
}


= exam des objects : =

on peut tracer les différents composants du bigip d'une ressource :

1 / on trace la ressource :
ex ping : www.lapin.com
62.23.26.58

2/ on interroge les objects :

-> on recupére le pool qui va gérer l'ip pub : 

root@(bigipbe1)(cfg-sync In Sync)(Standby)(/Common)(tmos)# list ltm virtual |grep -A 20 200.23.2.5
Display all 212 items? (y/n) y
    destination 200.23.2.5:https
    ip-protocol tcp
    mask 255.255.255.255
    pool lapin_pool
    profiles {
        sni-http { }
        sni-oneconnect { }
    }

-> on recupere le / les node(s) qui sont membres du pool :

# list ltm pool lapin_pool
ltm pool lapin_pool {
    members {
        lapin_node:http {
            address 192.168.0.5
            session monitor-enabled
            state up
       




== logging : 

on peut examiner avec le shell bash le contenu des log du bigip et les pool / vs : log ltm 
tail -f /var/log/ltm

On va pouvoir forger un log dans une irule pour voir si le log est bien catché : 
    when HTTP_REQUEST {
        if { [HTTP::host] contains "bla.net" } {
                use pool  pool_bla
                # log connection info
                log local0.info "ok pool are correctly set"

