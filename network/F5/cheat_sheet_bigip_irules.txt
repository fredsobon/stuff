=== notes en vrac exemple irules ===


- redirection vers un pool quand la requette contient un domain et un pattern à la fin de  l'uri 


when HTTP_REQUEST {
	if { [HTTP::host] equals "lapin.com" and [HTTP::uri] ends_with "/carotte" } 
               {    
                   HTTP::header insert X-Forwarded-Proto "https"
                   pool lapin_web
               }
        }


- redirection vers un pool quand la requette concerne un domaine suivi de l'uri contenant un pattern inclu dans un wildcard :

when HTTP_REQUEST { 
 switch -glob [string tolower [HTTP::host][HTTP::uri]] {
  "www.lapin.*/carotte*" {
    HTTP::header insert X-Forwarded-Proto "https"
    pool lapin_pool 
    }
  }
}


- redirection vers un pool quand la requette concerne un domaine strict et une url contenant un pattern suivi d'un wildcard : 

A check ! 
when HTTP_REQUEST {
    if { [HTTP::host] equals "www.lapin.net" and [HTTP::uri] contains "/carotte*" }
               {    
                   HTTP::header insert X-Forwarded-Proto "https"
                   pool lapin_pool
               }



- redirection vers un pool avec reecriture d'url regexp :

https://devcentral.f5.com/articles/irules-101-10-regular-expressions

Avant :  
http://lapin.com/a/123/documents/bla
 regsub -nocase -all {^/[a-z1-9]+/[a-z1-9]+/documents} [HTTP::uri] "/new/documents" uri
 HTTP::uri $uri

Apres : 
http://lapin.com/new/documents/bla





= datagrouplist =

on va pouvoir utiliser un data group list  pour faciliter la lecture d'irule 

ex : 
on creer un fichier allowed_ip dans le quel on met des ip ou adresse reseau 
192.168.22.5
10.2.5.5/27

et on va pouvoir rediriger nos requettes dans les irules et les faire pointer sur un pool dédié par ex :

when CLIENT_ACCEPTED {

 # Comparing a customer source IP to a list of entries in a LTM data-group.
 if { [class match [IP::remote_addr] equals allowed_ip ] } {
   pool my_pool1
 } else {
   pool my_pool2
 }

}


et même etablir des filtres plus complexes :

when HTTP_REQUEST {
## 
  if {[HTTP::host] equals "blabla.net"  and [ class match [IP::client_addr] equals allowed_ips ] } {
    pool www
  } 

ici on filtre les requettes qui vont concerner le nom blabla.net et on va les rediriger vers le server www si l'ip du client est contenue dans le datagroupe list allowed_ips


on va pouvoir filtrer sur différents noms de hosts et autoriser l'acces en fonction des ip clients référencées dans le datagroupliste puis  mettre un log pour observer le traffic , si l'ip client vaut 10.10.2.10/27 (->255.255.255.224)  au envoie sur un autre pool 

when HTTP_REQUEST {

if { ([HTTP::host] equals "blabla.net" or [HTTP::host] equals "bloublou.net") and  [ class match [IP::client_addr] equals allowed_ips ]  } {
   #log local0. "irule prod_ips  here 1"
    pool server_1
  } 
    elseif {[IP::addr [IP::client_addr] equals "10.10.2.10 mask 255.255.255.224" ] } {
    pool server_2


