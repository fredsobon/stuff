## install + config minimale ## 

boogie@x61:~$ sudo apt-get install git

git config --global user.name "Votre Nom Ici" # le nom va juste servir à crediter les commmits.
git config --global user.email "votre_email@votre_email.com" # adresse mail fournie sur notre serveur de repo : ex plateforme github

# Creation du repo ( ex : github .. + config locale pour commit )

boogie@x61:~$ mkdir repositories && cd repositories/ && mkdir stuff && cd stuff/  # on cree un rep contenant nos repos puis un rep portant le même nom que le repos cree sur github auparavant par exemple.

# Initialisation du repo ; creation d'une arbo et premier commit de fichier :
boogie@x61:~/repositories/stuff$ git init
Dépôt Git vide initialisé dans /home/boogie/repositories/stuff/.git/

boogie@x61:~/repositories/stuff$ mkdir python system shell_tools network cloud_automation
boogie@x61:~/repositories/stuff$ date > notes
boogie@x61:~/repositories/stuff$ git status
boogie@x61:~/repositories/stuff$ git add notes
boogie@x61:~/repositories/stuff$ git commit -m "first commit track"

# Declaration de notre repo en ligne pour que git identifie que notre repo originel est sur le web chez github par ex :

git remote add origin https://github.com/fredsobon/stuff.git

On se retrouve avec un fichier de conf à la racine de notre repo, ex :
boogie@x61:~/repositories/stuff$ cat .git/config 
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/fredsobon/stuff.git
	fetch = +refs/heads/*:refs/remotes/origin/*

On  confirme le repo distant avec :

boogie@x61:~/repositories/stuff$ git remote -v
origin	https://github.com/fredsobon/stuff.git (fetch)
origin	https://github.com/fredsobon/stuff.git (push)

On va recupérer les infos de notre repo distants en local s'il y en a :

boogie@x61:~/repositories/stuff$ git pull origin master
remote: Counting objects: 2, done.
remote: Total 2 (delta 0), reused 0 (delta 0), pack-reused 0
Dépaquetage des objets: 100% (2/2), fait.
Depuis https://github.com/fredsobon/stuff
 * branch            master     -> FETCH_HEAD
   9b22588..6da8627  master     -> origin/master
Déjà à jour !
Merge made by the 'recursive' strategy.

On peut désormais pusher notre code sur le repos master github par ex :

boogie@x61:~/repositories/stuff$ git push origin master
Username for 'https://github.com': fredsobon
Password for 'https://fredsobon@github.com': 
Décompte des objets: 9, fait.
Delta compression using up to 2 threads.
Compression des objets: 100% (5/5), fait.
Écriture des objets: 100% (9/9), 1.56 KiB | 0 bytes/s, fait.
Total 9 (delta 0), reused 0 (delta 0)
To https://github.com/fredsobon/stuff.git
   6da8627..a576b3e  master -> master

On peut maintenant également récupérer sur un autre pc , le repo distant.Ex :

git clone https://github.com/fredsobon/stuff.git
boogie@apollo:/tmp$ git clone https://github.com/fredsobon/stuff.git
Clonage dans 'stuff'...
remote: Counting objects: 42, done.
remote: Compressing objects: 100% (20/20), done.
remote: Total 42 (delta 9), reused 36 (delta 8), pack-reused 0
Dépaquetage des objets: 100% (42/42), fait.
Vérification de la connectivité... fait.




### 
Glossaire Git 

    git init : Initialise un dépôt git dans un répertoire vide.
    git status : Affiche le statut des choses dans le répertoire suivi
    git add <NOM DU FICHIER A SUIVRE> : Ajoute un fichier à suivre dans la zone d’attente
    git commit -m "entrez votre message" : Consigner (déclarer) toute modification.
    git remote add origin [adresse URL GitHub ici] : Connecte votre dépôt local avec GitHub.
    git push -u origin nom_branche : Pousse les modifications vers GitHub
    git checkout : Littéralement “check out” (retirer, rapatrier) une branche.
    git -b <NomBranche> : Crée une nouvelle branche dans votre dépôt.
    git log: affiche un journal des modifications au dépôt
    git clone <URL PROVENANT DE GITHUB> : clone un projet de votre système à partir de github
    git branch <nom_branche> : crée une copie de la branche master appelée
    git checkout <branch_name> : bascule vers nom_branche comme branche de travail
    git checkout master : bascule la branche vers master
    git branch -a : affiche les branches existantes pour le dépôt particulier

Liens et Ressources :

    Le guide d’Atlassian a de très bons tutoriels en langage clair pour mieux comprendre et compléter cette anti-sèche de Git.
    Pour les traductions des commandes, se référer à l’index de l’ouvrage de référence sur Git traduit en français : git-scm/book

