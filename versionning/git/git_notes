## install + config minimale ## 

boogie@x61:~$ sudo apt-get install git

git config --global user.name "Votre Nom Ici" # le nom va juste servir à crediter les commmits.
git config --global user.email "votre_email@votre_email.com" # adresse mail fournie sur notre serveur de repo : ex plateforme github

# Creation du repo ( ex : github .. + config locale pour commit )

boogie@x61:~$ mkdir repositories && cd repositories/ && mkdir stuff && cd stuff/  # on cree un rep contenant nos repos puis un rep portant le même nom que le repos cree sur github auparavant par exemple.

# Initialisation du repo ; creation d'une arbo et premier commit de fichier :
boogie@x61:~/repositories/stuff$ git init
Dépôt Git vide initialisé dans /home/boogie/repositories/stuff/.git/

boogie@x61:~/repositories/stuff$ mkdir python system shell_tools network cloud_automation
boogie@x61:~/repositories/stuff$ date > notes
boogie@x61:~/repositories/stuff$ git status
boogie@x61:~/repositories/stuff$ git add notes
boogie@x61:~/repositories/stuff$ git commit -m "first commit track"

# Declaration de notre repo en ligne pour que git identifie que notre repo originel est sur le web chez github par ex :

git remote add origin https://github.com/fredsobon/stuff.git

On se retrouve avec un fichier de conf à la racine de notre repo, ex :
boogie@x61:~/repositories/stuff$ cat .git/config 
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/fredsobon/stuff.git
	fetch = +refs/heads/*:refs/remotes/origin/*

On  confirme le repo distant avec :

boogie@x61:~/repositories/stuff$ git remote -v
origin	https://github.com/fredsobon/stuff.git (fetch)
origin	https://github.com/fredsobon/stuff.git (push)

On va recupérer les infos de notre repo distants en local s'il y en a :

boogie@x61:~/repositories/stuff$ git pull origin master
remote: Counting objects: 2, done.
remote: Total 2 (delta 0), reused 0 (delta 0), pack-reused 0
Dépaquetage des objets: 100% (2/2), fait.
Depuis https://github.com/fredsobon/stuff
 * branch            master     -> FETCH_HEAD
   9b22588..6da8627  master     -> origin/master
Déjà à jour !
Merge made by the 'recursive' strategy.

On peut désormais pusher notre code sur le repos master github par ex :

boogie@x61:~/repositories/stuff$ git push origin master
Username for 'https://github.com': fredsobon
Password for 'https://fredsobon@github.com': 
Décompte des objets: 9, fait.
Delta compression using up to 2 threads.
Compression des objets: 100% (5/5), fait.
Écriture des objets: 100% (9/9), 1.56 KiB | 0 bytes/s, fait.
Total 9 (delta 0), reused 0 (delta 0)
To https://github.com/fredsobon/stuff.git
   6da8627..a576b3e  master -> master

On peut maintenant également récupérer sur un autre pc , le repo distant.Ex :

git clone https://github.com/fredsobon/stuff.git
boogie@apollo:/tmp$ git clone https://github.com/fredsobon/stuff.git
Clonage dans 'stuff'...
remote: Counting objects: 42, done.
remote: Compressing objects: 100% (20/20), done.
remote: Total 42 (delta 9), reused 36 (delta 8), pack-reused 0
Dépaquetage des objets: 100% (42/42), fait.
Vérification de la connectivité... fait.


# config :

La config de git est sauvegarder dans un fichier config situé dans le répertoire caché ".git" de notre repo.
On peut ajouter des sections ex pour définir des alias de commandes :
.....
[alias] 
    ci = commit
    co = checkout
    st = status
    br = branch
.....

# commandes d'annulation :

Git dispose de commandes permettant d'annuler des changements effectués. Attention, ces annulations ne sont pas réversibles !
git reset –hard HEAD 	Annule les changements effectués depuis le dernier commit.
git reset –hard HEAD^ 	Supprime le dernier commit. Cette action peut être répétée autant de fois que vous le désirez.
git revert commit 	Restaure le dépôt tel qu'il l'était lors du commit spécifié.
Pour que cette commande fonctionne, il faut que toutes les modifications soient commitées

Pour supprimer simplement une erreur sur un fichier : on peut rappatrier le fichier "intègre" du repo sur notre copie locale :
ex: on va recupérer notre fichier git_notes sans erreur présent sur le repo master et le reinjecter dans notre repo local :
boogie@apollo:~/repositories/stuff$ git checkout -- versionning/git/git_notes
	

# config du push auto vers notre repo origin master :
Il est possible d'utiliser git push sans préciser à chaque fois git push origin master. Une "conf" est à faire sous peine d'avoir les messages suivants : 

boogie@apollo:~/repositories/stuff$ git push
warning: push.default n'est pas défini ; sa valeur implicite a changé dans Git 2.0
de 'matching' vers 'simple'. Pour supprimer ce message et maintenir
le comportement actuel après la modification de la valeur de défaut, utilisez :

  git config --global push.default matching

Pour supprimer ce message et adopter le nouveau comportement maintenant, utilisez :

  git config --global push.default simple

Quand push.default vaudra 'matching', git poussera les branches locales
sur les branches distantes qui existent déjà avec le même nom.

Depuis Git 2.0, Git utilise par défaut le comportement plus conservatif 'simple'
qui ne pousse la branche courante que vers la branche distante correspondante
que 'git pull' utilise pour mettre à jour la branche courante.
 
Voir 'git help config' et chercher 'push.default' pour plus d'information.
(le mode 'simple' a été introduit dans Git 1.7.11. Utilisez le mode similaire
'current' au lieu de 'simple' si vous utilisez de temps en temps d'anciennes versions de Git)

Username for 'https://github.com': fredsobon
Password for 'https://fredsobon@github.com': 
Décompte des objets: 5, fait.
Delta compression using up to 4 threads.
Compression des objets: 100% (3/3), fait.
Écriture des objets: 100% (5/5), 489 bytes | 0 bytes/s, fait.
Total 5 (delta 2), reused 0 (delta 0)
To https://github.com/fredsobon/stuff.git
   9de3d4c..e1730cc  master -> master

On passe donc notre conf en mode "simple" puisque la version git utilisée est "actuelle" et ne tiens pas compte de l'ancienne notation "matching".
boogie@apollo:~/repositories/stuff$ git config --global push.default simple




### Commandes exemples :

# git  clone : permet de recupérer et cloner un repo local ou distant accessible via http(s) ou ssh.
Exemples :
- clone local :
on cree le repertoire qui va contenir notre repo sur notre arbo :
    mkdir repositories/lapin_legacy
On clone un repo situé Localement en donnant le chemin complet jusqu'au répertoire  ".git"  (contenant les fichiers git versionnés :
    boogie@x61:~/Documents/arch_work/lapin/lapin-legacy/repo_lapin-master.git$ ls
branches  config  description  HEAD  hooks  info  objects  packed-refs  refs

    git clone /home/boogie/Documents/arch_work/lapin/lapin-legacy/repo_lapin-master.git .
On retrouve nos fichiers et rep de conf versionnés une fois clonés :
repositories/lapin_legacy$ ls 
auth.conf  autosign.conf  bin  extdatas  fileserver.conf  manifests  modules  puppet.conf  tagmail.conf

# git branch 

on peut être ammener à faire une modif complexe qu'on peut faire relire par un collegue : pour cela afin de préserver les élements on peut créer une branche ( copie de notre arbo concernée ) :

exemple on modifie un valeur dans un fichier d'un repertoire versionne sur une branche de production :

boogie@boogie:~$ cd appli/
1/
on examine les branches dans laquelle on est : 
boogie@boogie:~appli$ git branch
* production

2/ on créee une branche que l'on nomme comme on veut : 
boogie@boogie:appli$ git checkout -b fix_ttl
Basculement sur la nouvelle branche 'fix_ttl'
on voit bien la creation de notre nouvelle branche 
boogie@boogie:~appli$ git branch
* fix_ttl
  production
3/ on push notre conf : 
boogie@boogie:~appli$ vi manifests/front/install.pp 
boogie@boogie:~appli$ git add manifests/front/install.pp 
boogie@boogie:~appli$ git commit -m '[nscd] - change ttl' 
[fix_ttl_pay 05be74f] [nscd] - change ttl
 1 file changed, 1 insertion(+), 1 deletion(-)

on voit un message d'avertissement : 

boogie@boogie:~appli$ git push 
warning: push.default n'est pas défini ; sa valeur implicite a changé dans Git 2.0
de 'matching' vers 'simple'. Pour supprimer ce message et maintenir
le comportement actuel après la modification de la valeur de défaut, utilisez :

  git config --global push.default matching

Pour supprimer ce message et adopter le nouveau comportement maintenant, utilisez :

  git config --global push.default simple

Quand push.default vaudra 'matching', git poussera les branches locales
sur les branches distantes qui existent déjà avec le même nom.

Depuis Git 2.0, Git utilise par défaut le comportement plus conservatif 'simple'
qui ne pousse la branche courante que vers la branche distante correspondante
que 'git pull' utilise pour mettre à jour la branche courante.
 
Voir 'git help config' et chercher 'push.default' pour plus d'information.
(le mode 'simple' a été introduit dans Git 1.7.11. Utilisez le mode similaire
'current' au lieu de 'simple' si vous utilisez de temps en temps d'anciennes versions de Git)

fatal: La branche courante fix_ttl n'a pas de branche amont.
Pour pousser la branche courante et définir la distante comme amont, utilisez

    git push --set-upstream origin fix_ttl


On va donc utiliser la commande suivante : 

boogie@boogie:~appli$ git push --set-upstream origin fix_ttl
Décompte des objets: 30, fait.
Delta compression using up to 4 threads.
Compression des objets: 100% (16/16), fait.
Écriture des objets: 100% (30/30), 3.34 KiB | 0 bytes/s, fait.
Total 30 (delta 22), reused 19 (delta 14)
remote: 
remote: Create merge request for fix_ttl:
remote:   https://gitlab.net/puppet/merge_requests/new?merge_request%5Bsource_branch%5D=fix_ttl
remote: 
To git@gitlab.meetic.ilius.net:infra-prod/puppet.git
 * [new branch]      fix_ttl -> fix_ttl
La branche fix_ttl est paramétrée pour suivre la branche distante fix_ttl depuis origin.

On va donc ensuite cliquer sur le lien qui va ouvrir notre navigateur et remplir notre demande de merge request :

 https://gitlab.net/puppet/merge_requests/new?merge_request%5Bsource_branch%5D=fix_ttl

### 
Glossaire Git 

    git init : Initialise un dépôt git dans un répertoire vide.
    git status : Affiche le statut des choses dans le répertoire suivi
    git add <NOM DU FICHIER A SUIVRE> : Ajoute un fichier à suivre dans la zone d’attente
    git commit -m "entrez votre message" : Consigner (déclarer) toute modification.
    git remote add origin [adresse URL GitHub ici] : Connecte votre dépôt local avec GitHub.
    git push -u origin nom_branche : Pousse les modifications vers GitHub
    git checkout : Littéralement “check out” (retirer, rapatrier) une branche.
    git -b <NomBranche> : Crée une nouvelle branche dans votre dépôt.
    git log: affiche un journal des modifications au dépôt
    git clone <URL PROVENANT DE GITHUB> : clone un projet de votre système à partir de github
    git branch <nom_branche> : crée une copie de la branche master appelée
    git checkout <branch_name> : bascule vers nom_branche comme branche de travail
    git checkout master : bascule la branche vers master
    git branch -a : affiche les branches existantes pour le dépôt particulier

Liens et Ressources :

    Le guide d’Atlassian a de très bons tutoriels en langage clair pour mieux comprendre et compléter cette anti-sèche de Git.
    Pour les traductions des commandes, se référer à l’index de l’ouvrage de référence sur Git traduit en français : git-scm/book



blabla

## git hooks :
il est possible de pouvoir verifier va un script la bonne execution d'un script avant de commiter : si le code retour de notre script est different de 0 alors le commit fails

ex : on veut verifier que dans un fichier nous n'avons pas de double entree dans un fichier :
nous creons notre script l'ideal dans un repertoire et en suite on cree un lien symbolique dans le repertoire .git/hooks/ de notre script que l on nomme pre-commit 

boogie@x61-boogie:~/Documents/own/stuff/.git/hooks$ ln -s ../../scripts/bash/host_parser/hosts_parser.sh pre-commit

A partir de ce moment chaque commit lancera ce script : si il n'y a pas d'erreur alors le commit est fait sinon c'est un echec.

## url :

http://loic-guibert.developpez.com/tutoriels/git/get-started/




######## Annnexe git prod :
exemple de clone d'un repo en prod :
on utilise le user git :
git clone git@gitlab.taf:infra-prod/healthcheck.git




## git commandes :


git pull --rebase : permet de pouvoir recup le code et pousser suite à notre modif

git stash : permet de backuper les fichiers sur lesquels ont bosse sans les pousser sur le master
: on peut donc faire reprendre un job interrompu et avoir recup du contenu depuis 

boogie@boogie:~/Documents/work/repos/puppet/profile/files$ vi hosts 
boogie@boogie:~/Documents/work/repos/puppet/profile/files$ git status
Sur la branche production
Votre branche est à jour avec 'origin/production'.
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git checkout -- <fichier>..." pour annuler les modifications dans la copie de travail)

	modifié :         hosts

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")
boogie@boogie:~/Documents/work/repos/puppet/profile/files$ git stash 
Saved working directory and index state WIP on production: 6e26c37 install artifactory
HEAD est maintenant à 6e26c37 install artifactory
boogie@boogie:~/Documents/work/repos/puppet/profile/files$ git status
Sur la branche production
Votre branche est à jour avec 'origin/production'.
rien à valider, la copie de travail est propre
boogie@boogie:~/Documents/work/repos/puppet/profile/files$ git stash list 
stash@{0}: WIP on production: 6e26c37 install artifactory
boogie@boogie:~/Documents/work/repos/puppet/profile/files$ git stash pop
Sur la branche production
Votre branche est à jour avec 'origin/production'.
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git checkout -- <fichier>..." pour annuler les modifications dans la copie de travail)

	modifié :         hosts

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")



