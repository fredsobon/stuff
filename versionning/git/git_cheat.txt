==== notes git ====

==== workflow git ====

working dir  staging repository (.git)    remote repo
file         add      commit              push / pull


== config git ==

on peut voir notre config git avec : 

git config --global --list
user.email=l.apin@lapin.org
user.name=lapin
diff.tool=meld
core.editor=vim

pour faire nos settings : 

git config --global --user.name=lapin
git config --global --user.email=l.apin@lapin.org


nos conf sont sauvées dans le fichier .gitconfig dans le $home de notre user : 
cat ~/.gitconfig 
[user]
    email=l.apin@lapin.org
    name=lapin
[diff]
    tool=meld
[core]
     editor=vim
[alias]
#    fa=fetch -a --prune
#    co=checkout
#    br=branch
#    ci=commit
#    st=status
#    save=!git add -A && git commit -m 'SAVEPOINT'
#    undo=reset HEAD~1 --mixed
#[pull]
#    rebase=true

on peut definir nos alias dans le fichier de conf :

[alias]
    hist = log --oneline --graph
    st   = status
    ci   = commit 

    

== status ==

git status nous montre l'etat de notre repo 

== add ==

git add ajout un fichier 

-u : update : met à jour l'index mais n'ajoute pas de fichiers
(quand on a par exemple deplacer un fichier , puis finalement remis dans la même arborscence.)

-A : --all  ajoute l'intégralité des fichiers.


== commit ==

on va pouvoir passer un nouveau fichier du working environement au stage ( le passer sous git en local) avec la commande commit :

git commit va nous ouvrir une fenetre dans laquelle on va pouvoir saisir le message de notre commit (indiquer  clairement mais brievement ce que l'on a fait) .
On peut ajouter le commentaire en oneline avec l'option -m :

$ git add hello.rb
$ git commit -m "Add an author comment"

on va pouvoir modifier notre message de commit si on s'est aperçu d'une erreur ( ex oubli de rajouter une mailbox dans un fichier : on modifie notre fichier , on le rajoute dans git et au lieu de faire un nouveau commit : on modifie le commit et le message precedent : 

$ git add hello.rb
$ git commit --amend -m "Add an author/email comment"

on ne verra pas de trace dans les logs du commit initial.

== rename ==

git mv oldname newname


== log ==

git log : permet de voir les commits 

git log --oneline : est un condensé de "--pretty=oneline --abbrev-commit"
on va dans ce ca avoir une sortie sur une ligne avec le numero de commit réduit et le commentaire du commit : 
git log --oneline
69d93cd up
24f3b6b up
40155bf Merge branch 'master' of https://github.com/fredsobon/stuff

git log --graph : on va pouvoir avoir une représentation graphique de l'historique de commit :
ex :
| Date:   Mon Aug 27 19:20:17 2018 +0200
| 
|     up
|   
*   commit 40155bfd2eb6cb5c4d72d6f7a3ba96b0da97d7fb
|\  Merge: 71b2399 b38974d
| | Author: fredsobon <f.sobon@meetic-corp.com>
| | Date:   Mon Aug 27 19:03:11 2018 +0200
| | 
| |     Merge branch 'master' of https://github.com/fredsobon/stuff
| | 
| * commit b38974daa31617ca65b690f39beb263e7c0da987
| | Author: Fred Sobon <frederic.sobon@gmail.com>
| | Date:   Tue Aug 21 19:46:00 2018 +0200

on peut combiner les options : 

git log --oneline --graph

* 69d93cd up
* 24f3b6b up
*   40155bf Merge branch 'master' of https://github.com/fredsobon/stuff
|\  
| * b38974d up
* | 71b2399 .
|/ 

- pretty : mise en forme du log :

on va pouvoir afficher des options plus precisemment (date, message de commit , auteur , entourer le tout par des caracteres si on le souhaite 
ex :

git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

* d37dcf8 2018-09-24 | up (origin/master, origin/HEAD, new_branch) [fredsobon]
* c2d61be 2018-09-24 | up [fredsobon]
* 36a1618 2018-09-24 | msg for branch merge test [fredsobon]
*   fb7b29e 2018-09-24 | Merge branch 'new_branch' [fredsobon]
|\  
| * 95db3b4 2018-09-24 | add file and update fake file for test [fredsobon]
|/  
* 2138799 2018-09-24 | up [fredsobon]
* 5e3a58d 2018-09-24 | update file from branch [fredsobon]


== diff ==

on va pouvoir afficher les differences entre nos differents "stages" : working directory ; staging aera ; repository avec la commande git diff :

- comparaison working aera / staging 

git diff
diff --git a/versionning/git/gitconfig b/versionning/git/gitconfig
index 42bc468..efe5a04 100644
--- a/versionning/git/gitconfig
+++ b/versionning/git/gitconfig
@@ -13,6 +13,7 @@
   br = branch
   ci = commit
   st = status
+  hist = log --oneline --graph
   save = !git add -A && git commit -m 'SAVEPOINT'
   undo = reset HEAD~1 --mixed



ici on voit qu'une ligne non commitée est presente dans le working directory 
(+  hist = log --oneline --graph ) mais pas dans le staging.

on peut lancer git difftool si on a configurer un outil de diff dans notre config git 
ex : 
[diff]
    tool  = meld

- comparaison working directory et repo :
on peut voir les differences entre le contenu de notre repo et notre working directory :

git diff HEAD 
git difftool HEAD 

- comparaison staging et repo :

git diff --staged HEAD 
git difftool --staged HEAD


- comparaison sur un fichier particulier 
pour l'instant toutes les modifs examiness concernent le "repo" global.On peut biensur comparer uniquement un fichier 

git diff -- fichier

git diff -- git_cheat.txt
diff --git a/versionning/git/git_cheat.txt b/versionning/git/git_cheat.txt
index 1df976b..e14dfda 100644
--- a/versionning/git/git_cheat.txt
+++ b/versionning/git/git_cheat.txt
@@ -134,6 +134,27 @@ index 42bc468..efe5a04 100644
 ici on voit qu'une ligne non commitée est presente dans le working directory 
 (+  hist = log --oneline --graph ) mais pas dans le staging.
 
+on peut lancer git difftool si on a configurer un outil de diff dans notre config git 
 

- comparaison de commits :

on va pouvoir comparer des commits.
on va devoir chercher les commits qui nous interesse avec git log puis les passer en arguments : 

git log --oneline |head
09109bc up
dfa6430 up
da0c987 up
7ba9fb7 up
679148b up
e1409f6 up

ici on va comparer les deux derniers commits entre eux : 

git diff 09109bc dfa6430
diff --git a/TODO b/TODO
index f8eafb5..7308740 100644
--- a/TODO
+++ b/TODO
@@ -4,7 +4,6 @@
 net : lan subnet creation / config / lacp / jumbo frame
 redondancy : failover / HA
 loadbalancing 
-routage
 firewalling / codes attacks /audit /
 
on peut utiliser le nom HEAD qui represente le dernier commit de notre branch : 

c'est donc completement equivalent a l'exemple précédent :
 ~/Documents/stuff/versionning/git  ⑂ master +  $  git diff HEAD dfa6430
diff --git a/TODO b/TODO
index f8eafb5..7308740 100644
--- a/TODO
+++ b/TODO
@@ -4,7 +4,6 @@
 net : lan subnet creation / config / lacp / jumbo frame
 redondancy : failover / HA
 loadbalancing 
-routage
 firewalling / codes attacks /audit /

on peut aussi pour comparer les deux derniers commit utiliser HEAD ( le dernier commit ) et HEAD^ ( l'avant dernier commit ) 

 ~/Documents/stuff/versionning/git  ⑂ master +  $  git diff HEAD HEAD^
diff --git a/TODO b/TODO
index f8eafb5..7308740 100644
--- a/TODO
+++ b/TODO
@@ -4,7 +4,6 @@
 net : lan subnet creation / config / lacp / jumbo frame
 redondancy : failover / HA
 loadbalancing 
-routage
 firewalling / codes attacks /audit /
 
ce qui revient encore à la même chose que nos deux exemples precedents 

- comparaison de la branche master local et la branche master distante (remote) :

git diff master origin/master 

git diff master origin/master 
diff --git a/versionning/git/git_cheat.txt b/versionning/git/git_cheat.txt
index 2280529..ebce131 100644
--- a/versionning/git/git_cheat.txt
+++ b/versionning/git/git_cheat.txt
@@ -195,7 +195,7 @@ index f8eafb5..7308740 100644
  
-on peut utiliser le nom HEAD qui represente le dernier commit de notre branch : 
+on peut utiliser le nom HEAD sui represente le dernier commit de notre branch : 
 

== branch + merge request ==

L'utilisation de branches est la bonne pratique de git : on evite au maximum de travailler sur la branche master

- pour lister les branches locales : 

git branch
 * master
   new_branch
  testting

- pour lister les branches locales et distantes : 

git branch -a 

 ~/Documents/stuff/versionning/git  ⑂ master + ⇡1  $  git branch -a
   demo
   * master
     testting
     remotes/origin/HEAD -> origin/master
     remotes/origin/master

- creation de branch : 

git branch le_nom_de_ma_nouvelle_branche :

ex : on creee une nouvelle branche et on verifie qu'elle existe : 
git branch new_branch

git branch -a
* master
  new_branch
  testting
  remotes/origin/HEAD -> origin/master
  remotes/origin/master


- changement de branche :

pour basculler dans une branche on utilise :

git checkout nom_branche 


- creation et bascule automatique dans la branche créee :

git checkout -b nouvelle_branche 


- examen de log :

on peut examiner les actions faites dans les logs.
ex depuis notre branche master :

git log --oneline --decorate |head -5
435ec4e (HEAD -> master, origin/master, origin/HEAD) up   <<<< on voit qu'on est dans la branche master 
b9a1e79 (new_branch) up
57c3cd9 up
0a906d8 up
09109bc up

on peut voir la basculle d'une branche dans les logs 
ex :
git log --oneline --decorate |head -5
b9a1e79 (HEAD -> new_branch) up
57c3cd9 up
0a906d8 up
09109bc up
dfa6430 up


- on peut renommer une branche :

git branch -m old_name new_name 


- on peut supprimer une branche ( Attention il faut être hors de cette branche ) :

git branch -d nom_branche :

git branch -d testting 
Branche testting supprimée (précédemment d1766eb).

on peut forcer le delete avec "D"
git branch -D branch 
Branche branch supprimée (précédemment 5d2ba80).

- on peut supprimer une branche locale et qui a été aussi poussée sur le repo (ex github ..) 

git branch -dr origin/branch
Branche de suivi origin/branch supprimée (précédemment 54a161c).




- on peut examiner les differences entre deux branches :

ex : git diff master ma_branche 

git diff master branch 
diff --git a/versionning/git/test_branche_file b/versionning/git/test_branche_file
index aa20ae3..4a0c9d3 100644
--- a/versionning/git/test_branche_file
+++ b/versionning/git/test_branche_file
@@ -1,3 +1,4 @@
 
  ## fake text to test branche 
  ## commit from master branch 
  ## commit from branch too ...



== merge ==

- on va pouvoir une fois nos modifs faites merger nos branches ( les fusionner )

tips : git pull fait automatiquement un git fetch et un git merge 

Bonne pratique : on utilise merge ( contrairement a rebase voir plus bas ) :
-quand une branche locale temporaire, que j’avais juste faite par précaution, afin de conserver un master propre pendant ce temps-là
-s’il s’agit d’une branche « connue », identifiée par l’équipe ou simplement par mon planning 

Il est alors préférable que l’étendue de cette branche demeure visible dans l’historique.

git merge ma_branche master : ici on va pousser les modifs de notre branche de test dans la branch master :

git merge ma_branch master 
Mise à jour e63123c..5d2ba80
Fast-forward
 versionning/git/test_branche_file | 1 +
 1 file changed, 1 insertion(+)

on voit differentes infos dans notre merge ( le/les fichier(s) impacté(s) , les ajouts , suppression ..) 
on voit aussi l'indication "Fast-forward" : ce qui est possible quand aucune modification sur la branche de destination n'ont ete faites depuis notre dernier update ou qu'aucun fichier "commun" n'a été modifié dans chacune des branches.

on peut  examiner nos logs et voir que nos branches master et ma_branch pointent sur le même commit et qu'elles sont donc à jour toutes les deux : 

* 5d2ba80 (HEAD -> master, branch) update file for branch test  <<<<<<on voit le num de commit qui correspond au merge précedemment fait 
*   54a161c (origin/branch) up
|\  
| * e63123c (origin/master, origin/HEAD) up
* |   2fdf9e5 up
|\ \  
| |/  


- on peut supprimer l'option de fast-forward lors d'un merge de branche afin de pouvoir affiner nos messages de merges : 

git merge new_branch master --no-ff 

-> va nous ouvrir une fenetre dans laquelle on va saisir un message explicite de merge 

On retrouve ensuite ce message quand on examine les logs :

git log  --decorate --oneline --graph

*   fb7b29e (HEAD -> master) Merge branch 'new_branch'
|\  
| * 95db3b4 (new_branch) add file and update fake file for test
|/  
* 2138799 (origin/new_branch, origin/master, origin/HEAD) up
* 5e3a58d update file from branch


== conflicts ==

Suite a un merge ou un rebase (voir plus bas), il peut être nécéssaire de gérer les conflits.
- on peut devoir resoudre des conflits ( conflicts ) lors d'un merge : lorsque des fichiers ont été modifiés dans plusieurs branches différentes et que l'on veut merger
Il va falloir trancher et decider quelles sont les modifs à garder dans les fichiers .

Des qu'on veut merger et qu'il y a un conflit : git emmet un message d'alerte et nous invite a regler les conflits dans le/les fichiers modifiés dans les différentes branches :  
ex on se met dans une branche et on veut merger sur master : 

$ git checkout ma_branche
Switched to branch 'ma_ branche'

git merge master
Auto-merging lib/hello.html
CONFLICT (content): Merge conflict in lib/hello.html
Automatic merge failed; fix conflicts and then commit the result.

en editant le fichier en erreur on va pouvoir detecter les differences relatives à chaque branches : 



<html>
  <head>
<<<<<<< HEAD
    <link type="text/css" rel="stylesheet" media="all" href="style.css" />
=======
    <!-- no style -->
>>>>>>> master
  </head>
  <body>
    <h1>Hello,World! Life is great!</h1>
  </body>
</html>
The first section is the version of the current branch (style) head. The second section is the version of master branch.
La premiere section <<<<< HEAD correspond à la branche dans laquelle on se trouve 
la section ==== sert de separateur pour montrer la frontiere entre les deux branches 
La section >>>>>> master correspond aux diffs présentes dans notre branche destination ( ici master ) 


On va resoudre les conflits en supprimant, ajoutant ou modifiant ce qui est l'etat voulu du fichier puis on va pouvoir commiter :

git add lib/hello.html
git commit -m "Merged master fixed conflict."
Recorded resolution for 'lib/hello.html'.
[ma_branche f27667f] Merged master fixed conflict.

le merge est fait dans la foulée apres la resolution du conflit 


== rebase ==

on va pouvoir utiliser rebase pour cleaner l'historique de nos merges : le principe est le même qu'avec merge : fusionner des branches mais en evitant de surcharger l'historique des commits afin de ne pas surcharger la lecture des logs : utile en travail collaboratif.
Rebase est la pour changer la base d'une branche : son point de départ .rebase rejoue des series de commits à partir d'une nouvelle base.
on l'utilise quand on travaille en local et que comme plusieurs fois par jours on voit que notre repos d'origine : origine/master par exemple a été modifié et qu'on est donc pas à jour.
on l'utilise pour eviter de polluer les autres avec des commits : ex :
- Je m’y reprends à plusieurs fois pour corriger un bug ou apporter une modification qui impacte plusieurs fichiers
- Je bosse dans un sens pour finalement, plus tard, revenir en arrière en revertant le commit concerné ;
- Je fais des fautes de frappe ou de syntaxe honteuses dans mes messages de commit ;
- Par flemme, je ne découpe pas mon travail dans plusieurs commits et en ponds un bien fourre-tout, dont le message ressemble invariablement à « stuff », « fixes », « changes » ou « lots of stuff »…

Avant de faire un git push, on remet l'historique local au propre à l’aide d’un :
git rebase -i
Ce n’est pas le commit d’origine qui change (par exemple origin/master) mais la série de commits depuis, tous locaux, que je vais remanier.

ex:  

~/Documents/stuff/versionning/git  ⑂ master +  $  git checkout new_branch 
Basculement sur la branche 'new_branch'
 ~/Documents/stuff/versionning/git  ⑂ new_branch +  $  vi testo
 ~/Documents/stuff/versionning/git  ⑂ new_branch +  $  git  commit -am 'up for rebase'
[new_branch 22f1f09] up for rebase
 1 file changed, 1 insertion(+)
 ~/Documents/stuff/versionning/git  ⑂ new_branch +  $  git checkout master 
Basculement sur la branche 'master'
Votre branche est à jour avec 'origin/master'.
 ~/Documents/stuff/versionning/git  ⑂ master +  $  git rebase new_branch 
Premièrement, rembobinons head pour rejouer votre travail par-dessus...
Application de  up
Application de  up
Application de  up

on voit que notre historique reste propre et aligné et qu'il n'y a pas de pollution visuelle :

 ~/Documents/stuff/versionning/git  ⑂ master + ⇡4 ⇣3  $  git hist 
* ceb063b 2018-09-25 | up (HEAD -> master) [fredsobon]
* 9d0dd23 2018-09-24 | up [fredsobon]
* 207a57d 2018-09-24 | up [fredsobon]
* 22f1f09 2018-09-25 | up for rebase (new_branch) [fredsobon]
* d37dcf8 2018-09-24 | up [fredsobon]


== stash == 

On peut mettre de côte un fichier qu'on édité pour faire une tâche urgente , dans perdre nos modifications : en laissant de côte le fichier avec gît stash

Gît stash 
Avec un gît status on ne voit même pas le fichier modifie 
On peut éditer d'autre fichier puis les commiter.
On reprend notre fichiers stasher et on applique la modification 
Gît stash apply

À chaque stash créée on a une entrée . on peut voir ces entrées avec 
Gît stash list 
On peut delete les historiques de stash avec 
Gît stash drop va supprimer le dernier stash
De base stash gère les fichiers trackes (ajoutés au dtaging aera).
Si on veut suivre les fichiers non trackes du working directory 
Gît stash -u

Il est possible d'appliquer gît stash apply et gît stash drop en une seule commande 
Gît stash pop
Quand on travaille sur pls fichiers on peut choisir de les staches unitairement 

Ex je bosses sur index.txt
Gît stash save "simple modig sur un fichier index"
On pourra le faire sur autant de fichier qu'on veut 
Gît stash list nous montre les différents stash créé avec les messages définis a la création du stash

In peut examiner un stash avec son num de stash

Gît stash show stash@{1}
On peut bien sûr appliquer un stash unitaire 
Gît stash apply stash@{1}

Idem pour le drop
Gît stash drop stzsh @{1}

Gît stash clear permet de supprimer tous les stash existants


Il est possible de dédier des stash a des branches précises 
Gît stash branche mabranche
Gît créé la branche si elle n'existe pas, bascule dedans et appliqué les stashs puis delete les entrées des stash automatiquement

== tag == 

Untag est un label
Gît tag montag
Pour lister les tags 
Gît tag --list

Gît show montag va nous afficher le commit correspondant au tag
Pour supprimer un tag
Gît tag --delete montag 

On va pouvoir creer des tags annotés

Gît tag -a v1.0

Une fenêtre s'ouvre et on saisit un message explicite .ex release 1
On peut saisir en oneline le message de tag :
Gît tag v1.1 -m " release 1.1 ok"


On peut comparer des commits avec des tag
Gît diff v1.0 v1.1

Il est possible de tagger un commit passe ,si on a oublié 
On va utiliser le nom du commit ex :

Gît tag -a v0.9-beta cchhad55

Il est possible d'updater un tag , ex si on c'est trompé de numéro de commit avec l'option -f
Gît tag -a v0.9-beta -f cchhad54


Tag github
Sur github on peut gérer les tags : à coter du bouton release il y a tag
On va pouvoir pousser nos tag: 
Gît push origin  v1.0
Pour pousser tous nos tags locaux d'un coup :
Gît push origin master --tags

On peut supprimer un tag sur un repos distant
Gît push origin :v0.8-alpha

Ceci va delete de notre réponse ex github le tag v0.8-alpha

gît reset 
On va pouvoir revenir à une version de commit précise avec gît reset
Ex : avant dernière version
git reset HEAD^

== reflog ==
Gît reflog nous montre toutes les actions :comma des lancess (reset, commit ...)


On peut faire différents types de reset
Hard : va impacter le dtaging et working environment
Soft: pas d'impact

== cherry pick ==

Si on a une branche master et qu'on bosse sur une branche autre mais qu'on doit livrer un fix qu'on a préparer pour la branche master (ex pb de production à fixer)
On va pouvoir injecter qu'on seul commit dans notre branche master 

Ex sur la branche dev on a fait notre fix sur un fichier 
On retourne sur master 
Gît cherry-pick numcommit ...et on a récupérer notre fix ..

Tous les autres commits de la branche de dev sont toujours en dev et la branche master n'a que son fix désire










02
git branch subscrib_gen
on passe dans la branche créee : 
git checkout subscrib_gen

- on verifie la branch dans la quelle on est : 
git branch

- Resynchro notre branche avec le repo principal :
quand on est dans une branche on veut s'assurer qu"on récupere bien les modif faites sur la master par exemple .
Quand on execute la commande un message sur le prompt s'affiche pour nous prévenir que notre branche va suivre le repo distant spécifié : 

git branch -u origin/master

La branche lapin est paramétrée pour suivre la branche distante master depuis origin.

- recupération d'une branche distante et basculement à l'interrieur : 

git checkout -b  scala origin/scala


- on fait une modif : 
vi subscriptions.pp

git status

- on commit 

git commit -am '[sensu] expose a var to generate subscriptions provided in hiera'

- on pousse notre branch sur l'origine : 

git push origin subscrib_gen


Décompte des objets: 10, fait.
Delta compression using up to 4 threads.
Compression des objets: 100% (9/9), fait.
Écriture des objets: 100% (10/10), 1.02 KiB | 0 bytes/s, fait.
Total 10 (delta 5), reused 0 (delta 0)
remote: 
remote: Create merge request for subscrib_gen:
remote:   https://gitlab.meetic.ilius.net/infra-prod/puppet/merge_requests/new?merge_request%5Bsource_branch%5D=subscrib_gen
remote: 
To gitlab.meetic.ilius.net:infra-prod/puppet.git
 * [new branch]        subscrib_gen -> subscrib_gen


visible dans le repo 


== git stash ==

Il est possible de mettre de côté une modification de fichier qu'on fait pour continuer à travailler sur autre chose 
et on pourra reprendre plus tard notre fichier modifié sans qu'il ait été commité 

ex : on taff sur le fichier toto 
git status 
Sur la branche back
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git checkout -- <fichier>..." pour annuler les modifications dans la copie de travail)

	modified:   toto

on va le mettre de coté et reprendre plus tard :

$ git stash 
Saved working directory and index state Work on back: c77d5d4 [back] blabla
HEAD est maintenant à c77d5d4 [back] add blabla file

On peut voir la liste de nos fichiers mis de coté : 
$ git stash list
stash@{0}: Work on back: c77d5d4 [back] add blabla file


Quand on veut appliquer les modifs mise de coté :

$ git stash apply 


On peut faire plusieurs stashs à droite et gauche. Comment s’y retrouver ?

git stash list vous donnera la liste des stashs de ce repository:

$test(master) sam$ git stash list
stash@{0}: WIP on master: bd30f7b a
stash@{1}: WIP on master: bd30f7b a
Pour appliquer un stash en particulier, par exemple “stash@{0}”

git stash apply stash@{0}
Pour savoir ce qu’il y a dans un stash:

git stash show stash@{0}
Si un stash commence à être précieux, et que vous sentez que vous aller devoir bosser dessus pas mal de temps, vous pouvez toujours décider de finalement faire une branche avec:

git stash branch stash@{0}
Pour supprimer un stash:

git stash drop stash@{0}
Pour toutes ces commandes, si on ne précise pas le stash ciblé, le dernière créé sera utilisé par défaut.

La plupart du temps on créé un stash de manière temporaire, donc plutot que de faire un stash apply puis un stash drop, on peut faire:

git stash pop
Cela fait un stash apply avec le stash le plus récent, mais en plus cela supprime le stash de la liste.

Comme les stashs sont comme des commits ordinaires, mais simplement en dehors de tout historique et de toute branche, on peut faire toutes les operations qu’on fait sur les commit sur les stashs: merge, checkout, patch, etc. Cela dit c’est un usage avancé que je ne recommande pas au débutant car il faut être capable de visualiser l’état de son travail du point de vue de git pour s’en sortir.

Si vous découvrez git, vous n’avez vraiment que deux commandes dont ils faut se souvenir:

git stash
git stash apply




- Rebase :

par securité et être en phase avec un repo officiel : ex production , avant de pousser notre branche on pourra être ammené à faire récupérer :

1/ on se met dans la branch que l'on veut pousser :
git checkout elastic_update 

Basculement sur la branche 'elastic_update'
Votre branche est à jour avec 'origin/elastic_update'.
boogie-/home/boogie/Documents/work/repos_work/puppet>> 
boogie-/home/boogie/Documents/work/repos_work/puppet>> 
boogie-/home/boogie/Documents/work/repos_work/puppet>> 

2/ On recupére les modif passées sur notre branche officielle production que l'on réintegre dans notre branche de test :

boogie-/home/boogie/Documents/work/repos_work/puppet>> git rebase production 
Premièrement, rembobinons head pour rejouer votre travail par-dessus...
Application de  [elk] test upgrade for centos 7

3/ puis on pousse les modifs de notre branche de test sur l'origine (si besoin avec les options pour passer en douceurs les eventuels soucis) : 

boogie-/home/boogie/Documents/work/repos_work/puppet>> git push --set-upstream origin elastic_update --force-with-lease
Décompte des objets: 5, fait.
Delta compression using up to 4 threads.
Compression des objets: 100% (5/5), fait.
Écriture des objets: 100% (5/5), 805 bytes | 0 bytes/s, fait.
Total 5 (delta 2), reused 0 (delta 0)
remote: 
remote: Create merge request for elastic_update:
remote:   https://gitlab.meetic.ilius.net/infra-prod/puppet/merge_requests/new?merge_request%5Bsource_branch%5D=elastic_update
remote: 
To gitlab.meetic.ilius.net:infra-prod/puppet.git
 + c91e4358...79a64987 elastic_update -> elastic_update (forced update)
La branche elastic_update est paramétrée pour suivre la branche distante elastic_update depuis origin.


- Supression de branche : 

git branch -D nom de branch 

on ne doit pas être placé dans la branche qu'on veut delete 
boogie-/home/boogie/Documents/work/repos_work/puppet>> git branch 
* production
  subscrib_gen
boogie-/home/boogie/Documents/work/repos_work/puppet>> git branch -D subscrib_gen 
Branche subscrib_gen supprimée (précédemment 54fdef3d).
boogie-/home/boogie/Documents/work/repos_work/puppet>> git branch 
* production


- Listing des branches distantes : 

git branch -r

- Récupération d'une branche d'un repos distant :

git checkout -b nom_de_notre_branche  origin/nom_de_notre_branche


- Recupération des fichiers de branche d'un repo distant :

git pull origin nom_de_branche

git pull origin elastic_update
Depuis gitlab:prod/puppet
 * branch              nom_de_branch -> FETCH_HEAD
 Mise à jour 8500f951..13c2eeff
 Fast-forward
  lapin/manifests/init.pp        | 11 ++++++-----
  lapin_nain/manifests/init.pp |  5 +++--
  2 files changed, 9 insertions(+), 7 deletions(-)


== Conflits / erreurs : ==

= Reset d'une modif de fichier apres un git add :

si on a fait une erreur et qu'on veut restaurer le fichier a la version d'avant notre add : 

git reset HEAD <nomdefichier>  : on repasse de notre stage a notre working directory 

si on s'apercoit que malgré tout le fichier que l'on retrouve dans notre working directory n'est pas le bon on peut récupérer le dernier fichier commité :

git checkout --<nomdefichier>


= Reset de conf après un commit (avant avoir pousser ) 

Si on s'apercoit que notre dernier commit n'est pas bon on peut restaurer l'ancienne version avant de pousser sur le repo : 

git reset HEAD~


= Checkout / restauration fichier original : =

Comment restaurer un fichier 
1/ rechercher le numero de commit : 

git log --oneline
e4a48903 [eventbus] by pass for kafka 
5fca95d7 set only one record for eventbus01
20dff863 [kafka] adjusts for dev env
b603fb8d [BASE] - updating hosts for eventbus01


git log -p 


2/ recupération du fichier concerné dans la bonne version : on examine la conf du fichier avant le commit qui l'a modifier : 

git checkout df9192dc main-config.xml.erb



