##### GIT ####


# chapitre 1 

1/ 
Git is a software that allows you to keep track of changes made to a project over time. Git works by recording the changes you make to a project, storing those changes, then allowing you to reference them as needed.
We'll learn Git by using it to help us write a screenplay called Harry Programmer and the Sorcerer's Code.
Instructions
1.
We’ll get started by taking a look at the screenplay project.
In scene-1.txt, add this text:
    Harry Programmer and the Sorcerer’s Code: Scene 1
Then press enter to create a new empty line. Once you've created the new line, click Run.

2/ 
Now that we have started working on the screenplay, let’s turn the sorcerers-code directory into a Git project. We do this with:
  git init
The word init means initialize. The command sets up all the tools Git needs to begin tracking changes made to the project.
Instructions
1.
In the terminal, initialize a new Git project.
Notice the output:
    Initalized an empty git repository in /home/ccuser/workspace/sorcerers-code/.git/
The Git project was created. Click Next to continue.

3/
Nice! We have a Git project. A Git project can be thought of as having three parts:

    A Working Directory: where you'll be doing all the work: creating, editing, deleting and organizing files
    A Staging Area: where you'll list changes you make to the working directory
    A Repository: where Git permanently stores those changes as different versions of the project

The Git workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository. In Git, we save changes with a commit, which we will learn more about in this lesson.
Instructions

Take a look at the diagram. Before we move on, it will help to be familiar with the three parts of the Git workflow. Click Next to continue.

4/
As you write the screenplay, you will be changing the contents of the working directory. You can check the status of those changes with:
    git status
Instructions
1.
From the terminal, check the status of the sorcerers-code project.
In the output, notice the file in red under untracked files. Untracked means that Git sees the file but has not started tracking changes yet.

5/ 
In order for Git to start tracking scene-1.txt, the file needs to be added to the staging area.
We can add a file to the staging area with:
    git add filename
The word filename here refers to the name of the file you are editing, such as scene-1.txt.
Instructions
1.
Add scene-1.txt to the staging area in Git. Recall that you will need to identify the file by its name.
2.
Check the status of the project in Git.

In the output, notice that Git indicates the changes to be committed with "new file: scene-1.txt" in green text. Here Git tells us the file was added to the staging area.

6/
Good work! Now you know how to add a file to the staging area.

Imagine that we type another line in scene-1.txt. Since the file is tracked, we can check the differences between the working directory and the staging area with:

git diff filename

1.
In the code editor, add this text to scene-1.txt:
    Dumblediff: I should've known you would be here, Professor McGonagit.
Click Run.
2.
From the terminal, use the new command to check the difference between the working directory and the staging area.
Notice the output:
    "Harry Programmer and the Sorcerer's Code: Scene 1" is in the staging area, as indicated in white.
Changes to the file are marked with a + and are indicated in green.
IMPORTANT: press q on your keyboard to exit diff mode.
3.
Add the changes to the staging area in Git. Recall that you will need to identify the file by its name.
Here's a hint for how to add files to the staging area.

7/ 
In order for Git to start tracking scene-1.txt, the file needs to be added to the staging area.
We can add a file to the staging area with:
    git add filename
The word filename here refers to the name of the file you are editing, such as scene-1.txt.
Instructions
1.
Add scene-1.txt to the staging area in Git. Recall that you will need to identify the file by its name.
2.
Check the status of the project in Git.
In the output, notice that Git indicates the changes to be committed with "new file: scene-1.txt" in green text. Here Git tells us the file was added to the staging area.

8/
A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.
git commit is the command we'll do next. However, one more bit of code is needed for a commit: the option -m followed by a message. Here's an example:
    git commit -m "Complete first line of dialogue"
Standard Conventions for Commit Messages:

    Must be in quotation marks
    Written in the present tense
    Should be brief (50 characters or less) when using -m

$ git commit -m " this is the first commit"                                                                                                            
[master (root-commit) a0005d2]  this is the first commit                                                                                               
 1 file changed, 3 insertions(+)                                                                                                                       
 create mode 100644 scene-1.txt  

9/
Often with Git, you'll need to refer back an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with:
    git log
    $ git log                                                                                                                                              
commit a0005d2d7f2aa8d02369db0ca5303ff156eac81e                                                                                                        
Author: codecademy <ccuser@codecademy.com>                                                                                                             
Date:   Wed Dec 2 06:44:03 2015 -0500                                                                                                                  

You have now been introduced to the fundamental Git workflow. You learned a lot! Let's take a moment to generalize:
###
    Git is the industry-standard version control system for web developers
    Use Git commands to help keep track of changes made to a project:
        git init creates a new Git repository
        git status inspects the contents of the working directory and staging area
        git add adds files from the working directory to the staging area
        git diff shows the difference between the working directory and the staging area
        git commit permanently stores file changes from the staging area in the repository
        git log shows a list of all previous commits
###

# chapitre 2 


1/ 

When working on a Git project, sometimes we make changes that we want to get rid of. Git offers a few eraser-like features that allow us to undo mistakes during project creation. In this lesson, we'll learn some of these features.

To start out, let's review the basic Git workflow.
Instructions
1.
You are in a Git project titled hamlet-prince-of-denmark. In the code editor, you'll be working on scene-5.txt. Here, Hamlet encounters the ghost of his father. Add this text to the file:

Ghost: 
My hour is almost come,
When I to sulphurous and tormenting flames
Must render up myself.

You are in a Git project titled hamlet-prince-of-denmark. In the code editor, you'll be working on scene-5.txt. Here, Hamlet encounters the ghost of his father. Add this text to the file:

Ghost: 
My hour is almost come,
When I to sulphurous and tormenting flames
Must render up myself.
2.
From the terminal, add scene-5.txt to the staging area.
Here's a hint on how to do it.
3.
Commit the changes to the repository with a good commit message.
Here's a hint on how to do it.



2 /
In Git, the commit you are currently on is known as the HEAD commit. In many cases, the most recently made commit is the HEAD commit.
To see the HEAD commit, enter:
    git show HEAD
The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.
Instructions
1.
Enter the command to show the HEAD commit.
Notice the output. The ghost's most recently added line is in green text.

$ git show HEAD                                                                                                                                        
commit fbb664b660f14c7b14b42373e04b775a9a485ac9                                                                                                        
Author: codecademy <ccuser@codecademy.com>                                                                                                             
Date:   Wed Dec 2 07:20:20 2015 -0500                                                                                                                  
                                                                                                                                                       
     scene-5 commit 1                                                                                                                                  
                                                                                                                                                       
diff --git a/scene-5.txt b/scene-5.txt                                                                                                                 
index b12dd97..d830070 100644                                                                                                                          
--- a/scene-5.txt                                                                                                                                      
+++ b/scene-5.txt                                                                                                                                      
@@ -10,5 +10,11 @@ Mark me.                                                                                                                            
                                                                                                                                                       
 Hamlet:                                                                                                                                               
 I will.                                                                                                                                               
+Ghost:                                                                                                                                                
+My hour is almost come,                                                                                                                               
+When I to sulphurous and tormenting flames                                                                                                            
+Must render up myself.                                                                                                                                
+                                                                                                                                                      
+                                                                                                                                                      
                                                                                                                                                       
                                                                                                                                                       
3/ 
What if you decide to change the ghost's line in the working directory, but then decide you wanted to discard that change?
You could rewrite the line how it was originally, but what if you forgot the exact wording? The command
    git checkout HEAD filename
will restore the file in your working directory to look exactly as it did when you last made a commit.

Instructions
1.
Change the ghost's words in some way. Here's a fun suggestion:
Ghost: 
My hour is almost come,
When I to sulphurous and tormenting balloons
Must render up myself.

$ git diff                                                                
diff --git a/scene-5.txt b/scene-5.txt                                    
index d830070..8d6649c 100644                                             
--- a/scene-5.txt                                                         
+++ b/scene-5.txt                                                         
@@ -12,7 +12,7 @@ Hamlet:                                                 
 I will.                                                                  
 Ghost:                                                                   
 My hour is almost come,                                                  
-When I to sulphurous and tormenting flames                               
+When I to sulphurous and tormenting balloons                             
 Must render up myself.  

$ git checkout HEAD scene-5.txt 


3/
The hamlet we are working on contains five files. In Git, it's common to change many files, add those files to the staging area, and commit them to Git in a single commit.
For example, say you want to change the character "LARRY" to "LAERTES" in the script. The name currently appears in two files. After you change the name in both files, you could add the changed files to the staging area with:
    git add filename_1 filename_2
Note the word filename above refers to the name of the file you are adding to the staging area, such as scene-3.txt.

Instructions
1.
The code editor is open to scene-3.txt and scene-7.txt. In scene-3.txt, everywhere you see the name "LARRY" change it to "LAERTES."
2.
Now change all instances of "LARRY" to "LAERTES" in scene-7.txt.
3.
Add the files to the staging area together using a single git command.


 

