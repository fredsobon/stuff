=== notes depuis video gitlab udemy ===


== setup ==

Community edition -> version cible : free
machine de test vm / vagrant / docker(?) -> todo

une fois les pre requi systeme rempli sur notre vm et l'install de notre gitlab, on va lancer une commande de reconfiguration : des utilitaires en cli sont dispos pour manager gitlab
- reconfigure : 
sudo gitlab-ctl reconfigure
-status : 
on peut voir le status de notre gitlab : 
sudo gitlab-ctl status 

Maintenant on ouvre un browser et on saisi l'ip de notre gitlab 
on arrive sur une page "change password" : ce qu'on fait. : le user est root 
on arrive donc ensuite sur le dashboard gitlab


= dns et https setting = 

-> dns : on peut binder sur un domain acheter ou autre bien sur 

une fois loggé sur notre gitlab on va pouvoir creer un projet 
> clic sur projet nouveau projet : on saisi le nom de notre projet
Dans la page du projet on peut voir l'url du repo git de notre projet

pour modifier la conf de notre serveur gitlab : exemple modifier l'url on va editer le fichier de conf :
/etc/gitlab/gitlab.rb 
ex : modifier la ligne :
external_ur 'http://notre_url'
a chaque modif de notre conf on va recharger la conf avec :
gitlab-ctl reconfigure

on  peut voir si on a modifier dans notre conf la section external_url : la modification de l'url en rafraichissant la page de notre projet

= ssl sur gitlab =
on va maintenant gérer le https sur notre server (certif ssl acheté, let's encrypt utilisé ,un autosigné ..) une fois notre certif ok , on va modifier notre fichier de conf gitlab :

gitlab embarque nginx en serveur http 

on va modifier quelques conf dans le fichier /etc/gitlab/gitlab.rb 

on active la redir http /https :
nginx['redirect_http_to_https'] = true 

on va faire pointer la conf sur le certif ssl qu'on aura posé ( exemple arbo classique /etc/ssl ..) 
nginx['ssl_certificate'] = "/etc/ssl/server.crt"
nginx['ssl_certificate_key'] = "/etc/ssl/server.key"
on reload notre conf 
gitlab-ctl reconfigure

NB : si on a un firewall ne pas oublier de modifier la conf pour https / port 443

= email options = 
dans le fichier de conf principal on a toute une section email 
qu'on va decommenter et renseigner avec nos infos 
ex : 
gitlab_rails['gitlab_email_from']='admin@gitlab-demo.com
gitlab_rails['gitlab_email_display_name]='Gitlab Admin'
gitlab_rails['gitlab_email_reply_to']='noreply@gitlab-demo.com

on reload notre conf 
gitlab-ctl reconfigure

on va pouvoir verifier notre conf en nous loggant et créant un nouveau user sur le dash gitlab : on va dans la section admin aera et on crée notre user 

une fois qu'on valide la creation de notre user : on examine la mailbox de notre user qui a du recevoir un email de gitlab informant la creation du compte et demandant le reset du mdp


== Git / markdown basics ==

= basics : =
- initialisation :
git init

- ajout :
git add 

- exclusion de fichiers par l'ajout d'un fichier ".gitignore" 
ex :
.gitignore 
*.pyc : ignore tous les fichiers pyc

- status de notre repo :
git status 

- commit :enregistrement de notre modif sur le repo local 
git commit 

- tag : si on veut fixer un tag precis sur un commit precis 
git tag -a -v1.1 -m 'version 1.1'

- log : pour examiner les differents commit : historisation
git log 

- clone : pour recupérer un repo distant :
git clone git://github.com/test/test.git
on peut donner le nom qu'on veut au repo cloner 
git clone git://github.com/test/test.git mytest

- branch:
-> verif de branche : on peut verifier les branches presentes sur un poste :
git branch
git branch nom_de_ma_branche
-> checkout de la branche master :
git checkout master
-> checkout de la branche test :
git checkout test 
-> creation de branch : 
git checkout -b mybranch  < on cree une branche et on bascule auto dedans  

exemple : 
 /tmp  $  mkdir test
 /tmp  $  cd test/
 /tmp/test  $  git init 
Dépôt Git vide initialisé dans /tmp/test/.git/
 /tmp/test  ⑂ master  $  ls -la 
total 20
drwxr-xr-x  3 boogie boogie  4096 janv. 20 08:21 .
drwxrwxrwt 13 root   root   12288 janv. 20 08:20 ..
drwxr-xr-x  7 boogie boogie  4096 janv. 20 08:21 .git

 /tmp/test  ⑂ master  $  touch test.txt
 /tmp/test  ⑂ master +  $  git status 
Sur la branche master

Validation initiale

Fichiers non suivis:
  (utilisez "git add <fichier>..." pour inclure dans ce qui sera validé)

	test.txt

aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez "git add" pour les suivre)
 /tmp/test  ⑂ master +  $  git add test.txt 
 /tmp/test  ⑂ master +  $  git status 
Sur la branche master

Validation initiale

Modifications qui seront validées :
  (utilisez "git rm --cached <fichier>..." pour désindexer)

	nouveau fichier : test.txt


aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez "git add" pour les suivre)
 /tmp/test  ⑂ master +  $  git add test.txt 
 /tmp/test  ⑂ master +  $  git status 
Sur la branche master

Validation initiale

Modifications qui seront validées :
  (utilisez "git rm --cached <fichier>..." pour désindexer)

	nouveau fichier : test.txt

 /tmp/test  ⑂ master +  $  git commit 
[master (commit racine) 6dce919] this is the first commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test.txt
 /tmp/test  ⑂ master  $  git status 
Sur la branche master
rien à valider, la copie de travail est propre
 /tmp/test  ⑂ master  $  gilt log
bash: gilt : commande introuvable
 /tmp/test  ⑂ master  $  git log
commit 6dce9192ab88ee75c5d58553fa38bf17a490c36f
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:22:16 2018 +0100

    this is the first commit

 /tmp/test  ⑂ master  $  vi test.txt 
 /tmp/test  ⑂ master +  $  git status 
Sur la branche master
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git checkout -- <fichier>..." pour annuler les modifications dans la copie de travail)

	modifié :         test.txt

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")
 /tmp/test  ⑂ master +  $  git add test.txt 
 /tmp/test  ⑂ master +  $  git commit 
[master 07e9cdf] this is the secoind commit
 1 file changed, 1 insertion(+)
 /tmp/test  ⑂ master  $  git status 
Sur la branche master
rien à valider, la copie de travail est propre

on verifie le commit via un git log 
 /tmp/test  ⑂ master  $  git log
commit 07e9cdf616275ec3512c095eb7bac5467fef2c87
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:24:04 2018 +0100

    this is the second commit

commit 6dce9192ab88ee75c5d58553fa38bf17a490c36f
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:22:16 2018 +0100

    this is the first commit


 /tmp/test  ⑂ master  $  git branch
* master
 /tmp/test  ⑂ master  $  git checkout -b testing
Basculement sur la nouvelle branche 'testing'

 /tmp/test  ⑂ testing  $  vi test.txt 
 /tmp/test  ⑂ testing +  $  git status
Sur la branche testing
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git checkout -- <fichier>..." pour annuler les modifications dans la copie de travail)

	modifié :         test.txt

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")
 /tmp/test  ⑂ testing +  $  git add test.txt 
 /tmp/test  ⑂ testing +  $  git commit 
[testing 1bb1dac] this is the second line
 1 file changed, 1 insertion(+)
 /tmp/test  ⑂ testing  $  git log
commit 1bb1dacb4ac6bb18c86e4676c8dda46401266084
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:28:57 2018 +0100

    this is the second line

commit 07e9cdf616275ec3512c095eb7bac5467fef2c87
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:24:04 2018 +0100

    this is the secoind commit

commit 6dce9192ab88ee75c5d58553fa38bf17a490c36f
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:22:16 2018 +0100

    this is the first commit

on voit que le fichier de la branche testing contient deux lignes et celui de la branche master une seule :
    this is the first commit
 /tmp/test  ⑂ testing  $  more test.txt 
this is the frst line
this is the second line
 /tmp/test  ⑂ testing  $  git checkout master 
Basculement sur la branche 'master'
 /tmp/test  ⑂ master  $  more test.txt 
this is the frst line

idem quand on regarde le log de la branche master :
 /tmp/test  ⑂ master  $  git log
commit 07e9cdf616275ec3512c095eb7bac5467fef2c87
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:24:04 2018 +0100

    this is the secoind commit

commit 6dce9192ab88ee75c5d58553fa38bf17a490c36f
Author: fredsobon <f.sobon@meetic-corp.com>
Date:   Sat Jan 20 08:22:16 2018 +0100

    this is the first commit


on rajoute une branche : 
 /tmp/test  ⑂ master  $  git checkout -b  demo
Basculement sur la nouvelle branche 'demo'
 /tmp/test  ⑂ demo  $  git branch
* demo
  master
  testing
on peut la supprimer il faut d'abord basculler sur master : 
 /tmp/test  ⑂ master  $  git checkout master 
Déjà sur 'master'
 /tmp/test  ⑂ master  $  git branch -D demo
Branche demo supprimée (précédemment 07e9cdf).
 /tmp/test  ⑂ master  $  git branch
* master
  testing

= markdown =

on va pouvoir utiliser markdown : language standard de balise qui est setté en "plain" text.Tres populaire ex : sur github on a beaucoup de fichier de type README.md
on va pouvoir utiliser dans notre instance gitlab la section Help qui va nous aider sur markdown.
Help -> user documentation

on va pouvoir faire du training sur le syntax md :
ex on va sur gitlab-demo.com > selection projet demo/helloworld 
> on cree un issue : mardown test : on submit
on peut donc saisir dans le bloc du texte au format markdown et previsualiser le resultat 

-> header :
# H1 header 1
...
....
###### H6 : header h6

> emphasis : qui va servir a setter notre doc en italique
> liste :
> links 
> images
> on peut faire du focus highlight :
ex mettre en focus un bloc de code d'un language donné 
```python
print("hello world!")
def func():
    return None
```
> tables 
> tasks : on peut créer des listes de tasks ( syntaxe gitlab) 
> gitlab reference : on peut utiliser ces conf pour assigné un user, trouver un issue 


== gitlab basic concepts : =


= users : 
on va pouvoir créer un user dans la page principale : register on renseigne nos champs :
on peut supprimer un user en allant en tant que root ou user granter dans l'admin aera
une  fois notre user creer on peut modifier le profile dans notre section

= sshkeys : 
on va pouvoir pousser nos change vers le gitlab serveur avec nos clés ssh 
dans notre section user et la section ssh on va pouvoir coller notre clé ssh 

on va pouvoir faire un peut de conf dans le fichier config du user repertoire  .ssh ( on peut setter le Host , le user pour ce host ...)

 

== groups et projets ==

on peut créer des projets à différents endroits : à la racine de note workspace ou dans des groupes.
un groupe est un ensemble de projets en relation.
on peut definir plusieurs niveaux de vues à notre projet et à notre groupe : 
-> private 
-> internal
-> public
on va pouvoir une fois créeé examiner notre projet dans gitlab : on va pouvoir voir les commits, branches etc...
on peut récupérer l'url du repo git : faire des modifs sur un ou des fichiers du projet.

on va pouvoir pousser nos modifs vers le repo master de gitlab avec :

git push origin master 
une fois fait on peut examiner dans le repo gitlab l'activité et le repository pour examiner les modifs faites dans les fichiers.

== issues and labels : ==

= issues : =

on va pouvoir créer une issue sur nos repos : ex une typo dans un fichier : que l'on va pouvoir rapporter au dev ou a une team responsable du projet.

issue -> new issue -> on donne un titre et on peut assigner a quelqu'un 
 
label -> on va pouvoir créer un label : afin de pouvoir classifier les bugs etc ...

label -> new label -> on donne un titre et une couleur

on peut ensuite associer une label à notre issue 
ex : typo issue flagguée avec un label critical
on peut notifier quelqu'un dans un issue avec le caractere "@" 

on peut se desinscrire des update sur l'issue avec le bouton "unsubscribe"


== forks and merge requests : ==

pour fixer un issue on a souvent différentes méthodes :

-> créer une branche dans notre repo :
-> forker le repo dans notre environnement de travail


-> new branch :
dans la page issue on clic sur new branch

ensuite dans notre env :

git fetch : on va recupérer les nouvelles branches
on basculle dans cette branche :
git checkout new_branch

on va pouvoir corriger notre typo puis commit et pousser notre modif sur le master :

git push origin new_branch


ensuite on va créer une merge request : 

pour fixer notre modif et pousser dans la branche master :

sur notre page principale on va créer une merge request et on va l'assigner a quelqu'un qui gere le projet 
on va choisir egalement la branche source et la branche de destination 
ex : new_branch en origine 
master en destination

on va ensuite accepter la mr et donc pousser les modif sur le repo master 


-> fork 
une deuxieme methode pour fixer nos pb est le fork 

il peut nous arriver de devoir cloner le repo dans notre env local car nous n'avons pas les droits pour créer des branches.
on va cliquer sur le bouton fork et on va choisir notre "namespace" 

on va ensuite clone le fork sur notre poste 

on va créer une mr en choisissant le bon nom de source avec le fork 


== milestones and issues dashboard ==

-> milestones est pour les projet on va setter un numero de version ex : 1.0
on peut aussi definir une due date  : ex 27/05

on veut donc livrer par exemple notre projet demo en version 1.0 le 27 mai 
on  va donc pouvoir créer des issues , des mr qui seront liées et devront être fermées pour le 27/05
on peut associer et visualiser plusieurs projets dans un milestone

-> issues board :
on va pouvoir voitr l'evolution de nos tkts dans le dashbord principal des issues 
on peut faire plusieurs listes, deplacer les issues de listes ....

on peut filtrer par dev, projet etc ....



== templating for merge request ==

On va pouvoir créer des templates pour nos merges requests  et nos templates 
On peut utiliser des descriptions templates ( Attention pas sur toutes les versions de gitlab) : cela se voit apres la creation d'un nouvel issue 

on doit dans ce cas créer un fichier markdown a la racine de notre repo : en cli : .gitlab et a l'interrieur un repertoire issue_template :
avec 2 fichiers : 
BUG.md et feature.md avec du contenu 

on pousse notre modif et ensuite quand on cree une issue on peut selectionner le template que l'on vient de créer pour la description de notre issue 
 


