=== notes kubernetes courses starter udemy : ===



= set up :

on va tout d'abotd installer minikube : un kubernetes leger pour prendre en main l'outil :
https://github.com/kubernetes/minikube 

on lance l'install comme mentionner dans le readme du repo github  :
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

une fois recupérée on peut lancer minikube ( le binaire a été copier dans /usr/local/bin comme on le voit dans la commande précédente :
minikube start
Starting local Kubernetes v1.10.0 cluster...
Starting VM...
Downloading Minikube ISO
 160.27 MB / 160.27 MB [============================================] 100.00% 0s
Getting VM IP address...
Moving files into cluster...
Downloading kubeadm v1.10.0
Downloading kubelet v1.10.0
Finished Downloading kubelet v1.10.0
Finished Downloading kubeadm v1.10.0
Setting up certs...
Connecting to cluster...
Setting up kubeconfig...
Starting cluster components...
Kubectl is now configured to use the cluster.
Loading cached images from config file.


On peut voir un repertoire caché dans le home de notre user : 
 ~  $  ls -la .kube/
total 20
drwxr-xr-x  4 boogie boogie 4096 juil. 29 18:28 .
drwxr-xr-x 67 boogie boogie 4096 juil. 29 18:24 ..
drwxr-xr-x  3 boogie boogie 4096 mars   2 15:37 cache
-rw-------  1 boogie boogie  424 juil. 29 18:28 config
drwxr-xr-x  3 boogie boogie 4096 mars   2 15:51 schema
 ~  $  cat .kube/config 
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /home/boogie/.minikube/ca.crt
    server: https://192.168.99.100:8443
  name: minikube
contexts:
- context:
    cluster: minikube
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
  user:
    client-certificate: /home/boogie/.minikube/client.crt
    client-key: /home/boogie/.minikube/client.key


On va utiliser un utilitaire de commande dédié au pilotage de kube : kubectl :

que l'on a récupéré normalement pendant l'install ou qu'on peut avoir sur :
https://kubernetes.io/docs/tasks/tools/install-kubectl/

ex : 
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl


On a un kubectl fonctionnel :
ex : 

 ~  $  kubectl get nodes
NAME       STATUS    AGE
minikube   Ready     11m


 ~  $  kubectl version
Client Version: version.Info{Major:"1", Minor:"5", GitVersion:"v1.5.2", GitCommit:"08e099554f3c31f6e6f07b448ab3ed78d0520507", GitTreeState:"clean", BuildDate:"2017-01-12T04:57:25Z", GoVersion:"go1.7.4", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"10", GitVersion:"v1.10.0", GitCommit:"fc32d2f3698e36b93322a3465f63a14e9f0eaead", GitTreeState:"clean", BuildDate:"2018-03-26T16:44:10Z", GoVersion:"go1.9.3", Compiler:"gc", Platform:"linux/amd64"}

on peut lancer une container : on recupére un container basic sur le service cloud de google : 


 ~  $  kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
deployment "hello-minikube" created


on peut voir qu'on a bien recupérer notre "pod"( container ) : 
 ~  $  kubectl get pods
NAME                              READY     STATUS             RESTARTS   AGE
hello-minikube-6786c7bff4-pxtrh   0/1       ImagePullBackOff   0          1m

on voit qu'on a bien créer un "deployment" egalement :
 ~  $  kubectl get deployments
NAME             DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
hello-minikube   1         1         1            0           4m


Pour pouvoir acceder au service de notre docker hello-minikube on va devoir exposer notre deployment à une ip externe avec la commande suivante : 

kubectl expose deployment hello-minikube --type=NodePort
service "hello-minikube" exposed:

on peut vérifier qu'on a bien exposer notre service avec :

 ~  $  kubectl get services
NAME             CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
hello-minikube   10.99.242.169   <nodes>       8080:30432/TCP   4s
kubernetes       10.96.0.1       <none>        443/TCP          20m
 

on va maintenant recupérer l'url que l'on va pouvoir atteindre via un curl ou un browser après avoir lancer la commande : 


 curl $(minikube service hello-minikube --url)
CLIENT VALUES:
client_address=172.17.0.1
command=GET
real path=/
query=nil
request_version=1.1
request_uri=http://192.168.99.100:8080/

SERVER VALUES:
server_version=nginx: 1.10.0 - lua: 10001

HEADERS RECEIVED:
accept=*/*
host=192.168.99.100:32317
user-agent=curl/7.52.1
BODY:


on peut donc maintenant interroger notre service via un browser ou en curl  : 

curl 192.168.99.100:32317
CLIENT VALUES:
client_address=172.17.0.1
command=GET
real path=/
query=nil
request_version=1.1
request_uri=http://192.168.99.100:8080/

SERVER VALUES:
server_version=nginx: 1.10.0 - lua: 10001

HEADERS RECEIVED:
accept=*/*
host=192.168.99.100:32317
user-agent=curl/7.52.1
BODY:
-no body in request- ~  $  


on va pouvoir acceder au dashboard de kubernetes accessible dans le navigateur en lancant la commande : 

$ minikube dashboard 

on ouvrer notre browser et on peut voir les différents pannels : 
http://192.168.99.100:30000/#!/overview?namespace=default

On peut supprimer nos services ,deployment : 

$ kubectl delete service hello-minikube
service "hello-minikube" deleted
$ kubectl delete deployment hello-minikube
deployment "hello-minikube" deleted

pour arreter kubernetes : 
$ minikube stop
Stopping local Kubernetes cluster...
Machine stopped.


Notes sur kubectl :

kubectl
The minikube start command creates a "kubectl context" called "minikube". This context contains the configuration to communicate with your Minikube cluster.

Minikube sets this context to default automatically, but if you need to switch back to it in the future, run:

kubectl config use-context minikube,

or pass the context on each command like this: kubectl get pods --context=minikube.

notes sur services :
Services
To access a service exposed via a node port, run this command in a shell after starting Minikube to get the address:

minikube service [-n NAMESPACE] [--url] NAME


- docker : 
on va construire un docker ( simple app node js ) 
pour cela on clone 
 git clone https://github.com/wardviaene/docker-demo

trois fichiers nous interressent :
Dockerfile
index.js
package.json

 ~/Documents/lab/kube/kube_u_starter/docker/nodejs/docker-demo  ⑂ master  $  cat Dockerfile 
FROM node:4.6
WORKDIR /app
ADD . /app
RUN npm install
EXPOSE 3000
CMD npm start
 ~/Documents/lab/kube/kube_u_starter/docker/nodejs/docker-demo  ⑂ master  $  cat index.js 
var express = require('express');
var app = express();

app.get('/', function (req, res) {
  res.send('Hello World!');
});

var server = app.listen(3000, function () {
  var host = server.address().address;
  var port = server.address().port;

  console.log('Example app listening at http://%s:%s', host, port);
});
 ~/Documents/lab/kube/kube_u_starter/docker/nodejs/docker-demo  ⑂ master  $  cat package.json 
{
  "name": "myapp",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "node index.js",
  },
  "engines": {
    "node": "^4.6.1"
  },
  "dependencies": {
    "express": "^4.14.0",
  },
}

on va ensuite lancer le build de notre docker :

 ~/Documents/lab/kube/kube_u_starter/docker/nodejs/docker-demo  ⑂ master  $  sudo docker build .
Sending build context to Docker daemon  137.2kB
Step 1/6 : FROM node:4.6
4.6: Pulling from library/node
386a066cd84a: Pull complete 
75ea84187083: Pull complete 
88b459c9f665: Pull complete 
1e3ee139a577: Pull complete 
f78ff7d0315b: Pull complete 
f4ba677961ff: Pull complete 
21db8c3555aa: Pull complete 
Digest: sha256:a1cc6d576734c331643f9c4e0e7f572430e8baf9756dc24dab11d87b34bd202e
Status: Downloaded newer image for node:4.6
 ---> e834398209c1
...
.....
Step 6/6 : CMD npm start
 ---> Running in f3447711b726
Removing intermediate container f3447711b726
 ---> e38e27fde867
Successfully built e38e27fde867

une fois buildé on peut lancer notre container :

 ~/Documents/lab/kube/kube_u_starter/docker/nodejs/docker-demo  ⑂ master  $  sudo docker run -p 3000:3000 -t e38e27fde867
npm info it worked if it ends with ok
npm info using npm@2.15.11
npm info using node@v4.6.2
npm info prestart myapp@0.0.1
npm info start myapp@0.0.1

> myapp@0.0.1 start /app
> node index.js

Example app listening at http://:::3000

si on lance  une autre console on peut voir le résultat de notre affichage : 
 ~/Documents/lab/kube/kube_u_starter/docker/nodejs/docker-demo  ⑂ master  $  curl localhost:3000
Hello World!


