=== kubectl  commands memo ===

== nodes  ==

lister les nodes du cluster : 

kubectl get nodes
NAME                STATUS    AGE
paasnode11b   Ready     91d
paasnode12u   Ready     9d
paasnode13b   Ready     65d
paasnode15b   Ready     63d
paasnode17b   Ready     14d

kubectl describe nodes paasnode1  |head
Name:     paasnode11b
Role:     
Labels:     beta.kubernetes.io/arch=amd64
      beta.kubernetes.io/os=linux
      kubernetes.io/hostname=paasnode
Taints:     <none>
CreationTimestamp:  Tue, 05 Jun 2018 18:17:10 +0200
Phase:      
Conditions:
  Type      Status  LastHeartbeatTime     LastTransitionTime      Reason        Message

== namespace ==

-> voir tous les namespaces du cluster 

 kubectl get namespace / kubectl get ns 
NAME                           STATUS    AGE
default                        Active    91d
ingress-nginx                  Active    4h
kube-public                    Active    91d
kube-system                    Active    91d
lapin

-> recuperation des pods de tous les namespaces  

kubectl get --all-namespaces pods -o wide

-> recuperation des pods de tous les namespaces avec une sortie détaillée ( on voit dans ce cas le node qui porte le pod )  
kubectl get --all-namespaces pods -o wide

exam des pods d'un namespace :

- version longue 

kubectl get pods --namespace=<namespace>
kubectl get pods --namespace=ingress-nginx
NAME                                        READY     STATUS    RESTARTS   AGE
default-http-backend-5fbc94f784-dzrsn       1/1       Running   0          73d
nginx-ingress-controller-86484748b7-vlzdb   1/1       Running   2          10d


kubectl get pods --namespace=kube-system
NAME                                    READY     STATUS    RESTARTS   AGE
etcd-minikube                           1/1       Running   0          16m
kube-addon-manager-minikube             1/1       Running   0          16m
kube-apiserver-minikube                 1/1       Running   0          16m
kube-controller-manager-minikube        1/1       Running   0          17m
kube-dns-86f4d74b45-f5ptx               3/3       Running   0          17m
kube-proxy-s4dwh                        1/1       Running   0          17m
kube-scheduler-minikube                 1/1       Running   0          16m
kubernetes-dashboard-5498ccf677-znrcf   1/1       Running   0          17m
storage-provisioner                     1/1       Running   0          17m


- version courte 
kubectl get pods -n <namespace>
kubectl get pods -n ingress-nginx
NAME                                        READY     STATUS    RESTARTS   AGE
default-http-backend-5fbc94f784-dzrsn       1/1       Running   0          73d
nginx-ingress-controller-86484748b7-vlzdb   1/1       Running   2          10d


kubectl get pods -n kube-system
NAME                                    READY     STATUS    RESTARTS   AGE
etcd-minikube                           1/1       Running   0          14m
kube-addon-manager-minikube             1/1       Running   0          14m
kube-apiserver-minikube                 1/1       Running   0          14m
kube-controller-manager-minikube        1/1       Running   0          15m
kube-dns-86f4d74b45-f5ptx               3/3       Running   0          15m
kube-proxy-s4dwh                        1/1       Running   0          15m
kube-scheduler-minikube                 1/1       Running   0          14m
kubernetes-dashboard-5498ccf677-znrcf   1/1       Running   0          15m
storage-provisioner                     1/1       Running   0          15m


- version avec extra infos : 

 kubectl get pods -o wide -n ingress-nginx
NAME                                        READY     STATUS    RESTARTS   AGE       IP              NODE
default-http-backend-5fbc94f784-hvfg7       1/1       Running   0          32m       10.185.18.161   paasnode
nginx-ingress-controller-5855467dc7-lzsq7   1/1       Running   0          30m       10.185.18.162   paasnode

= exam des logs d'un pod :

kubectl logs  -f nginx-ingress-controller-5855467dc7-lzsq7  -n ingress-nginx






= exam des conf de namespace =

on va pouvoir examiner les differentes infos de nos namespaces :

kubectl describe -n kube-system
You must specify the type of resource to describe. Valid resource types include:

    * clusters (valid only for federation apiservers)
    * componentstatuses (aka 'cs')
    * configmaps (aka 'cm')
    * daemonsets (aka 'ds')
    * deployments (aka 'deploy')
    * endpoints (aka 'ep')
    * events (aka 'ev')
    * horizontalpodautoscalers (aka 'hpa')
    * ingresses (aka 'ing')
    * jobs
    * limitranges (aka 'limits')
    * namespaces (aka 'ns')
    * networkpolicies
    * nodes (aka 'no')
    * persistentvolumeclaims (aka 'pvc')
    * persistentvolumes (aka 'pv')
    * pods (aka 'po')
    * podsecuritypolicies (aka 'psp')
    * podtemplates
    * replicasets (aka 'rs')
    * replicationcontrollers (aka 'rc')
    * resourcequotas (aka 'quota')
    * secrets
    * serviceaccounts (aka 'sa')
    * services (aka 'svc')
    * statefulsets
    * storageclasses
    * thirdpartyresources
    error: Required resource not specified.
See 'kubectl describe -h' for help and examples.

ex :  on va pouvoir examiner la conf ingress du namespace kube-system : 

ctl describe -n kube-system ingress
Name:			kubernetes-dashboard
Namespace:		kube-system
Address:		192.168.52.50
Default backend:	default-http-backend:80 (<none>)
TLS:
  SNI routes kube-dashboard.kube.io
Rules:
  Host					Path	Backends
  ----					----	--------
  kube-dashboard.kube.io
    					/ 	kubernetes-dashboard:443 (10.174.48.158:8443)
Annotations:
No events.


Name:			monitoring-grafana
Namespace:		kube-system
Address:		192.168.52.50
Default backend:	default-http-backend:80 (<none>)
TLS:
  SNI routes heapster-grafana.kube.io
Rules:
  Host						Path	Backends
  ----						----	--------
  heapster-grafana.kube.io
    						/grafana 	monitoring-grafana:80 (10.174.50.219:3000)
Annotations:

