### Ansible notes ###
# 
ansible 
> cms ( config managment system)
> orchestration
> deploiement (à voir)

> agent "less" / compatibilité descendante / très peu de pre-requi ( python 2.4 /2.5 mini ; ssh )
> courbe d'apprentissage rapide 
> templating puissant
> simple

Install du soft :
 apt-get install ansible
creation du repertoire hebergeant nos tests :
un repertoire playbooks est obligatoire : 
mkdir-p /home/boogie/lab/ansible/playbooks

Création d'un fichier hosts qui sert de fichier d'inventaire qu'ansible utilise pour les runs.
ici une vm vagrant est utilisée :

boogie@x61:~/lab/ansible/playbooks$ cat hosts 
testserver ansible_ssh_host=127.0.0.1 ansible_ssh_port=2222 ansible_ssh_user=vagrant ansible_ssh_private_key_file=.vagrant/machines/default/virtualbox/private_key

Premier test :
boogie@x61:~/lab/ansible/playbooks$ ansible testserver -i hosts -m ping
testserver | success >> {
    "changed": false, 
    "ping": "pong"
}

Simplification du paramètrage en renseignant le fichier ansible.cfg qui va nous permettre de définir automatiquement des paramètres de conf. 
Ansible lit en priorité le fichier ansible.cfg et donc dans l'ordre :
> renseignant la variable de config ANSIBLE_CONFIG
> repertoire courant
> $HOME_DIR sur user
-> /etc/ansible/ansible.cfg

Ici on renseigne avec les param de notre vm vagrant . NB : on désactive le check de clé ssh uniquement parce qu'on est en test: 
boogie@x61:~/lab/ansible/playbooks$ cat ansible.cfg 
[defaults]
hostfile = hosts
remote_user = vagrant
private_key_file = .vagrant/machines/default/virtualbox/private_key
host_key_checking = False

NB : ansible utilise par default /etc/ansible/hosts comme fichier d'inventaire.
On peut by-passer ce fichier en incluant directement notre fichier hosts situé dans le repertoire playbooks : ce qui permet ede centraliser et versionner la conf avec git ou svn .
On peut donc simplifier notre fichier hosts:
testserver ansible_ssh_host=127.0.0.1 ansible_ssh_port=2222
De même les appels peuvent se faire directement :
boogie@x61:~/lab/ansible/playbooks$ ansible testserver -m ping
testserver | success >> {
    "changed": false, 
    "ping": "pong"
}


On peut invoquer ansible pour lancer une commande systeme sur un /des serveurs :
On utilise le module command ( -m command ) et on passe l'option -a avec la commande système à passer :
boogie@x61:~/lab/ansible/playbooks$ ansible testserver -m command -a "w"
testserver | success | rc=0 >>
 18:39:02 up 26 min,  1 user,  load average: 0.00, 0.01, 0.08
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
vagrant  pts/0    10.0.2.2         18:39    0.00s  0.31s  0.03s w
Le module command est très commun et nous pouvons ne pas l'invoquer explicitement mais directement passer la commande :

boogie@x61:~/lab/ansible/playbooks$ ansible testserver -a "w"
testserver | success | rc=0 >>
 18:37:36 up 24 min,  1 user,  load average: 0.01, 0.02, 0.09
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
vagrant  pts/0    10.0.2.2         18:37    1.00s  0.32s  0.03s w








