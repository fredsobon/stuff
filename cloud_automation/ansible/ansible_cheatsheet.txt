=== ansible cheatsheet : ===


= test ping =
ansible hosttoping -i inventory file -m module 
ansible ubuntu-ansible -i hosts -m ping

avec un fichier host comme ceci par exemple :
 cat hosts
ubuntu-ansible ansible_ssh_host=127.0.0.1 ansible_ssh_port=2222 ansible_ssh_user=root ansible_ssh_private_key_file=/home/boogie/.ssh/id_rsa

= hosts settings memo = 
#Making a comment in my hosts file

rainbows.unicorns.com

[testServer]
52.36.167.137 ansible_user=ec2-user ansible_ssh_user=ec2-user  <<< setting de connection particulier pour notre server
test1.example.com:5555  <<< port ssh différent du standart

[testServer:vars]
ansible_user=ec2-user <<< setting de variables héritées pour le groupe testServer

[webServers]
apache[01:50].example.com <<< range de server avec range en chiffre
nginx[50:100].example.com <<< range de server avec range en chiffre.

[appServers]
app[a:f].example.com    <<< range de server avec range en lettre.

== fichier de conf ansible : =

ordre de priorité de lecture :

$ANSIBLE_CONFIG path de la variable $ANSIBLE_CONFIG si elle est définie
$PWD repertoire courant 
$HOME_DIR /home/user
Install par defaut (/etc/ansible)

on va pouvoir overrider a plusieurs endroit dans ansible 

inventory      = /etc/ansible/hosts  << fichier d'inventaire
library        = /usr/share/my_modules/ << path de base pour nos modules 
forks          = 5 << nbre de process lancé par connexion a un host
ask_pass       = True << connexion aev mdp 
transport      = smart << transport des data de run : de base en openssh si il faut specifier
remote_port    = 22 << port par defaut de connexion
remote_user    = root << user utiliser sur les nodes pour les runs.
private_key_file = /home/boogie/.ssh/id_rsa


= commandes : =

ansible <machine/groupe de machine> -i <inventaire pour le run> -m module < option de modules> -b < permet de devenir become root

- commandes systeme :
le module command nous permet de passer des commandes systeme à nos hosts :

ansible ubuntu -i hosts -m command -a "w"
ubuntu | SUCCESS | rc=0 >>
 17:27:20 up  8:05,  2 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
ubuntu   pts/0    10.0.2.2         09:24   16.00s  0.18s  0.18s -bash
root     pts/1    10.0.2.2         17:27    0.00s  0.07s  0.00s w

boogie@apollo:~/Documents/lab/ansible/ansible_oreilly_video/working_dir/provisioning/playbooks$ ansible ubuntu -i hosts -m command -a "service nginx status"
ubuntu | SUCCESS | rc=0 >>
● nginx.service - A high performance web server and a reverse proxy server
   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
   Active: active (running) since Sun 2017-08-20 17:23:13 UTC; 4min 35s ago
  Process: 4085 ExecStop=/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid (code=exited, status=0/SUCCESS)
  Process: 4182 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
  Process: 4179 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
 Main PID: 4184 (nginx)
    Tasks: 3
   Memory: 2.2M
      CPU: 58ms
   CGroup: /system.slice/nginx.service
           ├─4184 nginx: master process /usr/sbin/nginx -g daemon on; master_process on
           ├─4185 nginx: worker process                           
           └─4186 nginx: worker process                           

Aug 20 17:23:13 ubuntu-xenial systemd[1]: Starting A high performance web server and a reverse proxy server...
Aug 20 17:23:13 ubuntu-xenial systemd[1]: Started A high performance web server and a reverse proxy server.



= module shell = 

pour passer des  commandes multiples  on doit utiliser le module shell :

ansible lapin -i  prod_hosts -m shell -a "rpm -qa |grep magick " -b
lapin | SUCCESS | rc=0 >>
php5-magickwand-8.x86_64



= module setup = 

- setup : va nous permettre de récuperer les infos du/des  server(s) : ce sont des facts 
ansible ubuntu -i hosts -m setup |head
ubuntu | SUCCESS => {
    "ansible_facts": {
        "ansible_all_ipv4_addresses": [
            "10.0.2.15"
        ],
        "ansible_all_ipv6_addresses": [
            "fe80::2b:21ff:fe2a:210d"
        ],
        "ansible_architecture": "x86_64",
        "ansible_bios_date": "12/01/2006",


= module apt / yum  (providers) =

- apt / yum : va nous permettre de gerer via les providers de packages des install a des versions precises de packages :

ansible ubuntu -i hosts -m apt -a "name=tree state=latest" 
ubuntu | SUCCESS => {
    "cache_update_time": 1503248938, 
    "cache_updated": false, 
    "changed": true, 
    "stderr": "", 
    "stdout": "Reading package lists...\nBuilding dependency tree...\nReading state information...\nThe following NEW packages will be installed:\n  tree\n0 upgraded, 1 newly installed, 0 to remove and 5 not upgraded.\nNeed to get 40.6 kB of archives.\nAfter this operation, 138 kB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu xenial/universe amd64 tree amd64 1.7.0-3 [40.6 kB]\nFetched 40.6 kB in 0s (268 kB/s)\nSelecting previously unselected package tree.\r\n(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 56949 files and directories currently installed.)\r\nPreparing to unpack .../tree_1.7.0-3_amd64.deb ...\r\nUnpacking tree (1.7.0-3) ...\r\nProcessing triggers for man-db (2.7.5-1) ...\r\nSetting up tree (1.7.0-3) ...\r\n", 
    "stdout_lines": [
        "Reading package lists...", 
        "Building dependency tree...", 
        "Reading state information...", 
        "The following NEW packages will be installed:", 
        "  tree", 
        "0 upgraded, 1 newly installed, 0 to remove and 5 not upgraded.", 
        "Need to get 40.6 kB of archives.", 
        "After this operation, 138 kB of additional disk space will be used.", 
        "Get:1 http://archive.ubuntu.com/ubuntu xenial/universe amd64 tree amd64 1.7.0-3 [40.6 kB]", 
        "Fetched 40.6 kB in 0s (268 kB/s)", 
        "Selecting previously unselected package tree.", 
        "(Reading database ... ", 
        "(Reading database ... 5%", 
        "(Reading database ... 10%", 
        "(Reading database ... 15%", 
        "(Reading database ... 20%", 
        "(Reading database ... 25%", 
        "(Reading database ... 30%", 
        "(Reading database ... 35%", 
        "(Reading database ... 40%", 
        "(Reading database ... 45%", 
        "(Reading database ... 50%", 
        "(Reading database ... 55%", 
        "(Reading database ... 60%", 
        "(Reading database ... 65%", 
        "(Reading database ... 70%", 
        "(Reading database ... 75%", 
        "(Reading database ... 80%", 
        "(Reading database ... 85%", 
        "(Reading database ... 90%", 
        "(Reading database ... 95%", 
        "(Reading database ... 100%", 
        "(Reading database ... 56949 files and directories currently installed.)", 
        "Preparing to unpack .../tree_1.7.0-3_amd64.deb ...", 
        "Unpacking tree (1.7.0-3) ...", 
        "Processing triggers for man-db (2.7.5-1) ...", 
        "Setting up tree (1.7.0-3) ..."
    ]
}

si on relance notre commande il ne se passera rien car le paquet est dejà installé :

ansible ubuntu -i hosts -m apt -a "name=tree state=latest"
ubuntu | SUCCESS => {
    "cache_update_time": 1503248938,
    "cache_updated": false,
    "changed": false
}

ansible est indempotent


= module service = 

- gerer le demarrage d'un service : 
ansible ubuntu -i hosts -m service -a "name=nginx state=started" -b
ubuntu | SUCCESS => {
    "changed": true,
    "name": "nginx",
    "state": "started",
    "status": {
...


== help == 


- help sur la doc :

ansible-doc --help

- recherche de doc sur keyword générique :
ansible-doc -l |grep bigip
bigip_device_dns                   Manage BIG-IP device DNS settings                  
bigip_device_ntp                   Manage NTP servers on a BIG-IP                     
bigip_device_sshd                  Manage the SSHD settings of a BIG-IP               
..
- doc sur un module :
ansible-doc bigip_device_dns



== environment : ==

on va pouvoir definir pour notre playbook / role des path /variable d'environment à invoquer pour permettre l'excution par exemple d'un binaire dans une arbo particulière.

le keyword "environment"  nous permet de definir ce type d'appel dans notre playbook :

exemple : ici on place un binaire dans /tmp .. ce qui n'est pas forcement un chemin classique ... pour l'executer ..ansible devra charger ce path pour lancer le bianire concerné : 

- name: try so set env and retrieve the correct bin ...
  hosts : centos

  environment:
   PATH: "/tmp/"

  tasks:
    - name: echo env ...
      shell: echo "$PATH"
      register: echo

    - debug: msg="our var is {{ echo.stdout }}"


    - name: get the content script echoes 
      shell: "test.sh"
      register: snake

    - debug: msg="our message platform is  {{ snake }}"

ce qui nous donne :

le script dans le path qui sera executé : 
[root@localhost ~]# cat /tmp/test.sh 
#! /bin/bash
/bin/uptime
/bin/date
apres voir integré /tmp dans le path :

 ~/Documents/lab/ansible/provisionning  $  ansible-playbook -i hosts path.yml 

PLAY [try so set env and retrieve the correct bin ...] *************************

TASK [setup] *******************************************************************
ok: [centos]

TASK [echo env ...] ************************************************************
changed: [centos]

TASK [debug] *******************************************************************
ok: [centos] => {
    "msg": "our var is /tmp"
}

TASK [get the content script echoes] *******************************************
changed: [centos]

TASK [debug] *******************************************************************
ok: [centos] => {
    "msg": "our message platform is  {u'changed': True, u'end': u'2017-09-07 08:28:06.489879', u'stdout': u' 08:28:06 up 1 min,  2 users,  load average: 0,05, 0,03, 0,01\\njeu. sept.  7 08:28:06 UTC 2017', u'cmd': u'test.sh', u'rc': 0, u'start': u'2017-09-07 08:28:06.482272', u'stderr': u'', u'delta': u'0:00:00.007607', 'stdout_lines': [u' 08:28:06 up 1 min,  2 users,  load average: 0,05, 0,03, 0,01', u'jeu. sept.  7 08:28:06 UTC 2017'], u'warnings': []}"
}

PLAY RECAP *********************************************************************
centos                     : ok=5    changed=2    unreachable=0    failed=0  



==   gestion d'action sur serveur en fonction de groupe ==

on va pouvoir en fonction des nodes presents dans notre inventaire effectuer des actions ciblées :


ex : afficher un message si le serveur est dans le groupe ubuntu 

root@ansible:~# cat inventory 
[target:children]
centos
ubuntu

[ubuntu] 
target1 ansible_host=172.17.0.2 ansible_ssh_pass=lapin

[centos]
target2 ansible_host=172.17.0.3 ansible_ssh_pass=lapin
target3 ansible_host=172.17.0.4 ansible_ssh_pass=lapin


on crée notre playbook 

root@ansible:~# cat draft.yml 
- name: behaviour on some special nodes
  hosts: target

  tasks:
    - name: give me the date
      shell: date
      register: echo

    - debug: msg="our var is {{ echo.stdout }}"

    - debug: msg="OKEY"
      when: "'ubuntu' not in group_names"   <<<<< on crée ici notre condition qui va donc s'executer pour les nodes pas dans le groupe ubuntu ( donc les serveurs du groupe centos : target1 target2 )


- name: behaviour on some special nodes
  hosts: target

  tasks:
    - name: give me the date
      shell: date
      register: echo

    - debug: msg="our var is {{ echo.stdout }}"
      when: "'ubuntu' not in group_names"


root@ansible:~# ansible-playbook draft.yml  -i inventory

PLAY [behaviour on some special nodes] *****************************************

TASK [setup] *******************************************************************
ok: [target1]
ok: [target3]
ok: [target2]

TASK [give me the date] ********************************************************
changed: [target2]
changed: [target1]
changed: [target3]

TASK [debug] *******************************************************************
skipping: [target1]
ok: [target2] => {
    "msg": "our var is Fri Dec 15 12:20:26 UTC 2017"
}
ok: [target3] => {
    "msg": "our var is Fri Dec 15 12:20:26 UTC 2017"
}

PLAY RECAP *********************************************************************
target1                    : ok=2    changed=1    unreachable=0    failed=0   
target2                    : ok=3    changed=1    unreachable=0    failed=0   
target3                    : ok=3    changed=1    unreachable=0    failed=0   


====  conditionals / roles exemples : ===

exemple de gestion de playbooks et actions d'un role sur conditions :

ex: ici on veut executer un playbook chargeant un role en fonction de la presence ou non d'un node dans un groupe de l'inventaire :

root@ansible:~# cat invent
[target:children]
centos
ubuntu

[ubuntu] 
target1 ansible_host=172.17.0.2 ansible_ssh_pass=lapin

[centos]
target2 ansible_host=172.17.0.3 ansible_ssh_pass=lapin
target3 ansible_host=172.17.0.4 ansible_ssh_pass=lapin

root@ansible:~# cat groups.yml 
- name: behaviour on some special nodes
  hosts: target

  roles:
    - { role: uname, when: "'centos' not in group_names" }

root@ansible:~# cat roles/uname/tasks/main.yaml 
---
- name: uname - test for grp
  command: uname -a
  register: output
- debug: msg="get the kernel ->> {{output.stdout }}" 

en lancant notre run : 

root@ansible:~# ansible-playbook -i invent groups.yml 

PLAY [behaviour on some special nodes] *****************************************

TASK [setup] *******************************************************************
ok: [target3]
ok: [target1]
ok: [target2]

TASK [uname : uname - test for grp] ********************************************
skipping: [target2]
skipping: [target3]
changed: [target1]

TASK [uname : debug] ***********************************************************
skipping: [target2]
skipping: [target3]
ok: [target1] => {
    "msg": "get the kernel ->> Linux a191980f3402 4.4.0-104-generic #127-Ubuntu SMP Mon Dec 11 12:16:42 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux"
}

PLAY RECAP *********************************************************************
target1                    : ok=3    changed=1    unreachable=0    failed=0   
target2                    : ok=1    changed=0    unreachable=0    failed=0   
target3  


exemple 2 : sortie de serveur de lb en fonction de critères dans de node fixé dans l'inventaire : 

[f.sobon@xinfsecorch01bv ~/patch-management] $ ansible-playbook play.yml -i inventory

cat play.yml 
---
- hosts: webws
  roles:
    - { role: out_of_lb, when: "'webws-pair' not in group_names" }
# set filetype=ansible
[f.sobon@xinfsecorch01bv ~/patch-management] $ cat inventory 
[webws:children]
webws-pair
webws-impair

[webws-pair]
webws02

[webws-impair]
webws03


-- notes sur gestion actions via conditions : 
  - { role: 'xcode', when: ansible_os_family == 'Darwin' }

== variables : ===

settings de variables liée a des groupe de serveur :

on va poouvir setter des var liées a des roles de serveurs :

ex: 

[] $ cat app_java_inventory
[app-java:children]
ws
back
bat

[ws]
ws01b
ws02u
ws03b
ws04u

[back]
backoffice01

[bat]
bat01


on def ici des variables dédiées aux groupes 
group_vars : on va definir dans un repertoire group_vars des variables liées aux différents serveurs inclus dans les groupes de l'inventaire

Des variables communes à tous nos serveurs seront à mettre dans un fichier all du repertoire group_vars , on pourra overrider ces vars dans le group nécéssaire si besoin 

cat group_vars/all
ntp="ntp.lapin.com"

cat group_vars/back 
TYPE=BACK
ntp="ntp2.lapin.net"
cat group_vars/bat 
TYPE=BATCH
cat group_vars/ws 
TYPE=WEB


- > recupération de variable 

ex on va recupérer une variable systeme qu'on appelle via shell puis on l'enregistre dans une variable ansible qu'on utilise ensuite : 

[] $ cat draft.yml 
---
- hosts: all
  vars:
    - role: delivery_type  
  tasks:
    - name: retrieve role and define it
      command: /bin/bash -l -c "echo $DELIVERY_TYPE"
      register:  delivery_type

    - debug: msg="this node has the "{{ delivery_type.stdout }}" role"


->  setting de variable à la volée :

Ansible : comment définir des variables à la volée dans son playbook

Imaginons que j'ai besoin de définir des variables au fur et à mesure que le processus avance
Cas concret déployer des WAR issues d'une "nightly build" depuis des repo maven :
je demarre par une tâche allant à la pêche aux SNAPSHOT

- name: Find last snapshot
  command: ssh {{ server_repo }} ls -d {{ maven_repository }}/standard/{{ branch }}.*-SNAPSHOT | sort
  register: snapshot
ici register va me permettre d'utiliser "snapshot" par la suite. Disons command m'a permit de trouver FOOBAR-1.2.3-SNAPSHOT

- name: let's define "war_path"
  command: echo {{ path }}{{ snapshot.stdout | basename }}.war
  when: snapshot
  register: war_path
ici 2 choses et une astuce :

1) j'utilise de nouveau register pour pouvoir télécharger le war plus tard 2) j'utilise when ce qui permet de ne faire la command que quand la tasks snapshot est registered 3) l'astuce : utiliser command comme si on avait fait un simple export FOO=BAR, et sur la ligne de command on utilise snapshot.stdout parce qu'on a register snapshot précédement qui n'est qu'une chaine et pas une liste. Ce qui, avec les filtres "basename" et la concaténation avec ".war ", me donne grosso modo comme résultat un tout QQ :

  echo /un/jolie/path/FOOBAR-1.2.3-SNAPSHOT.war
tâche suivante :

- name: war_path download from server_repo
  command: scp -pr {{ server_repo }}:{{ war_path.stdout }} /temp
  when: war_path
ici un simple scp, on remarquera war_path qui est la tasks register juste au dessus et le when qui utilise war_path

- name: war_path check is here
  stat: path=/temp/{{ war_path.stdout | basename}}
  register: war_path_exists
ici vérification que le transfert a eu lieu

- name: war_path fail to download
  fail: file /temp/{{ war_path.stdout | basename}} does not exists
  when: war_path_exists.stat.exists == False
ici on peut vérifier que ça a foiré, on se contente d'un message d'erreur mais on aurait pu faire péter un mail au service IT :P

- name: war_path Extract
  command: chdir={{ home }}/{{ target }}-tomcat/webapps/{{ foobar }} {{ java_home }}/bin/jar xf /temp/{{ war_path.stdout | basename }}
  when: war_path


=== run / tests / debug ===

on peut limiter nos run en fonction de certain param passés en arguments popur faciliter le debug et le temps de traitement :

- limit :
on peut cibler le run sur un ou des server en passant l'argument "--limit"
ex : tester le playbook deploy-app uniquement sur le serveur backoffice01 :
ansible-playbook deploy-app.yml --limit backoffice01
les wildcard ou regexp peuvent être utilisées : 
ansible-playbook deploy-app.yml --limit back*


- tags :
on va pouvoir dans le cas de playbook long comprenant des taches , roles cibler nos tests sur des blocs flaggués par un tag :

ex :
on va setter ici dans l'appel d'un role de check de service un tag [services_check] qui pourra donc être appelé unitairement : 
- { role: check_services , tags: [services_check] }

ansible-playbook deploy-app.yml --tags "services_check"

comme pour beaucoup d'élements dans ansible , on peut définir les tags dans différents endroits ( tasks, roles ..) 
ex : 
- hosts: batch
  tasks:
    - name: "check batch running status"
      # use stat module in order to watch a lock file presence : meaning that batch is running 
      stat:
        path: /usr/libexec/batchs/data/batch.lock
      register: lock
      tags: [tests]
ansible-playbook deploy-app.yml --tags "tests"



==  ansible password vault : ==

on va pouvoir générer un password qui sera crypté et qu'on pourra donc ajouter a nos variables ansible.
En lancant ensuite l'execution du playbook on aura un prompt qui nous demandera le password pour dechiffrer 

Encrypted vars (Passwords, Tokens):
you can make this kind of command to generate encrypted vars to add to your playbook parameters yaml files. Here a file 'password' contains the vault password. (This password is in the SRS Keepass).

-> generation du password 
echo -n 'XXXXXXX' | ansible-vault encrypt_string --vault-password-file password --stdin-name 'XXXXX_password'
When you call your ansible playbook, the parameter --ask-vault-password should be used, for example...


->  lancement du playbook 
ansible-playbook deploy-xpayhdws.yml --ask-vault-pass PASSWORD_TO_PROVIDE
