# Urls :
http://opensolitude.com/2015/05/26/building-docker-images-with-ansible.html
http://blog.inovia-conseil.fr/?p=180

# Notes :
-install set up :
 sudo apt-get install docker.io
Ajout du user dans groupe docker 

boogie@x61:~$ sudo addgroup boogie docker
Ajout de l'utilisateur « boogie » au groupe « docker »...
Ajout de l'utilisateur boogie au groupe docker
Fait.
boogie@x61:~$ docker run -i -t debian /bin/bash

# tuto suivi à partir de maintenant via le lm_174 sur docker
Tout est deja configuré pour ne pas avoir a saisir sudo devant chaque commande docker ( ajout du user dans groupe docker) : on travaille sur docker DEPUIS une vm VAGRANT :

Nb cette méthode est valable quelque soit la vm que nous voul
ons monter. Ex : on cree un repertoire b2b dans lequel on va
lancer notre initialisation vagrant :

boogie@x61:~/lab/virt/vagrant/b2d$ vagrant init dduportal/boot2docker
Ensuite un vagrant up : demarre la vm
pour s'y connecter un vagrant ssh depuis notre repertoire cré
e et c'est parti.

# Pour connaitre la version docker : docker version 

docker@boot2docker:~$ docker version
Client:
 Version:      1.8.2
 API version:  1.20
 Go version:   go1.4.2
 Git commit:   0a8c2e3
 Built:        Thu Sep 10 19:10:10 UTC 2015
 OS/Arch:      linux/amd64

Server:
 Version:      1.8.2
 API version:  1.20
 Go version:   go1.4.2
 Git commit:   0a8c2e3
 Built:        Thu Sep 10 19:10:10 UTC 2015
 OS/Arch:      linux/amd64


# on peut essayer de recupérer ou chercher des infos sur un container en tapant la commande : 
docker search pattern

docker@boot2docker:~$ docker search ubuntu |head
NAME                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu                         Ubuntu is a Debian-based Linux operating s...   2313      [OK]       
ubuntu-upstart                 Upstart is an event-based replacement for ...   33        [OK]       
torusware/speedus-ubuntu       Always updated official Ubuntu docker imag...   25                   [OK]
tleyden5iwx/ubuntu-cuda        Ubuntu 14.04 with CUDA drivers pre-installed    18                   [OK]
ubuntu-debootstrap             debootstrap --variant=minbase --components...   14        [OK]       
...
.....
# Pour recupérer une image désirée :

exemple : 
docker@boot2docker:~$ docker search redhat
docker@boot2docker:~$ docker pull thezxm/redhat7
Using default tag: latest
latest: Pulling from thezxm/redhat7
97d482120246: Pull complete 
293f997eef5e: Pull complete 
0d945be0e060: Pull complete 
1ff9dbe8ee62: Pull complete 
cfb3d79e71ca: Pull complete 
7c083ba26135: Pull complete 
4dd28858aac0: Pull complete 
6b497b5820a5: Pull complete 
1cee91111cfd: Already exists 
Digest: sha256:682e021ab96718a0d1bae452ac98207eb8e5ef9649ee569f72fe24e8405a0c36
Status: Downloaded newer image for thezxm/redhat7:latest

docker@boot2docker:~$ docker pull ubuntu:trusty
trusty: Pulling from library/ubuntu
d3a1f33e8a5a: Downloading [==============================>                    ] 40.01 MB/65.79 MB
c22013c84729: Download complete 
d74508fb6632: Download complete 
91e54dfb1179: Download complete 
library/ubuntu:trusty: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.
Digest: sha256:2153d9d8a46ba76931b910b3dcc716bc5451c9f8e5c736bd72db49af523b5e82
Status: Downloaded newer image for ubuntu:trusty
# docker images nous permet de voir nos containers : 
docker@boot2docker:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              trusty              91e54dfb1179        5 weeks ago         188.4 MB
# La commande docker image --all nous permet de voir les différentes images intermédiaires a notre vm si il y en a ( par defaut ces couches ne sont pas affichées. )


docker@boot2docker:~$ docker images --all
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              trusty              91e54dfb1179        5 weeks ago         188.4 MB
<none>              <none>              d74508fb6632        5 weeks ago         188.4 MB
<none>              <none>              c22013c84729        5 weeks ago         188.4 MB
<none>              <none>              d3a1f33e8a5a        5 weeks ago         188.2 MB

# docker history nous permet de tracer les modifications faites sur notre images : 

docker@boot2docker:~$ docker history ubuntu:trusty
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
91e54dfb1179        5 weeks ago         /bin/sh -c #(nop) CMD ["/bin/bash"]             0 B                 
d74508fb6632        5 weeks ago         /bin/sh -c sed -i 's/^#\s*\(deb.*universe\)$/   1.895 kB            
c22013c84729        5 weeks ago         /bin/sh -c echo '#!/bin/sh' > /usr/sbin/polic   194.5 kB            
d3a1f33e8a5a        5 weeks ago         /bin/sh -c #(nop) ADD file:5a3f9e9ab88e725d60   188.2 MB

# Pour avoir differentes infos : docker info ( nous permet entre autre de voir ou sont stockees nos images : )


docker@boot2docker:~$ docker info
Containers: 0
Images: 0
Storage Driver: aufs
 Root Dir: /mnt/sda2/var/lib/docker/aufs
 Backing Filesystem: extfs
 Dirs: 0
 Dirperm1 Supported: true
Execution Driver: native-0.2
Logging Driver: json-file
Kernel Version: 4.0.9-boot2docker
Operating System: Boot2Docker 1.8.2 (TCL 6.4); master : aba6192 - Thu Sep 10 20:58:17 UTC 2015
CPUs: 1
Total Memory: 1.464 GiB
Name: boot2docker
ID: YSO5:B543:JZU2:ZLYJ:EJWS:42RU:L5LS:GQIR:7Z7B:IWNA:2TFQ:M6GK
Debug mode (server): true
File Descriptors: 13
Goroutines: 16
System Time: 2015-09-27T18:18:54.293400244Z
EventsListeners: 0
Init SHA1: 
Init Path: /usr/local/bin/docker
Docker Root Dir: /mnt/sda2/var/lib/docker

On voit dans le dossier aufs que les images sont stockées sous forme de fichiers à la maniere de git :

docker@boot2docker:~$ ls /mnt/sda2/var/lib/docker/aufs/*
/mnt/sda2/var/lib/docker/aufs/diff:
91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c/
c22013c8472965aa5b62559f2b540cd440716ef149756e7b958a1b2aba421e87/
d3a1f33e8a5a513092f01bb7eb1c2abf4d711e5105390a3fe1ae2248cfde1391/
d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82/

/mnt/sda2/var/lib/docker/aufs/layers:
91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c
c22013c8472965aa5b62559f2b540cd440716ef149756e7b958a1b2aba421e87
d3a1f33e8a5a513092f01bb7eb1c2abf4d711e5105390a3fe1ae2248cfde1391
d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82

/mnt/sda2/var/lib/docker/aufs/mnt:
91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c/
c22013c8472965aa5b62559f2b540cd440716ef149756e7b958a1b2aba421e87/
d3a1f33e8a5a513092f01bb7eb1c2abf4d711e5105390a3fe1ae2248cfde1391/
d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82/

# la commande docker inspect pattern nous permet de disposer d'info precises egalement sur notre conteneur : 

docker@boot2docker:~$ docker inspect ubuntu:trusty
[
{
    "Id": "91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c",
    "Parent": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
    "Comment": "",
    "Created": "2015-08-20T20:21:15.767240511Z",
    "Container": "74bb7db8d212f77ab6d467b710451e54d2c60533f641de8c91e7ef343b88a146",
    "ContainerConfig": {
        "Hostname": "e611e15f9c9d",
        "Domainname": "",
        "User": "",
        "AttachStdin": false,
        "AttachStdout": false,
        "AttachStderr": false,
        "ExposedPorts": null,
        "PublishService": "",
        "Tty": false,
        "OpenStdin": false,
        "StdinOnce": false,
        "Env": null,
        "Cmd": [
            "/bin/sh",
            "-c",
            "#(nop) CMD [\"/bin/bash\"]"
        ],
        "Image": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
        "Volumes": null,
        "VolumeDriver": "",
        "WorkingDir": "",
        "Entrypoint": null,
        "NetworkDisabled": false,
        "MacAddress": "",
        "OnBuild": null,
        "Labels": {}
    },
    "DockerVersion": "1.7.1",
    "Author": "",
    "Config": {
        "Hostname": "e611e15f9c9d",
        "Domainname": "",
        "User": "",
        "AttachStdin": false,
        "AttachStdout": false,
        "AttachStderr": false,
        "ExposedPorts": null,
        "PublishService": "",
        "Tty": false,
        "OpenStdin": false,
        "StdinOnce": false,
        "Env": null,
        "Cmd": [
            "/bin/bash"
        ],
        "Image": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
        "Volumes": null,
        "VolumeDriver": "",
        "WorkingDir": "",
        "Entrypoint": null,
        "NetworkDisabled": false,
        "MacAddress": "",
        "OnBuild": null,
        "Labels": {}
    },
    "Architecture": "amd64",
    "Os": "linux",
    "Size": 0,
    "VirtualSize": 188359297,
    "GraphDriver": {
        "Name": "aufs",
        "Data": null
    }
}
]
do


### First steps :

# On lance un conteneur avec docker run : 
Ici on lance le conteneur trusty et e la commande cat /etc/debian_version dans la foulée.

On peut voir les commandes lancées avec un :
docker@boot2docker:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                          PORTS               NAMES
78e598f88100        ubuntu:trusty       "cat /etc/debian_vers"   About a minute ago   Exited (0) About a minute ago                       drunk_chandrasekhar

Le flow des comandes en continu est possible depuis une autre console avec un : docker events :
docker@boot2docker:~$ docker events
2015-09-27T18:49:47.000000000Z 78e598f88100f5a0bf1e6b9b1a9b08cc6452caf1166cde960904e1c0f282cd87: (from ubuntu:trusty) create
2015-09-27T18:49:47.000000000Z 78e598f88100f5a0bf1e6b9b1a9b08cc6452caf1166cde960904e1c0f282cd87: (from ubuntu:trusty) attach
2015-09-27T18:49:47.000000000Z 78e598f88100f5a0bf1e6b9b1a9b08cc6452caf1166cde960904e1c0f282cd87: (from ubuntu:trusty) start
2015-09-27T18:49:47.000000000Z 78e598f88100f5a0bf1e6b9b1a9b08cc6452caf1166cde960904e1c0f282cd87: (from ubuntu:trusty) die


On voit que le conteneur s'est arreté sans erreur ( code retour 0 ) et que chaque container a un id :

Les conteneurs ont un id et un namespace distint en relancant la même commande on a de nouveau un autre conteneur de lancer :

docker@boot2docker:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
4046a2fd12a9        ubuntu:trusty       "cat /etc/debian_vers"   5 seconds ago       Exited (0) 4 seconds ago                        clever_bhaskara
78e598f88100        ubuntu:trusty       "cat /etc/debian_vers"   6 minutes ago       Exited (0) 6 minutes ago                        drunk_chandrasekhar

Par simplicite on peut nommer un conteneur avec l'option "--name"
docker@boot2docker:~$ docker run --name cat_commande ubuntu:trusty  cat /etc/debian_version
jessie/sid
docker@boot2docker:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
d18fe8b8201e        ubuntu:trusty       "cat /etc/debian_vers"   6 seconds ago       Exited (0) 6 seconds ago                        cat_commande

# sortie standarts - logs

Par defaut la sortie standart récupère les infos des conteneurs . On peut recupérer les logs d'un conteneur :

docker@boot2docker:~$ docker logs cat_commande
jessie/sid

# on recupere les id des conteneurs avec un ps -q ( quiet ) a

docker@boot2docker:~$ docker ps -qa
d18fe8b8201e
4b27f153ba1f
4046a2fd12a9
78e598f88100
3b02cd233526
6d9c51484127


- pour recup les "n" dernieres commandes de conteneurs :
ici 2 dernieres : 
docker@boot2docker:~$ docker ps -an 2
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
d18fe8b8201e        ubuntu:trusty       "cat /etc/debian_vers"   4 minutes ago       Exited (0) 4 minutes ago                       cat_commande
4b27f153ba1f        ubuntu:trusty       "--name cat_command c"   5 minutes ago       Created                                        jolly_mayer

- dernière commande lancée : -l 

docker@boot2docker:~$ docker ps -l
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
d18fe8b8201e        ubuntu:trusty       "cat /etc/debian_vers"   7 minutes ago       Exited (0) 7 minutes ago                       cat_commande

- id du dernier conteneur lancé : lq ( pratique) 
docker@boot2docker:~$ docker ps -lq
d18fe8b8201e

# On peut brancher la sortie standart sur le conteneur pour pouvoir lui passer des commandes avec l'option '-i' ( interractif) . pour executer un shell depuis le conteneur on ajoutera l'option "-t" pour brancher un pseudo terminal afin d'avoir une sortie "propre" :

docker@boot2docker:~$ docker run --name shell_interractif -it ubuntu:trusty /bin/bash
root@5d5d49620216:/# 

Une autre console nous montre qu'on est toujours dans le shell interractif de notre conteneur :

docker@boot2docker:~$ docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
5d5d49620216        ubuntu:trusty       "/bin/bash"         57 seconds ago      Up 55 seconds                           shell_interractif
 
On peut voir les process en cours sur un conteneur avec un docker top nom_conteneur 

docker@boot2docker:~$ docker top shell_interractif
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                1956                883                 0                   19:10               pts/2               00:00:00            /bin/bash

On peut utiliser la commande inspect egelement avec les conteneurs et filtrer et formater la sortie (commande -f) grace a des templates en go pour afficher sont processus :

docker@boot2docker:~$ docker inspect --format {{.State.Pid}} shell_interractif 
1956

Il y a un un seul processus : selon le principe de virtualisation : isolation des processus.

On retrouve ce processus sur notre host :

docker@boot2docker:~$ ps fauxwww |grep 1956 |grep -v grep
root      1956  0.0  0.2  18168  3236 pts/2    Ss+  19:10   0:00  \_ /bin/bash
 
Sur notre conteneur on retrouve bien bash lancer avec le pid 1 

root@5d5d49620216:/# ps
  PID TTY          TIME CMD
    1 ?        00:00:00 bash
   14 ?        00:00:00 ps

root@5d5d49620216:/# cat /proc/1/comm 
bash


C'est le principe des pid namespace et netspace que l'on retrouve .
En effet les conteneurs ont tous une interface virtuelle dans son namespace :

root@5d5d49620216:/# ip addr show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
18: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.7/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:7/64 scope link 
       valid_lft forever preferred_lft forever
root@5d5d49620216:/# ip -4 -o addr show
1: lo    inet 127.0.0.1/8 scope host lo\       valid_lft forever preferred_lft forever
18: eth0    inet 172.17.0.7/16 scope global eth0\       valid_lft forever preferred_lft forever
root@5d5d49620216:/# ip -4 -o addr show eth0
18: eth0    inet 172.17.0.7/16 scope global eth0\       valid_lft forever preferred_lft forever


Et c'est une interface dediée "docker0" qui sur notre host va forwarder les packet au conteneur en masquerade :

docker@boot2docker:~$ ip -4 -o addr show
1: lo    inet 127.0.0.1/8 scope host lo\       valid_lft forever preferred_lft forever
3: eth0    inet 10.0.2.15/24 brd 10.0.2.255 scope global eth0\       valid_lft forever preferred_lft forever
4: eth1    inet 192.168.56.101/24 brd 192.168.56.255 scope global eth1\       valid_lft forever preferred_lft forever
5: docker0    inet 172.17.42.1/16 scope global docker0\       valid_lft forever preferred_lft forever


# On peut piloter un conteneur :
-pause / unpause :
On peut "freeze" un conteneur : ( le conteneur ne repond plus )
docker@boot2docker:~$ docker pause shell_interractif
shell_interractif
Le defreezer pour rependre la main : 
docker@boot2docker:~$ docker unpause shell_interractif
shell_interractif

-stop :
docker@boot2docker:~$ docker stop shell_interractif
shell_interractif

> notre conteneur nous deconnecte et on a un exit :
root@5d5d49620216:/# exit
docker@boot2docker:~$ 

On a bien notre conteneur arrêté :
docker@boot2docker:~$ docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES
5d5d49620216        ubuntu:trusty       "/bin/bash"         25 minutes ago      Exited (0) About a minute ago                       shell_interractif


-start 
on redemmare notre conteneur 

docker@boot2docker:~$ docker start shell_interractif
shell_interractif
il est up :

docker@boot2docker:~$ docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
5d5d49620216        ubuntu:trusty       "/bin/bash"         27 minutes ago      Up 18 seconds                           shell_interractif

On doit se rattacher au conteneur avec un attach (multiplexeur possible à la screen ) : puisque notre commande lancée est un shell .

docker@boot2docker:~$ docker attach shell_interractif
root@5d5d49620216:/# 
root@5d5d49620216:/# ps 
  PID TTY          TIME CMD
    1 ?        00:00:00 bash
   14 ?        00:00:00 ps

Un exit sur une console nous fait sortir de  toutes les consoles .


# Travail sur le container : on va installer un service sur le container (ex nginx)

root@263e8e5f6f5c:/# apt-get install -y nginx

depuis le serveur host on voit bienqu'il se passe des choses :
docker@boot2docker:~$ docker top trusty
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                1141                857                 0                   18:20               pts/1               00:00:00            /bin/bash
root                1311                1141                10                  18:27               pts/1               00:00:05            apt-get install -y nginx
root                1332                1311                6                   18:28               pts/1               00:00:00            /bin/sh -c /usr/sbin/dpkg-preconfigure --apt || true
root                1333                1332                7                   18:28               pts/1               00:00:00            /usr/bin/perl -w /usr/sbin/dpkg-preconfigure --apt
root                1339                1333                0                   18:28               pts/1               00:00:00            /usr/bin/perl -w /usr/sbin/dpkg-preconfigure --apt
root                1340                1339                42                  18:28               pts/1               00:00:03            apt-extracttemplates /var/cache/apt/archives/libgeoip1_1.6.0-1_amd64.deb /var/cache/apt/archives/libxau6_1%3a1.0.8-1_amd64.deb /var/cache/apt/archives/libxdmcp6_1%3a1.1.1-1_amd64.deb /var/cache/apt/archives/libxcb1_1.10-2ubuntu1_amd64.deb /var/cache/apt/archives/libx11-data_2%3a1.6.2-1ubuntu2_all.deb /var/cache/apt/archives/libx11-6_2%3a1.6.2-1ubuntu2_amd64.deb /var/cache/apt/archives/libxml2_2.9.1+dfsg1-3ubuntu4.4_amd64.deb /var/cache/apt/archives/sgml-base_1.26+nmu4ubuntu1_all.deb /var/cache/apt/archives/fonts-dejavu-core_2.34-1ubuntu1_all.deb /var/cache/apt/archives/fontconfig-config_2.11.0-0ubuntu4.1_all.deb /var/cache/apt/archives/libfreetype6_2.5.2-1ubuntu2.5_amd64.deb /var/cache/apt/archives/libfontconfig1_2.11.0-0ubuntu4.1_amd64.deb /var/cache/apt/archives/libjpeg-turbo8_1.3.0-0ubuntu2_amd64.deb /var/cache/apt/archives/libjpeg8_8c-2ubuntu8_amd64.deb /var/cache/apt/archives/libjbig0_2.0-2ubuntu4.1_amd64.deb /var/cache/apt/archives/libtiff5_4.0.3-7ubuntu0.3_amd64.deb /var/cache/apt/archives/libvpx1_1.3.0-2_amd64.deb /var/cache/apt/archives/libxpm4_1%3a3.5.10-1_amd64.deb /var/cache/apt/archives/libgd3_2.1.0-3_amd64.deb /var/cache/apt/archives/libxslt1.1_1.1.28-2build1_amd64.deb /var/cache/apt/archives/geoip-database_20140313-1_all.deb /var/cache/apt/archives/xml-core_0.13+nmu2_all.deb /var/cache/apt/archives/nginx-common_1.4.6-1ubuntu3.3_all.deb /var/cache/apt/archives/nginx-core_1.4.6-1ubuntu3.3_amd64.deb /var/cache/apt/archives/nginx_1.4.6-1ubuntu3.3_all.deb
root                1354                1340                0                   18:28               pts/1               00:00:00            apt-extracttemplates /var/cache/apt/archives/libgeoip1_1.6.0-1_amd64.deb /var/cache/apt/archives/libxau6_1%3a1.0.8-1_amd64.deb /var/cache/apt/archives/libxdmcp6_1%3a1.1.1-1_amd64.deb /var/cache/apt/archives/libxcb1_1.10-2ubuntu1_amd64.deb /var/cache/apt/archives/libx11-data_2%3a1.6.2-1ubuntu2_all.deb /var/cache/apt/archives/libx11-6_2%3a1.6.2-1ubuntu2_amd64.deb /var/cache/apt/archives/libxml2_2.9.1+dfsg1-3ubuntu4.4_amd64.deb /var/cache/apt/archives/sgml-base_1.26+nmu4ubuntu1_all.deb /var/cache/apt/archives/fonts-dejavu-core_2.34-1ubuntu1_all.deb /var/cache/apt/archives/fontconfig-config_2.11.0-0ubuntu4.1_all.deb /var/cache/apt/archives/libfreetype6_2.5.2-1ubuntu2.5_amd64.deb /var/cache/apt/archives/libfontconfig1_2.11.0-0ubuntu4.1_amd64.deb /var/cache/apt/archives/libjpeg-turbo8_1.3.0-0ubuntu2_amd64.deb /var/cache/apt/archives/libjpeg8_8c-2ubuntu8_amd64.deb /var/cache/apt/archives/libjbig0_2.0-2ubuntu4.1_amd64.deb /var/cache/apt/archives/libtiff5_4.0.3-7ubuntu0.3_amd64.deb /var/cache/apt/archives/libvpx1_1.3.0-2_amd64.deb /var/cache/apt/archives/libxpm4_1%3a3.5.10-1_amd64.deb /var/cache/apt/archives/libgd3_2.1.0-3_amd64.deb /var/cache/apt/archives/libxslt1.1_1.1.28-2build1_amd64.deb /var/cache/apt/archives/geoip-database_20140313-1_all.deb /var/cache/apt/archives/xml-core_0.13+nmu2_all.deb /var/cache/apt/archives/nginx-common_1.4.6-1ubuntu3.3_all.deb /var/cache/apt/archives/nginx-core_1.4.6-1ubuntu3.3_amd64.deb /var/cache/apt/archives/nginx_1.4.6-1ubuntu3.3_all.deb


On demarre notre serveur web :

root@263e8e5f6f5c:/# service nginx start

On recupere bien un index de notre docker en apellant sur notre host :
docker@boot2docker:~$ wget http://172.17.0.1 -q -O index.dock
er.html |head -4 
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>

Nous allons pour rendre les choses plus faciles rediriger le port du serveur web au lancement de notre docker; puisque nous ne l'avons pas fait comme on le voit la colonne port est vide dans le docker ps :

docker@boot2docker:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
263e8e5f6f5c        ubuntu:trusty       "/bin/bash"         18 minutes ago      Up 18 minutes                           trusty

Mais avant celà on va sauvegarder nos modifs :
1/ on stoppe notre docker :
docker@boot2docker:~$ docker stop trusty
trusty
2/ on commit notre conf : ici on utilise le nom trusty de notre container qu'on commit en images nginx_trusty :
docker@boot2docker:~$ docker commit trusty nginx_docker
8f5174c767ec1222b1dde86e2f9abeb223590cbffaea1f7cf8647a206bfbc86e
On vient de transformer notre container en image :

docker@boot2docker:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
nginx_docker        latest              8f5174c767ec        27 seconds ago      227.8 MB

par defaut le tag est en latest on peut donner un numero de tag a notre image :
docker@boot2docker:~$ docker tag nginx_docker nginx:v1
docker@boot2docker:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
nginx_docker        latest              8f5174c767ec        4 minutes ago       227.8 MB
nginx_v1            latest              8f5174c767ec        4 minutes ago       227.8 MB
nginx               v1                  8f5174c767ec        4 minutes ago       227.8 MB
ubuntu              latest              91e54dfb1179        6 weeks ago         188.4 MB
ubuntu              trusty              91e54dfb1179        6 weeks ago         188.4 MB

Celà ne rajoute pas d'images supplementaires mais permet d'identifie rl'image sous un autre nom. On peut voir les couches avec docker history :

docker@boot2docker:~$ docker history nginx_v1
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
8f5174c767ec        7 minutes ago       /bin/bash                                       39.42 MB            
91e54dfb1179        6 weeks ago         /bin/sh -c #(nop) CMD ["/bin/bash"]             0 B                 
d74508fb6632        6 weeks ago         /bin/sh -c sed -i 's/^#\s*\(deb.*universe\)$/   1.895 kB            
c22013c84729        6 weeks ago         /bin/sh -c echo '#!/bin/sh' > /usr/sbin/polic   194.5 kB            
d3a1f33e8a5a        6 weeks ago         /bin/sh -c #(nop) ADD file:5a3f9e9ab88e725d60   188.2 MB            


# Redirection de port : on va relancer un container en specifiant que l'host du docker va rediriger le port 80 vers le container nginx :
On donne le nom de notre docker et le chemin absolu du binaire nginx : 
docker@boot2docker:~$ docker run -p 80 nginx_v1 /usr/sbin/ngi
nx
on redemmare notre docker et nginx :

docker@boot2docker:~$ docker run -it nginx_docker  /bin/bash
root@d8721152f206:/# service nginx start
root@d8721152f206:/# ps fauxw
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  1.8  0.2  18172  3340 ?        Ss   18:57   0:00 /bin/bash
root        26  0.6  0.1  85884  2876 ?        Ss   18:58   0:00 nginx: master process /usr/sbin/nginx
www-data    27  0.0  0.2  86224  3596 ?        S    18:58   0:00  \_ nginx: worker process
www-data    28  0.3  0.2  86224  3596 ?        S    18:58   0:00  \_ nginx: worker process
www-data    29  0.3  0.2  86224  3596 ?        S    18:58   0:00  \_ nginx: worker process
www-data    30  0.3  0.2  86224  3596 ?        S    18:58   0:00  \_ nginx: worker process
root        31  0.0  0.1  15568  2224 ?        R+   18:58   0

Cela na marche pas .... c'est normal car nginx nous a rendu la main et s'est arreter : il faut donc le lancer avec une option daemon off :
docker@boot2docker:~$ docker run -p 80 nginx_v1 /usr/sbin/ngi
nx -g "daemon off;"
le serveur ne nous rend pas la main et ...on voit le port cette fois qui est redirige de notre hote vers le 80 du docker :


docker@boot2docker:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                          PORTS                   NAMES
cf6344e63987        nginx_v1            "/usr/sbin/nginx -g '"   29 seconds ago      Up 27 seconds                   0.0.0.0:32772->80/tcp   gloomy_torvalds

docker@boot2docker:~$ curl -I http://localhost:32772
HTTP/1.1 200 OK
Server: nginx/1.4.6 (Ubuntu)
Date: Sun, 04 Oct 2015 19:08:05 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 04 Mar 2014 11:46:45 GMT
Connection: keep-alive
ETag: "5315bd25-264"
Accept-Ranges: bytes

Notre conteneur est reste au premier plan il faut donc le lancer en mode background :
docker@boot2docker:~$ docker run -d -p 80 nginx_v1 /usr/sbin/
nginx -g "daemon off;"
170e3c1b18041775d49947db8dfba6a8d8c741cf0468eb04ca2b02c192620eee
il nous rend la main .
Pour connaitre le port du docker :
docker@boot2docker:~$ docker port $(docker ps -lq) 80
0.0.0.0:32773


# On va faire du clean sur les containers :
1/ on stoppe :

docker@boot2docker:~$ docker stop `docker ps -q`
170e3c1b1804

On va recuperer la liste des containers et les supprimer :

docker@boot2docker:~$ docker ps -aq
170e3c1b1804
cf6344e63987
346cd590dfb3
4ce3d0c0f4ee
d8721152f206
afeb696e5695
4b33e085556c
f9a4fc36d1ae
3aa887eb285b
30072e08cafd
c785297214f3
263e8e5f6f5c
5d5d49620216
d18fe8b8201e
4b27f153ba1f
4046a2fd12a9
78e598f88100
3b02cd233526
6d9c51484127

donc on les passe en argument de la commande rm :
docker@boot2docker:~$ docker rm $(docker ps -aq)

C'est ok le menage est fait :
docker@boot2docker:~$ docker ps 
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES


=== notes sur docker ===

== tester en live une distrib ==

on lance un docker en centos:7 , et on lance un bash et on se connecte dans la foulée , puis on delete le container dans la foulée : 

run on lance 
--rm on delete 
-it : lance une console 
docker run --rm -it centos:7 /bin/bash



== Useful one-liners Docker cleanup commands Docker compose syntax ==
Interacting with a container

= Download an image
docker pull image_name

= Start and stop the container
docker [start|stop] container_name

= Create and start container, run command
docker run -ti --name container_name image_name command

= Create and start container, run command, destroy container
docker run --rm -ti image_name command

= Example filesystem and port mappings
docker run -it --rm -p 8080:8080 -v /path/to/agent.jar:/agent.jar -e JAVA_OPTS=”-javaagent:/agent.jar” tomcat:8.0.29-jre8

docker-compose.yml file example
version: “2”
services:
web:
 container_name: “web”
 image: java:8 # image name
 # command to run
 command: java -jar /app/app.jar
 ports: # map ports to the host
 - “4567:4567”
 volumes: # map filesystem to the host
 - ./myapp.jar:/app/app.jar
mongo: # container name
 image: mongo # image name

= Create and start containers
docker-compose up

= Docker machine commands
Use docker-machine to run the containers

= Start a machine
docker-machine start machine_name
Configure docker to use a specific machine
eval “$(docker-machine env machine_name)”

= Kill all running containers
docker kill $(docker ps -q)

= Delete dangling images
docker rmi $(docker images -q -f dangling=true)

= Remove all stopped containers
docker rm $(docker ps -a -q)

= Run a command in the container
docker exec -ti container_name command.sh

exemple :  ici on rentre dans le container en lancant un bash :
docker exec -it container1  /bin/bash

= Follow the container logs
docker logs -ft container_name

= Save a running container as an image
docker commit -m “commit message” -a “author” container_name username/image_name:tag


== managment de container : ==


on peut installer un packet depuis notre docker host 

ex : on install tree sur un container d'image ubuntu : 
root@ansible:~# docker run ubuntu apt-get install -y tree
on recupere l'id du container sur lequel on a fait ,otre modif puis on commit le changement : 
root@ansible:~# docker ps
CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS               NAMES
0113c8123b5c        kinogmt/centos-ssh       "/bin/sh -c 'servi..."   15 minutes ago      Up 15 minutes       22/tcp              hopeful_bohr
943b0349a0f2        kinogmt/centos-ssh       "/bin/sh -c 'servi..."   15 minutes ago      Up 15 minutes       22/tcp              jolly_babbage
e909c4afb217        rastasheep/ubuntu-sshd   "/usr/sbin/sshd -D"      15 minutes ago      Up 15 minutes       22/tcp              nervous_shockley

root@ansible:~# docker commit e909c4afb217 rastasheep/ubuntu-sshd 
sha256:097e45d8ab22c21071e9c2cbd7567adcd808247361314c82bfc22e93a329c265


stop de docker et tous les containers ... 

docker stop $(docker ps -a -q)

au reboot nos modifs sont conservées. 


== demarrage 
docker run -it -d notre_image
docker inspect notre_id de container
docker exec -u 0 -it notre_container bash


== Démonter l'interface docker0 sur notre machine host : =

service docker stop ne suffit pas pour démonter l'interface : on est obliger de faire : 

sudo ip link del docker0
