====  docker compose ===

on va pouvoir renseigner dans un fichier dédié les informations de builds, creation et démarrage de container qui peuvent être tres fastidieuse en cli 

1/ install de docker-compose :
apt install dockerc-compose 

2/ Il existe plusieurs versions majeures de docker-compose ( la 2 et 3 sont les plus importantes et a utiliser ) 

plusieurs  commandes derivée de docker 

ex : 

 docker-compose ps
       Name                     Command              State    Ports 
-------------------------------------------------------------------
workshop4_nginx_1    nginx -g daemon off;            Exit 0         
workshop4_phpfpm_1   docker-php-entrypoint php-fpm   Exit 0         

docker-compose start
Starting phpfpm ... done
Starting nginx ... done
boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> docker-compose ps
       Name                     Command              State          Ports         
---------------------------------------------------------------------------------
workshop4_nginx_1    nginx -g daemon off;            Up      0.0.0.0:8081->80/tcp 
workshop4_phpfpm_1   docker-php-entrypoint php-fpm   Up      9000/tcp             


 docker-compose logs -f nginx
Attaching to workshop4_nginx_1
nginx_1   | 172.18.0.1 - - [15/Mar/2019:17:51:05 +0000] "GET / HTTP/1.1" 200 115 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36" "-"
nginx_1   | 172.18.0.1 - - [15/Mar/2019:17:51:05 +0000] "GET /favicon.ico HTTP/1.1" 404 555 "http://localhost:8081/" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36" "-"



pour lancer un docker-compose : docker compose up 


exemple de docker-compose file  :


version: '2'  <<<< version commpose 

services:     <<<<< bloc de service qu"un défini
    nginx:    <<<<  nom de notre container lancer via compose  
        build: nginx  <<< nom de l'image utilisée pour le build / ou emplacement du dockerfile 
        ports: <<<<  section de port (equivalent -p 8081:80 ) 
            - "8081:80"
        volumes:  <<<<  volumes et points de montage accessibles dans le container ( equivalent a -v ${PWD}/app:/var/www )
            - ./app:/var/www   
        depends_on:   <<<<<< ici on a une clause qui permet de mettre en evidence les dependances entre nos applis : ici nginx ne demarre pas sans que le container phpfpm ne soit up  
            - phpfpm
    phpfpm:   <<<<<< second service lancé et dont le container sera phpfpm 
        image: php:fpm
        working_dir: /var/www
        volumes:
            - ./app:/var/www

avec une arbo de projet telle que suivant : 
tree
.
├── app
│   └── index.php
├── docker-compose.yml
├── nginx
│   ├── config
│   │   └── workshop.conf
│   └── Dockerfile
├── php
│   └── Dockerfile

boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat app/index.php 
<html>
 <head>
  <title>Test PHP</title>
 </head>
 <body>
 <?php echo '<p>Bonjour tout le monde</p>'; ?>
 </body>
</html>
boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat nginx/
config/     Dockerfile  
boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat nginx/config/workshop.conf 
server {
    listen 80 default_server;

    root /var/www/;

    index index.php;

    location ~ \.php$ {
        try_files $uri $uri/ =404;
        fastcgi_pass phpfpm:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat nginx/Dockerfile 
FROM nginx

VOLUME /var/www
WORKDIR /var/www

RUN rm /etc/nginx/conf.d/default.conf
COPY config/ /etc/nginx/conf.d

boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat php/Dockerfile 
FROM php:fpm

VOLUME /var/www
WORKDIR /var/www
RUN rm -r /var/www/html


on peut donc acceder à notre app en saisissant http://localhost:8081




==== docker compose env : ==

par defaut deocker-compose va chercher les variables d'environmenent nécéssaires ason build dans un fichier 
.env 

ce fichier peut être passé en argumant de build mais souvent il sera présent dans le repertoire hébergeant le fichier docker-compose.yaml 

ex: 

 ls -la
total 28
drwxr-xr-x 3 boogie boogie 4096 juil.  8 12:45 .
drwxr-xr-x 7 boogie boogie 4096 juil.  8 11:42 ..
-rw-r--r-- 1 boogie boogie  939 juil.  8 12:27 docker-compose.yml
drwxr-xr-x 5 boogie boogie 4096 juil.  8 11:42 docker-services
-rw-r--r-- 1 boogie boogie  353 juil.  8 12:26 .env
-rw-r--r-- 1 boogie boogie   24 juil.  8 11:42 .gitignore
-rw-r--r-- 1 boogie boogie  717 juil.  8 11:42 Makefile

cat .env
## DOCKER COMPOSE PROFILE ##
PROFILE=default

### APPS GEN ##

##  ##
PHP_VERSION=php72
PORT_WEB=82
PORT_APP=9002

ex: docker-compose.yaml

--version: '7.7'

  services:
    web-nginx:
      container_name: web-nginx
      restart: on-failure
      build:
        context: ./docker-services/nginx
      volumes:
        - ./src:/var/www/html:cached
        - ./logs/nginx:/var/log/nginx:cached
      labels:
        - traefik.enable=true
        - traefik.backend=web
        - traefik.frontend.rule=Host:web.local, web
        - traefik.docker.network=web
        - traefik.port=80

    web-php:
      container_name: web-php
      restart: on-failure
      build:
        context: ./docker-services/${PHP_VERSION}-fpm
      image: web-php-${PHP_VERSION}
      volumes:
        - ./src:/var/www/html:cached
        - ./logs/web:rw,cached
      ports:
        - "${PORT_APP}:9000"
      environment:
        # env variable used to debug cli scripts
        PHP_IDE_CONFIG: serverName=web.local
      labels:
        - traefik.enable=false

