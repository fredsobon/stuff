====  docker compose ===

on va pouvoir renseigner dans un fichier dédié les informations de builds, creation et démarrage de container qui peuvent être tres fastidieuse en cli 

1/ install de docker-compose :
apt install dockerc-compose 

2/ Il existe plusieurs versions majeures de docker-compose ( la 2 et 3 sont les plus importantes et a utiliser ) 

plusieurs  commandes derivée de docker 

ex : 

 docker-compose ps
       Name                     Command              State    Ports 
-------------------------------------------------------------------
workshop4_nginx_1    nginx -g daemon off;            Exit 0         
workshop4_phpfpm_1   docker-php-entrypoint php-fpm   Exit 0         

docker-compose start
Starting phpfpm ... done
Starting nginx ... done
boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> docker-compose ps
       Name                     Command              State          Ports         
---------------------------------------------------------------------------------
workshop4_nginx_1    nginx -g daemon off;            Up      0.0.0.0:8081->80/tcp 
workshop4_phpfpm_1   docker-php-entrypoint php-fpm   Up      9000/tcp             


 docker-compose logs -f nginx
Attaching to workshop4_nginx_1
nginx_1   | 172.18.0.1 - - [15/Mar/2019:17:51:05 +0000] "GET / HTTP/1.1" 200 115 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36" "-"
nginx_1   | 172.18.0.1 - - [15/Mar/2019:17:51:05 +0000] "GET /favicon.ico HTTP/1.1" 404 555 "http://localhost:8081/" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36" "-"



pour lancer un docker-compose : docker compose up 


exemple de docker-compose file  :


version: '2'  <<<< version commpose 

services:     <<<<< bloc de service qu"un défini
    nginx:    <<<<  nom de notre container lancer via compose  
        build: nginx  <<< nom de l'image utilisée pour le build / ou emplacement du dockerfile 
        ports: <<<<  section de port (equivalent -p 8081:80 ) 
            - "8081:80"
        volumes:  <<<<  volumes et points de montage accessibles dans le container ( equivalent a -v ${PWD}/app:/var/www )
            - ./app:/var/www   
        depends_on:   <<<<<< ici on a une clause qui permet de mettre en evidence les dependances entre nos applis : ici nginx ne demarre pas sans que le container phpfpm ne soit up  
            - phpfpm
    phpfpm:   <<<<<< second service lancé et dont le container sera phpfpm 
        image: php:fpm
        working_dir: /var/www
        volumes:
            - ./app:/var/www

avec une arbo de projet telle que suivant : 
tree
.
├── app
│   └── index.php
├── docker-compose.yml
├── nginx
│   ├── config
│   │   └── workshop.conf
│   └── Dockerfile
├── php
│   └── Dockerfile

boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat app/index.php 
<html>
 <head>
  <title>Test PHP</title>
 </head>
 <body>
 <?php echo '<p>Bonjour tout le monde</p>'; ?>
 </body>
</html>
boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat nginx/
config/     Dockerfile  
boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat nginx/config/workshop.conf 
server {
    listen 80 default_server;

    root /var/www/;

    index index.php;

    location ~ \.php$ {
        try_files $uri $uri/ =404;
        fastcgi_pass phpfpm:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat nginx/Dockerfile 
FROM nginx

VOLUME /var/www
WORKDIR /var/www

RUN rm /etc/nginx/conf.d/default.conf
COPY config/ /etc/nginx/conf.d

boogie-/home/boogie/Documents/work/repos_work/docker-workshop/workshop4>> cat php/Dockerfile 
FROM php:fpm

VOLUME /var/www
WORKDIR /var/www
RUN rm -r /var/www/html


on peut donc acceder à notre app en saisissant http://localhost:8081

