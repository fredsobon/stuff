=== quick notes for docker ===

= docker cmds = :

- pull :

on recupere une image depuis un repo. Sans precision l'image sera la derniere dispo : latest et le repo sera le docker hub 

docker pull  nginx
Using default tag: latest
latest: Pulling from library/nginx
Digest: sha256:dd2d0ac3fff2f007d99e033b64854be0941e19a2ad51f174d9240dda20d9f534
Status: Image is up to date for nginx:latest

- run  

on va pouvoir demarrer une image et donc lancer un container.
Si on ne dispose pas de l'image en local alors la commande run va aller chercher l'image sur un repo et lancer l'execution du container de cette image: 

docker run nginx
Unable to find image 'nginx:latest' locally
latest: Pulling from library/nginx
6ae821421a7d: Pull complete 
da4474e5966c: Pull complete 
eb2aec2b9c9f: Pull complete 
Digest: sha256:dd2d0ac3fff2f007d99e033b64854be0941e19a2ad51f174d9240dda20d9f534
Status: Downloaded newer image for nginx:latest

options :

-it : va lancer un tty interractif 
-d : va lancer le container en mode background
-p : va rediriger un port choisi de notre host vers notre container 
-P : va laisser docker choisir un port de redirection pour nous
-exec : va permettre de lancer l'execution d'une commande dans notre container 
--rm : va detruire le container quand la console sera quittée ( ctrl + C ou exit si on est dans le container ) 
--name : on va pouvoir donner un nom à notre container.

ex : 
lance un container avec tty qui se deletera apres l'utilisation dont le port host local 80 redirige vers le port 80 du container 
docker run -it --rm -p 80:80 test_nginx 

- ps  ou container ls ( qui est la nouvelle forme )

on va pouvoir examiner le status de nos containers avec ps :

seul docker ps nous montre les containers actifs 

boogie@satellite:/tmp/docker$ docker ps 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
c87893dd3020        test_nginx          "nginx -g 'daemon of…"   3 seconds ago       Up 2 seconds        80/tcp              fervent_austin

- ps -a : l'option -a de ps nous permet de voir les containers coupés mais toujours présents sur le systeme : 

boogie@satellite:/tmp/docker$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
c87893dd3020        test_nginx          "nginx -g 'daemon of…"   25 seconds ago      Up 24 seconds               80/tcp              fervent_austin
61da09a86823        nginx               "nginx -g 'daemon of…"   14 minutes ago      Exited (0) 13 minutes ago                       thirsty_agnesi
76e4c434a635        fce289e99eb9        "/hello"                 4 hours ago         Exited (0) 4 hours ago                          determined_curran
01b8007cd18e        fce289e99eb9        "/hello"                 4 hours ago         Exited (0) 4 hours ago                          peaceful_wilson

- stop
on va arrêter un container 
on peut stopper le container par son nom ou par son id : 
docker stop silly_mirzakhani
docker stop 99cda3458bab

- container 
on va pouvoir examiner les containers avec la commande container 
ex 
docker container ls 

boogie@satellite:/tmp/docker$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
c87893dd3020        test_nginx          "nginx -g 'daemon of…"   4 minutes ago       Up 4 minutes        80/tcp              fervent_austin

- images :

on va pouvoir examiner les images présentes sur le systeme avec :

docker images 
boogie@satellite:/tmp/docker$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
test_nginx          latest              ee0931fc9765        6 minutes ago       157MB
nginx               latest              f09fe80eb0e7        11 days ago         109MB

- rmi :

suppression d'images avec la commandes rmi /!\ Attention aucun container issu de cette image ne doit être démarré : sinon ca ne fonctionne pas ( on peut cepandant by passer avec l'option force -f )

toutes les layers de l'images seront supprimées : 

boogie@satellite:/tmp/docker$ docker rmi test_nginx
Untagged: test_nginx:latest
Deleted: sha256:ee0931fc97651e73c3416af00c46cd62a5f783588fccb29257abf86ced9d8459
Deleted: sha256:92d2be83c1df91049dfba524bd9bc2ac0c897eee0a550ffa57dadb48dbbe2eb5
Deleted: sha256:880becabb408765d24e181a6507bc258ca0fb92c6a1d52c084b6ebcfaf6cda18
Deleted: sha256:ace5bb277eb13b902696f77a3d5414894fe22bcbc4188318f66b69df7721a509
Deleted: sha256:fc314536b936845563d8a66db4cd0c619282d09fd5c2091a143ecd655211c02c
Deleted: sha256:0a16cfeeba33e4facb63f6ef20959c68eb6b29cc41eb5e9a4fb7f4085198db53


- stats : 

on va pouvoir examiner les différentes ressources prises par notre container :
exemple on lance un container :
docker run  -it --rm --name testo   testo bash
root@ea74df66b3ec:/#
et on examine son status : 
docker stats testo

iCONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT    MEM %               NET I/O             BLOCK I/O           PIDS
ea74df66b3ec        testo               0.00%               1.27MiB / 15.35GiB   0.01%               3.29kB / 0B         0B / 0B             1

- top : 

on va pouvoir examiner les process de notre container avec un top : 

docker top testo
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                3277                3262                0                   19:21               pts/0               00:00:00            bash



- inspect : va nous permettre d'avoir tout une liste d'information relative à notre container :

 docker inspect testo
[
    {
        "Id": "ea74df66b3ec74d57b04adc70fc6d032789bc547d1f13b83d047e41c08110d0d",
        "Created": "2019-02-25T18:21:33.142412379Z",
        "Path": "bash",
        "Args": [],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 3277,
        ...
        },
        "Image": "sha256:b38b9a4041a4158587d5fb26add06a7044aeed4f0f8064a376e59a8b6ae7117f",
        "ResolvConfPath": "/var/lib/docker/containers/ea74df66b3ec74d57b04adc70fc6d032789bc547d1f13b83d047e41c08110d0d/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/ea74df66b3ec74d57b04adc70fc6d032789bc547d1f13b83d047e41c08110d0d/hostname",
        "HostsPath": "/var/lib/docker/containers/ea74df66b3ec74d57b04adc70fc6d032789bc547d1f13b83d047e41c08110d0d/hosts",
        "LogPath": "/var/lib/docker/containers/ea74df66b3ec74d57b04adc70fc6d032789bc547d1f13b83d047e41c08110d0d/ea74df66b3ec74d57b04adc70fc6d032789bc547d1f13b83d047e41c08110d0d-json.log",
        "Name": "/testo",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
                ...
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
                ...
                "MergedDir": "/var/lib/docker/overlay2/20f318b167119c60e60fb4a29ed215bb70cfeceb8a85b27fa6d572f2bcc6f31c/merged",
                "UpperDir": "/var/lib/docker/overlay2/20f318b167119c60e60fb4a29ed215bb70cfeceb8a85b27fa6d572f2bcc6f31c/diff",
                "WorkDir": "/var/lib/docker/overlay2/20f318b167119c60e60fb4a29ed215bb70cfeceb8a85b27fa6d572f2bcc6f31c/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [
            {
                "Type": "volume",
                "Name": "fa0daedb6892ea52e6fe2304ed39295c7d7d90c70dd09332d7c0f08118251a3a",
                "Source": "/var/lib/docker/volumes/fa0daedb6892ea52e6fe2304ed39295c7d7d90c70dd09332d7c0f08118251a3a/_data",
                "Destination": "/etc/nginx/conf.d",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
            },
            {
                "Type": "volume",
                "Name": "c95cd0ce42d4089a13ff14ca7f94da24866d7fdb9226dc8a6a57f2629096b607",
                "Source": "/var/lib/docker/volumes/c95cd0ce42d4089a13ff14ca7f94da24866d7fdb9226dc8a6a57f2629096b607/_data",
                "Destination": "/var/www",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
            }
        ],
        ...
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "dd19b06426615da763591ef411472a636c95f7b01ebc7d79c74fa41f73e7f34a",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {
                "80/tcp": null,
                "9000/tcp": null
            },
            "EndpointID": "3b840d204ef9ce527e335273a2a16d57dd9e38536cae4537c976d57b977e4e38",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.2",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "02:42:ac:11:00:02",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "97ba5230251f3f6fe11fe751e0dfb58adf6760e8b84b4092c5f3dd4290ceb039",
                    "EndpointID": "3b840d204ef9ce527e335273a2a16d57dd9e38536cae4537c976d57b977e4e38",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:11:00:02",
                    "DriverOpts": null
....
.......


 Il est possible d'obtenir assez finement les informations de notre image .
 ex : ici on va rechercher toutes les infos relatives au label ( metadata ) de notre image :

 docker image inspect -f {{.Config.Labels}} testo
map[maintainer:NGINX Docker Maintainers <docker-maint@nginx.com> version:777]


- history :

on va pouvoir examiner les différentes couches / layers de notre image afin de voir la décomposition des strates :

docker history testo
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
b38b9a4041a4        3 days ago          /bin/sh -c #(nop)  CMD ["/bin/echo" "BoogieW…   0B
405cb62bb2c1        3 days ago          /bin/sh -c #(nop)  EXPOSE 9000                  0B
31c6c7055f62        3 days ago          /bin/sh -c #(nop)  VOLUME [/etc/nginx/conf.d…   0B
fe16e70aa223        3 days ago          /bin/sh -c #(nop)  VOLUME [/var/www/]           0B
7719d5c07884        3 days ago          /bin/sh -c rm /etc/nginx/conf.d/default.conf    0B
e3c69195032a        3 days ago          /bin/sh -c apt update -y && apt install -y v…   47.4MB
64aa32a5a151        3 days ago          /bin/sh -c #(nop)  LABEL version=777            0B
f09fe80eb0e7        2 weeks ago         /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B

- build :

on va pouvoir construire une image et ensuite l'executer en tant que container :

on va pouvoir donner un nom tagger notre image .
On va pour la builder s'assurer d'être dans un repertoire dédié ne comportant que le necessaire pour notre image.
Nous allons alimenter un Dockerfile qui sera le fichier d'instruction pour le build , puis lancer le build avec : 

/!\ attention a bien ordonnancer nos ressources dans le dockerfile : l'installation de packets et tache gourmandes sont a faire en debut de fichier : car a chaque rebuild ( debug de notre appli ) le traitement ne sera pas a refaire : un cache local est utilisé.

Il va être important d'essayer de cumuler les etapes consommatrices de volume : ex combiner les opérations d'intallation , suppression de packets : à chaque appel de commande dans le dockerfile une strate est créee 

docker build -t test_nginx .

- Dockerfile :

plusieurs section vont être nécéssaire pour remplir le dockerfile 

FROM image source 
RUN  commande a executer sur notre container
COPY source_locale dest_container
LABEL
VOLUME
EXPOSE
ENV
CMD
ENTRYPOINT
...

exemple : ici on va builder une image dont la source sera une image docker officielle nginx . On va ensuite installer vim sur l'image .On va ensuite copier depuis notre arbo locale vers le file system deux fichiers : une ressource html et une conf ) 

boogie@satellite:/tmp/docker$ cat Dockerfile 
FROM nginx
RUN apt-get update && apt-get install -y vim
COPY testo/testo.html /var/www/
COPY testo/testo.conf /etc/nginx/conf.d/default.conf
boogie@satellite:/tmp/docker$ tree
.
├── Dockerfile
└── testo
    ├── testo.conf
    └── testo.html

Il est possible d'ajouter d'autre conf dans nos dockerfile :


-FROM : va nous permettre de définir l'image de base qui va servir à construire notre propre image 


-RUN : va nous permettre d'agit sur le contenu de notre image : ajouter des packets, lancer des scripts , delete des rep .....
ex: 

RUN apk add --update nginx && \
  rm -rf /var/cache/apk/* && \
  mkdir -p /tmp/nginx/


-LABEL : va nous permettre d'ajouter des metadata qui seront utiles : info du mainteneur, version de l'image ...La forme attendue des entrées est key=value :
ex :
LABEL version="1.1"
LABEL description="image pour faire des gaufres ..."

-VOLUME : il va être possible de préparer des points de montage dans notre conf d'image dans ce cas le montage sera "exposé" et lors du demarrage du container on precisera la source locale de notre directory qui sera montée dans notre container. On peut déclarer plusieurs VOLUME qu'il faudra instancier explicitement lors du démarrage de notre docker : 

VOLUME /var/www/
VOLUME /etc/nginx/conf.d/

docker run --rm -v /home/boogie/Documents/work/repos_work/docker-workshop/workshop2/app/:/var/www/ -v /home/boogie/Documents/work/repos_work/docker-workshop/workshop2/config:/etc/nginx/conf.d/ testo

-EXPOSE : il va être possible de definir un ou plusieurs ports ouverts dans notre container. Comme pour les points de montage, il faudra les définir explicitement lors du démarrage de notre container :
EXPOSE 9000

On peut definir le port corrrespondant au container de notre host avec l'option -p <port_host>:<port_container> 

docker run --rm -p 80:9000 testo
ce qui nous donnera avec un docker ps :

CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                          NAMES
f9292f069e6a        testo               "/bin/sleep 100"    7 seconds ago       Up 6 seconds        80/tcp, 0.0.0.0:80->9000/tcp   elastic_meninsky

on peut sinon laisser docker choisir lui même le port avec un -p <port_container> 

docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                             NAMES
27706d4ec7e2        testo               "/bin/sleep 100"    4 seconds ago       Up 3 seconds        80/tcp, 0.0.0.0:32769->9000/tcp   trusting_vaughan


- CMD : on peut permettre a notre container d'executer une commande apres son démarrage : un seul bloc CMD par dockerfile 
CMD ["/bin/echo", "BoogieWonderlanD!" ]

docker run --rm -p 9000 testo
BoogieWonderlanD


ex : 

FROM  nginx
LABEL version="777"
RUN   apt update -y && apt install -y vim
#COPY  config/workshop.conf config/9000.conf /etc/nginx/conf.d/
#COPY  app/index.html  app/idx.html /var/www/
RUN   rm /etc/nginx/conf.d/default.conf
VOLUME /var/www/
VOLUME /etc/nginx/conf.d/
EXPOSE 9000
CMD ["/bin/sleep", "100" ]


- docker version
de base quand on utilise docker notre client interroge le serveur (installé en local) celui ci repond via l'api docker .

boogie@satellite:/tmp$ docker version
Client:
 Version:           18.06.1-ce
 API version:       1.38
 Go version:        go1.10.4
 Git commit:        e68fc7a
 Built:             Fri Jan 25 14:34:22 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.1-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.4
  Git commit:       e68fc7a
  Built:            Thu Jan 24 10:47:43 2019
  OS/Arch:          linux/amd64
  Experimental:     false


- docker info 

va nous permettre d'avoir beaucoup d'informations utiles sur notre environment local : 

docker info
Containers: 5
 Running: 0
 Paused: 0
 Stopped: 5
Images: 19
Server Version: 18.09.1
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 9754871865f7fe2f4e74d43e2fc7ccd237edcbce
runc version: 96ec2177ae841256168fcf76954f7177af9446eb
init version: fec3683
Security Options:
 apparmor
 seccomp
  Profile: default
Kernel Version: 4.19.0-1-amd64
Operating System: Debian GNU/Linux buster/sid
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 15.35GiB
Name: lapin
ID: 55PR:2LQX:N4JS:5MKG:GRTI:SZRU:5DQC:75TM:7Y3T:MFKY:UEHD:FLYX
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false
Product License: Community Engine

WARNING: No swap limit support


=  docker networks :


on va pouvoir examiner les différents réseaux docker présents sur notre systeme :

- docker network ls : 

boogie@satellite:~/Documents/lab/docker$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
1bc6ba2d04a2        bridge              bridge              local
15d246afb536        host                host                local
11f4a0bbd7dd        none                null                local

le reseau bridge est le reseau de base de docker qui va relier en nat notre container à l'interface physique de notre machinne.




- docker network inspect :

on va pouvoir examiner les différents containers pluggués sur notre réseau ex : 
boogie@satellite:~/Documents/lab/docker$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                NAMES
605ef8a5dfc8        debian              "bash"                   About a minute ago   Up About a minute                        agitated_hopper
654ad0184fcd        nginx               "nginx -g 'daemon of…"   14 minutes ago       Up 14 minutes       0.0.0.0:80->80/tcp   thirsty_saha


boogie@satellite:~/Documents/lab/docker$ docker network inspect bridge 
[
    {
        "Name": "bridge",
        "Id": "1bc6ba2d04a280dd1c2175cb834552ca1f358c351349e13ee4475ca02bc99dd5",
        "Created": "2019-03-03T17:25:00.133107897+01:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",  <<< reseau par défaut et adressage de base de notre bridge docker 
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "605ef8a5dfc8e7b2cef03eadd61cf1536166eed5bee8d512df7823506ea2ff64": {
                "Name": "agitated_hopper",   <<<<<<< container 1 
                "EndpointID": "663a9590df7e16d5d45e9d56119719f2923651a7b85204ad2c96268ac8ec6f15",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "654ad0184fcddd055b7c36d03ba532f8b6b596f9a3487c3eaf41f51167e40729": {
                "Name": "thirsty_saha",    <<<<<< container 2 
                "EndpointID": "84cb9a5cf2d6495ad06faa4ca75de23041623417395a4c9b1a0ae7235f121dd9",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]

On voit en parcourant la conf que le réseau de base du bridge est le 172.17.0.0/16 avec comme gateway 172.17.0.1 . Tous les containers de base seront donc dans ce réseau.



- creation de network :
on va pouvoir créer notre network 

docker network  create my_net
boogie@satellite:~/Documents/lab/docker$ docker network create my_net
a23ecae30e5997cddbc9c36f8fd272bfe34aaac73713b6f78f43664cf60b344a
boogie@satellite:~/Documents/lab/docker$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
1bc6ba2d04a2        bridge              bridge              local
15d246afb536        host                host                local
a23ecae30e59        my_net              bridge              local
11f4a0bbd7dd        none                null                local

boogie@satellite:~/Documents/lab/docker$ docker network inspect my_net 
[
    {
        "Name": "my_net",
        "Id": "a23ecae30e5997cddbc9c36f8fd272bfe34aaac73713b6f78f43664cf60b344a",
        "Created": "2019-03-03T17:45:51.400308341+01:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]


On voit qu'on une nouvelle plage d'adresse pour notre nouveau réseau : 172.18.0.0/16 GW 172.18.0.1

De base sans rien préciser le network que l'on crée utilisera le driver bridge.

On va pouvoir directement lancer un container qui utilisera le réseau que l'on vient de creer :

docker run -d --rm --network my_net  --name new_nginx nginx 
fbc2d7d33c5ae9fc8dd3ae85ee403f71a9da77e86cc99dd1fd930b514f01645a

docker inspect new_nginx  |grep -i ipaddress
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.2",

On peut connecter un container existant à notre réseau : cela revient à plugger une interface réseau virtuelle dans notre container :

docker network connect network container 

docker network connect my_net thirsty_saha

on voit que le container comporte désormais  deux interface réseau :

 docker inspect thirsty_saha  |grep -iE "IPAddress"
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.2",
                    "IPAddress": "172.17.0.2",
                    "IPAddress": "172.18.0.3",

on peut supprimer une interface réseau d'unb container :

docker network disconnet net container :

boogie@satellite:~/Documents/lab/docker$ docker network disconnect my_net thirsty_saha
boogie@satellite:~/Documents/lab/docker$ docker inspect thirsty_saha  |grep -iE "IPAddress"
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.2",
                    "IPAddress": "172.17.0.2",

On voit maintenant que notre node n'a plus l'ip de notre réseau crééer précédemment .

- network security :

de base on va créer nos apps : frontend et backend sur le même réseau : leur communication ne quitterons pas le hosts. Tous les ports exposés exterrieurement sont fermés par defaut.
On va exposer manuellement le port que l'on veut en utilisant le flag -p 

- Network dns :

les ip de nos containers etant aléatoires a la creation : cela impose donc l'utilisation de dns / resolutions de noms .. car il n'est pas possible de s'assurer que les ip ne changent pas.

Le docker daemon utilise un process build in de resolution dns  : ainsi les containers utilisent leur nom et ce mecanisme pour communiquer entre eux.

boogie@satellite:~/Documents/lab/docker$ docker exec -it bob ping alice
PING alice (172.18.0.3) 56(84) bytes of data.
64 bytes from alice.my_net (172.18.0.3): icmp_seq=1 ttl=64 time=0.118 ms
64 bytes from alice.my_net (172.18.0.3): icmp_seq=2 ttl=64 time=0.101 ms
^C
--- alice ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1017ms
rtt min/avg/max/mdev = 0.101/0.109/0.118/0.013 ms
boogie@satellite:~/Documents/lab/docker$ docker exec -it alice  ping bob   
PING bob (172.18.0.2) 56(84) bytes of data.
64 bytes from bob.my_net (172.18.0.2): icmp_seq=1 ttl=64 time=0.063 ms
64 bytes from bob.my_net (172.18.0.2): icmp_seq=2 ttl=64 time=0.106 ms
^C
--- bob ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1011ms
rtt min/avg/max/mdev = 0.063/0.084/0.106/0.023 ms
boogie@satellite:~/Documents/lab/docker$ 


/!\ La resolution de nom docker fonctionne nativement que sur les réseaux crées manuellement : le reseau bridge de base ne resoud pas nativement les noms  : des containers uniquement sur ce reseau ne pourront pas se servir de la resolution de noms.


On va pouvoir definir a la creation de nos nodes ET avec un reseau dedié un alias dns a nos nodes pour qu'ils répondent à un nom de "service" :

ex: ici on lance deux containers elasticsearch sur un reseau crée au prealable qui porteront chacun l'alias dns search : 

docker network create search_lan
docker run -d --network search_lan --net-alias search elasticsearch:2
docker run -d --network search_lan --net-alias search elasticsearch:2

On peut tester depuis un docker alpine sur le même reseau que nos nodes que nos deux  containers ont bien l'alias de reconnu sur le réseau 

docker run --network search_lan -it alpine sh

/ # nslookup search

Name:      search
Address 1: 172.19.0.2 search.search_lan
Address 2: 172.19.0.3 search.search_lan


Depuis un container debian sur le même reseau que nos nodes : on peut lancer une recherche sur le port 9200 d'elasticsearch : on voit que deux nodes différents nous repondent : 
l'alias dns a bien fonctionné : 

root@ce35f29ddc1f:/# curl -s search:9200
{
  "name" : "Landslide",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "YXOqmudmRVez-elaNCnUGA",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },
  "tagline" : "You Know, for Search"
}
root@ce35f29ddc1f:/# curl -s search:9200
{
  "name" : "Erg",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "MOlPYsUQQ0itXwfrVLMVxw",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },
  "tagline" : "You Know, for Search"
}


= docker images : =

hub.docker.com : repos par default . images public / private
images officielles : maintenues par les distributeurs des apps / os : à privilégier.

- alpine image : images à privilégier : small et contiennent le minimum. images tres light
- scratch : est l'image root de toutes les images : scratch ne contient rien : on part don de rien pour builder nos images uniquement avec le strict nécéssaire pour nos images.

Il est important d'examiner les docs des images.
Les versions sont incrémentées : si on ne specifi rien on embarque la derniere image dispo : latest.
Les images ont donc un identifiant le 'tag'


- layers :

le unionfs : uniion filesystem permet à docker de fonctionner en couche superposées.



La toute premiere couche d'une image est vide et appellée scratch 


docker history nginx:latest 
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
f09fe80eb0e7        3 weeks ago         /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B                  
<missing>           3 weeks ago         /bin/sh -c #(nop)  STOPSIGNAL SIGTERM           0B                  
<missing>           3 weeks ago         /bin/sh -c #(nop)  EXPOSE 80                    0B                  
<missing>           3 weeks ago         /bin/sh -c ln -sf /dev/stdout /var/log/nginx…   22B                 
<missing>           3 weeks ago         /bin/sh -c set -x  && apt-get update  && apt…   53.9MB              
<missing>           3 weeks ago         /bin/sh -c #(nop)  ENV NJS_VERSION=1.15.8.0.…   0B                  
<missing>           3 weeks ago         /bin/sh -c #(nop)  ENV NGINX_VERSION=1.15.8-…   0B                  
<missing>           3 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B                  
<missing>           3 weeks ago         /bin/sh -c #(nop)  CMD ["bash"]                 0B                  
<missing>           3 weeks ago         /bin/sh -c #(nop) ADD file:5a6d066ba71fb0a47…   55.3MB 


on voit que quand les modif de couche ne concernent que les metadata de l'image : aucune place supplémentaire n'est occupée ( ex history de l'image precedente : 0k ajouté pour le label maintener ajouté.
Pas de souci concernant le flag missing en premiere colonne : cela indique juste que ces couches font parties de l'image dont le numéro est au top level : et qu'aucun nom n'est nécéssaire pour elles.

L'enorme avantage de cee type de conf est de ne pas retelecharger ce qui est deja present sur le systeme et utilisé par plusieurs images .
La gestion du cache permet un gain de temps et de place très important.

Un container est donc juste une simple couche en lecture / ecriture au dessus d'une image.


== docker login ==
Log in to a Docker registry

Usage
docker login [OPTIONS] [SERVER]
Options
Name, shorthand	Default	Description
--password , -p		Password
--password-stdin		Take the password from stdin
--username , -u		Username

Login to a registry.

Login to a self-hosted registry
If you want to login to a self-hosted registry you can specify this by adding the server name.

$ docker login localhost:8080



== docker registry == 

The Registry is a stateless, highly scalable server side application that stores and lets you distribute Docker images

Start your registry
docker run -d -p 5000:5000 --name registry registry:2

Pull (or build) some image from the hub
docker pull ubuntu

Tag the image so that it points to your registry
docker image tag ubuntu localhost:5000/myfirstimage

Push it
docker push localhost:5000/myfirstimage

Pull it back
docker pull localhost:5000/myfirstimage

Now stop your registry and remove all data
docker container stop registry && docker container rm -v registry

On va pouvoir lister les différentes images de notre registry via un cuel et l'api v2 de docker :

http://<ip/hostname>:<port>/v2/_catalog

curl -X GET http://localhost:5000/v2/_catalog
{"repositories":["bob","myfirstimage"]}

