=== quick notes for docker ===

= docker cmds = :

- pull :

on recupere une image depuis un repo. Sans precision l'image sera la derniere dispo : latest et le repo sera le docker hub 

docker pull  nginx
Using default tag: latest
latest: Pulling from library/nginx
Digest: sha256:dd2d0ac3fff2f007d99e033b64854be0941e19a2ad51f174d9240dda20d9f534
Status: Image is up to date for nginx:latest

- run  

on va pouvoir demarrer une image et donc lancer un container.
Si on ne dispose pas de l'image en local alors la commande run va aller chercher l'image sur un repo et lancer l'execution du container de cette image: 

docker run nginx
Unable to find image 'nginx:latest' locally
latest: Pulling from library/nginx
6ae821421a7d: Pull complete 
da4474e5966c: Pull complete 
eb2aec2b9c9f: Pull complete 
Digest: sha256:dd2d0ac3fff2f007d99e033b64854be0941e19a2ad51f174d9240dda20d9f534
Status: Downloaded newer image for nginx:latest

options :

-it : va lancer un tty interractif 
-d : va lancer le container en mode background
-p : va rediriger un port choisi de notre host vers notre container 
-P : va laisser docker choisir un port de redirection pour nous
-exec : va permettre de lancer l'execution d'une commande dans notre container 
--rm : va detruire le container quand la console sera quittée ( ctrl + C ou exit si on est dans le container ) 

ex : 
lance un container avec tty qui se deletera apres l'utilisation dont le port host local 80 redirige vers le port 80 du container 
docker run -it --rm -p 80:80 test_nginx 

- ps :

on va pouvoir examiner le status de nos containers avec ps :

seul docker ps nous montre les containers actifs 

boogie@satellite:/tmp/docker$ docker ps 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
c87893dd3020        test_nginx          "nginx -g 'daemon of…"   3 seconds ago       Up 2 seconds        80/tcp              fervent_austin

- ps -a : l'option -a de ps nous permet de voir les containers coupés mais toujours présents sur le systeme : 

boogie@satellite:/tmp/docker$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
c87893dd3020        test_nginx          "nginx -g 'daemon of…"   25 seconds ago      Up 24 seconds               80/tcp              fervent_austin
61da09a86823        nginx               "nginx -g 'daemon of…"   14 minutes ago      Exited (0) 13 minutes ago                       thirsty_agnesi
76e4c434a635        fce289e99eb9        "/hello"                 4 hours ago         Exited (0) 4 hours ago                          determined_curran
01b8007cd18e        fce289e99eb9        "/hello"                 4 hours ago         Exited (0) 4 hours ago                          peaceful_wilson

- stop
on va arrêter un container 
on peut stopper le container par son nom ou par son id : 
docker stop silly_mirzakhani
docker stop 99cda3458bab

- container 
on va pouvoir examiner les containers avec la commande container 
ex 
docker container ls 

boogie@satellite:/tmp/docker$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
c87893dd3020        test_nginx          "nginx -g 'daemon of…"   4 minutes ago       Up 4 minutes        80/tcp              fervent_austin

- images :

on va pouvoir examiner les images présentes sur le systeme avec :

docker images 
boogie@satellite:/tmp/docker$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
test_nginx          latest              ee0931fc9765        6 minutes ago       157MB
nginx               latest              f09fe80eb0e7        11 days ago         109MB

- rmi :

suppression d'images avec la commandes rmi /!\ Attention aucun container issu de cette image ne doit être démarré : sinon ca ne fonctionne pas ( on peut cepandant by passer avec l'option force -f )

toutes les layers de l'images seront supprimées : 

boogie@satellite:/tmp/docker$ docker rmi test_nginx
Untagged: test_nginx:latest
Deleted: sha256:ee0931fc97651e73c3416af00c46cd62a5f783588fccb29257abf86ced9d8459
Deleted: sha256:92d2be83c1df91049dfba524bd9bc2ac0c897eee0a550ffa57dadb48dbbe2eb5
Deleted: sha256:880becabb408765d24e181a6507bc258ca0fb92c6a1d52c084b6ebcfaf6cda18
Deleted: sha256:ace5bb277eb13b902696f77a3d5414894fe22bcbc4188318f66b69df7721a509
Deleted: sha256:fc314536b936845563d8a66db4cd0c619282d09fd5c2091a143ecd655211c02c
Deleted: sha256:0a16cfeeba33e4facb63f6ef20959c68eb6b29cc41eb5e9a4fb7f4085198db53

- build :

on va pouvoir construire une image et ensuite l'executer en tant que container :

on va pouvoir donner un nom tagger notre image .
On va pour la builder s'assurer d'être dans un repertoire dédié ne comportant que le necessaire pour notre image.
Nous allons alimenter un Dockerfile qui sera le fichier d'instruction pour le build , puis lancer le build avec : 

/!\ attention a bien ordonnancer nos ressources dans le dockerfile : l'installation de packets et tache gourmandes sont a faire en debut de fichier : car a chaque rebuild ( debug de notre appli ) le traitement ne sera pas a refaire : un cache local est utilisé.

docker build -t test_nginx .

- Dockerfile :

plusieurs section vont être nécéssaire pour remplir le dockerfile 

FROM image source 
RUN  commande a executer sur notre container
COPY source_locale dest_container

exemple : ici on va builder une image dont la source sera une image docker officielle nginx . On va ensuite installer vim sur l'image .On va ensuite copier depuis notre arbo locale vers le file system deux fichiers : une ressource html et une conf ) 

boogie@satellite:/tmp/docker$ cat Dockerfile 
FROM nginx
RUN apt-get update && apt-get install -y vim
COPY testo/testo.html /var/www/
COPY testo/testo.conf /etc/nginx/conf.d/default.conf
boogie@satellite:/tmp/docker$ tree
.
├── Dockerfile
└── testo
    ├── testo.conf
    └── testo.html

- docker version

boogie@satellite:/tmp$ docker version
Client:
 Version:           18.06.1-ce
 API version:       1.38
 Go version:        go1.10.4
 Git commit:        e68fc7a
 Built:             Fri Jan 25 14:34:22 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.1-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.4
  Git commit:       e68fc7a
  Built:            Thu Jan 24 10:47:43 2019
  OS/Arch:          linux/amd64
  Experimental:     false
