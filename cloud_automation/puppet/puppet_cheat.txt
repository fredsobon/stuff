==== several cheat - memos for a puppet usage ===

= puppet debugger = 
https://github.com/nwops/puppet-debugger

= cheat = 
http://lzone.de/cheat-sheet/Puppet


=== cmds : ===

-puppet apply 
-> pour tester un manifest / code puppet : 
puppet apply fichier.pp ou path/tochemin/fichier.pp
puppet apply helloworld.pp 
puppet apply /vagrant/manifests/helloworld.pp 

- puppet ressource 
-> pour afficher la config puppet pour une ressource donnee 
puppet resource file /tmp/testfile.txt
file { '/tmp/testfile.txt':
  ensure => 'absent',
}
puppet resource user root
user { 'root':
  ensure           => 'present',
  comment          => 'root',
  gid              => '0',
  home             => '/root',
  password         => '$1$v4K9E8Wj$gZIHJ5JtQL5ZGZXeqSSsd0',
  password_max_age => '99999',
  password_min_age => '0',
  shell            => '/bin/bash',
  uid              => '0',
}


- puppet facts find

pour afficher la liste de facts dispo 


- puppet facts render 
-> afficher la liste de facts sous differents formats.

On peut sortir la liste des facts sous differents formats :
-yaml :
[vagrant@client manifests]$ facter --yaml
[vagrant@client manifests]$ puppet facts render-as-yaml
- json :
[vagrant@client manifests]$ facter --json
[vagrant@client manifests]$ puppet facts render-as-json




= variables : =

toutes les variables dans puppet commencent avec un $ et sont en minuscule ; composées de lettres, underscore ou chiffres. Elles ne commencent pas par des majuscules, des chiffres et ne comportent pas de tiret.
Attention : les variables qui commencent par un _ sont uniquement dédiées au scope local : $_myvar : sera uniquement interprete dans notre manifest local.

Les types sont classiques :
$my_name  = 'joe'  < string
$my_token = 115    < number
$not_true = false  < booleen

une variable non initialisee sera considérée comme undef on peut creer une variable avec une valeur indefinie :

$my_var = undef

Le module stlib de puppetlabs peut nous permettre de voir de quel type est notre variable :
include stdlib
$myname = 'joe'
$mytype = typeof($myname)
- Numbers :
les nombres non entourés par des " ou des '  sont de type numeric
Les nombres commencant par un 0 sont des octals et sceux commencant par 0x des hexa

- Tableaux et hash :

$mylist = [1,3,5,7]
$mytab = ['yes',5,'lapin',5.3]
$mymy =['yop',['lala',5]]

on peut definir des variables a des valeurs dans des tableaux si le nombre de variables et de valeur sont identiques :

[$myvar, $yourvar , $var] = ['lapin', 3, true]   <<<< GOOD
[$myvar, $yourvar , $var] = ['lapin', 3]         <<<<< ERROR

Certaines fonctions demandent une liste de valeur en arguments a la place d'element de tableau.On peut utiliser '*' pour convertir les elements d'un tableau en éléments séparés par une virgule avec la syntaxe de type :
$myfonction(* $array_of_args) { ..}






==  Class param , hiera by pass ..;= 

on va pouvoir overrider des params dans certains cas via hiera dans d'autres trop anciens directement dans les classes puppet

on a plusieurs astuces pour gérer ces ajustements : 

   
Dans certains cas le param a une valeur directement , il va falloir l'overrider directement :

ex 
class zookeeper::params
    {
    ...
    $jdk_package                        = 'jdk1.8.0_101.x86_64'

pour une version différente pour un node, on pourra donc setté dans le hiera notre version désirée : 


bus_dev.yaml 
---
....
zookeeper::jdk_package: "jdk1.8.0_121"
...


- hiera :

le plus simple est de passer en arguments de hiera le param a modifier qui lui devra être exposé dans puppet :

ex si on a un node kafka de dev qui doit gérer une version de jdk particulière on la set ainsi dans hiera : 

staging/dev.d/app_bus.yaml

app_bus::jdk_package: 'jdk1.8.0_121'

biensur dans puppet on aura un setting bien parametrable ex :

class app_bus(
          ...
          $jdk_package                    = $app_bus::params::jdk_package,
          $with_apm                       = $app_bus::params::with_apm,
          ...
qui correspond dans notre param.pp à 

class app_bus::params {
    ...
    $jdk_package                          = 'jdk1.8.0_65'
    ...

On voit donc qu'on a pour le setting kafka , une version de jdk settée dans les params du module, exposée dans l'init et overridé dans la partie hiera correspondant a l'env de notre server


- Dans le manifest :

par moment il n'est pas simple de recupérer une valeur et l'overrider , des situations de contournement sont envisageables :
ex ici on a de base une conf héritée ex :

     class {'m_agent':
          m_agent_monitors => $m_agent_monitors,
      }

On va donc tout d'abord se dire que si cette classe peur être optionnelle alors on va tenter de la bypasser 

    if $with_m {
      class {'m_agent':
          m_agent_monitors => $m_agent_monitors,
      }
    }

On a donc avec notre if la possibilité d'intercepter un false ou true  du coup on va exposer en parametre la valeur dans notre manifest :
class app_bus(
    ...
    $with_m                             = true

Dans notre conf hiera on va donc passer a false notre classe pour by passer l'install globale :

on va donc pouvoir dans notre yaml bypasser la conf :

app_bus::with_apm: false


    



