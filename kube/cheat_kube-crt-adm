==  cheatsheet kube : ==

=  etcd 
- pour examiner les clés enregistrées dans le cluster etcd on peut faire simplement :
kubectl exec etcd-master -n kube-system etcdctl get / --prefix -keys-only

On peut eventuellement essayer de tester le retour du contenu de etcd en cli ..en passant les bons arguments.
/var/lib/localkube/certs # etcdctl --cacert="etcd/ca.crt" --key=apiserver-etcd-client.key --cert=apiserver-et


== kubectl : 

= lancer et executer un container : 
kubectl run nginx --image nginx

= lister les pods présents : 
kubectl get pods

= lancer un container depuis une image : 

kubectl run nginx --image nginx

= detail d'un pod :

kubectl describe pods my-pod

= suppression d'un pod : 

master $ kubectl delete pods webapp
pod "webapp" deleted

= creation d'un container d'apres un fichier de definition de pod : 
master $ cat pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
  - name: redis
    image: redis

master $ kubectl apply -f pod.yaml
pod/redis created

= creation d'un container apres avoir modifier un fichier de definition de pod déja existant :

on modifie notre yaml puis on met a jour avec :

master $ kubectl apply -f pod.yaml
pod/redis configured




= execution de commande dans un pod : 

exemple on veut avoir un bash dans un pod :

kubectl exec -it  web-app-cfss --namespace=bob -- bash

[root@web-app-d856d8b54-lxq9l php-web-app]# rpm -qa |grep php
rh-php72-runtime-2.7-1.el7.x86_64


=== commandes creations / interrogation / suppression / remplacement /scaling objets kube : ==

- creation d'objet create suivi de  -f notre_def.yaml
kubectl create -f def.yaml

- recupération des infos sur ressources :
kubectl get replicaset

- suppression de ressource :
kubectl delete replicaset myapp-replicaset

- modification de ressource et prise en compte du fichier modifié :
kubectl replace -fdef.yaml

- modification d'un param à chaud sans modification  du fichier de ressource.
kubectl scale --replicas=6 -f def.yaml

