==  cheatsheet kube : ==

=  etcd 
- pour examiner les clés enregistrées dans le cluster etcd on peut faire simplement :
kubectl exec etcd-master -n kube-system etcdctl get / --prefix -keys-only

On peut eventuellement essayer de tester le retour du contenu de etcd en cli ..en passant les bons arguments.
/var/lib/localkube/certs # etcdctl --cacert="etcd/ca.crt" --key=apiserver-etcd-client.key --cert=apiserver-et


== kubectl : 

= lancer et executer un container : 
kubectl run nginx --image nginx

= lister les pods présents : 
kubectl get pods

= lister les pods dont un label est fixé dans la définition du pod avec l'option --selector :
ici on cherche les pods ayant un label app=app1

kubectl get pods --selector app=app1

on peut cumuler les différents filtres : 

kubectl get all --selector env=prod,bu=finance,tier=frontend
NAME              READY     STATUS    RESTARTS   AGE
pod/app-1-zzxdf   1/1       Running   0          3m



= lister les services / replicaset ...tous les objects :

kubectl get services
kubectl get replicasets
kubectl get all 


= lancer un container depuis une image : 

kubectl run nginx --image nginx

= detail d'un pod :

kubectl describe pods my-pod

= suppression d'un pod : 

master $ kubectl delete pods webapp
pod "webapp" deleted


il est possible que le pod se supprime mal et qu'on doivent forcé le delete :

kubectl delete pod kube-dns-zzeerrtt  --grace-period=0 --force --namespace=kube-system


= creation d'un container d'apres un fichier de definition de pod : 
master $ cat pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
  - name: redis
    image: redis

master $ kubectl apply -f pod.yaml
pod/redis created

= creation d'un container apres avoir modifier un fichier de definition de pod déja existant :

on modifie notre yaml puis on met a jour avec :

master $ kubectl apply -f pod.yaml
pod/redis configured


= execution de commande dans un pod : 

exemple on veut avoir un bash dans un pod :

kubectl exec -it  web-app-cfss --namespace=bob -- bash

[root@web-app-d856d8b54-lxq9l php-web-app]# rpm -qa |grep php
rh-php72-runtime-2.7-1.el7.x86_64


=== replicaset : commandes creations / interrogation / suppression / remplacement /scaling objets kube : ==

- creation d'objet create suivi de  -f notre_def.yaml
kubectl create -f def.yaml

- recupération des infos sur ressources :
kubectl get replicaset

- suppression de ressource :
kubectl delete replicaset myapp-replicaset

- modification de ressource et prise en compte du fichier modifié :
kubectl replace -fdef.yaml

- modification d'un param à chaud sans modification  du fichier de ressource.
kubectl scale --replicas=6 -f def.yaml

- edition d'un fichier objet kube :
kubectl edit <objet> nom_objet 
kubectl edit replicatset my_rc


= deployment commandes : base : 

kubectl create -f my_deployment.yaml

on verifie la creation : 
kubectl get deployments

le deployment crée automatiquement le replicaset 
kubectl get replicaset

et les pods sont aussi crées automatiquement :
kubectl get pods

on peut voir la création globale de nos objets avec :
kubectl get all 



= namespace : 

-creation :
kubectl create namespace -f myapp-namespace.yaml

ou a la volée :

kubectl create namespace  dev

- reccup d'info depuis un namesapce particulier : 
kubectl get pods --namespace="notre_namespace"

- Switching de namespace :

on va pouvoir pour plus de facilité quand on travaille longtemps sur un namespace le définir par défaut : de maniere a ne pas devoir systematiqueme ntutiliser le flag : --namespace

kubectl config set-context $(kubectl config current-context) --namespace=dev

kubectl config current-context > recupére les infos de contexte actuel
puis kubectl config set-context $(kubectl config current-context) --namespace=dev .;reconfigure notre contexte actuel en dev par default.


pour voir tous les pods de tous les namespaces :

kubectl get pods --all-namespaces 



= events / logs :

- events :
on va pouvoir examiner les events liés à un namespace :
ex: examiner les events du namespace courant :

kubectl get events

- logs : 

on va egalement pouvoir examiner les logs :
ex: ecaminer les logs d'un scheduleur dans le namespace kube-system :
kubectl logs custom-scheduler --namespace=kube-system


= rollout / rollback : 

- rollout status 

On peut voir le status de notre rollout avec :
kubectl rollout status deployment/my-app-deploy

- rollout history 
on peut voir l'historique de nos déployments avec :
kubectl rollout history deployment/my-app-deploy

