==== helm sheetcheat : ===

- install :

-> helm2 :
$ wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz
$ tar xfvz helm-v2.13.0-linux-amd64.tar.gz
$ sudo cp helm /usr/local/bin/helm
$ helm

tiller : appli server : nécésscite des droits au niveau cluster : on créer un service account et on lui occtroi les droits nécéssaires :


apiVersion: v1
kind: ServiceAccount
metadata:
name: tiller
namespace: kube-system

kubectl apply -f tiller-account.yaml

kind: ClusterRoleBinding
metadata:
name: tiller-cluster-rule
roleRef:
apiGroup: rbac.authorization.k8s.io
kind: ClusterRole
name: cluster-admin
subjects:
- kind: ServiceAccount
name: tiller
namespace: kube-system

kubectl apply -f role-binding.yaml

initialisation de tiller : 
helm init --service-account tiller


- suppression de tiller (helm 2) 

helm reset


- Recherche de package (chart en language helm) :

$ helm search wordpress

Dans le jargon de Helm, on parle d’un chart pour désigner un paquet.
Ci­dessous le résultat tronqué de cette commande :

NAME CHART VERSION APP VERSION DESCRIPTION
contrib/wordpress 5.2.5 5.1.0 Web publishing ...
stable/wordpress 5.2.5 5.1.0 Web publishing ...

Cette sortie remonte plusieurs informations :
->  le nom des packages préfixé par le nom du dépôt associé,
->  la version du package,
->  la version du logiciel présent dans le package,
->  une description du chart helm.

- Mise à jour des repos ( informations situées dans ~/.helm ) 

$ helm repo upodate

- Installation d'un package :

l’installation d’un package avec Helm se fait avec la commande helm suivie des options suivantes :
->  le verbe install 
->  le nom du paquet/chart à installer ( stable/wordpress ).


$ helm install stable/wordpress


Dans le cas de Helm 3, il est nécessaire de spécifier un nom avec l’option
--name pour le chart :
$ helm install stable/wordpress --name my-wordpress-chart


/!\ : bonne pratique d'install :

->  utilisation d’un namespace adéquat,
->  utilisation d’un nom cohérent.( un nom random est sinon utilisé.) 

ex: 
$ kubectl create namespace intranet
$ helm install stable/wordpress --name wordpress-compta --namespace intranet

- upgrade de chart installé :

$ helm upgrade wordpress-compta stable/wordpress --namespace intranet

/!\ Attention cette commande aura un comportement différent en fonction de l'etat du systeme ( chart deja installé, ou install initiale via cette commande). Il pourrait être judicieux d'utiliser une commande qui gère toujours de manière identique le setup de l'appli :

$ helm upgrade --install wordpress-compta stable/wordpress --namespace intranet


- Listing des charts installés :

$ helm ls

Et ci­dessous le résultat tronqué de cette commande :

NAME REVISION UPDATE STATUS CHART
elevated-snail 1 Sat ... DEPLOYED wordpress-x ...
...
wordpress-compta 1 Sat ... DEPLOYED wordpress-x ...
Il s’agit d’un tableau qui va contenir un certain nombre d’informations :
> NAME : nom du chart.
> REVISION : numéro de révision du chart déployé (ex. : 1, 2...).
> UPDATE : date de la dernière mise à jour.
> STATUS : statut du chart (ex. : DEPLOYED, FAILED).
> CHART : chart déployé avec sa version (ex. : wordpress­5.2.0).
> APP VERSION : version de l’application déployée (ex. : 5.1.0).
> NAMESPACE : namespace dans lequel est déployé le chart.

- Suppression d'un deploiement :

Il peut être nécéssaire de supprimer le déploiement d'une appli déployée plusieurs fois : on peut préciser le nom de l'appli cible que l'on veut delete :

$ helm delete elevated-snail

- Annulation de la suppression :

$ helm ls --all
Ci­dessous le résultat tronqué de cette commande :
NAME REVISION UPDATE STATUS CHART
elevated-snail 1 Sat ... DELETED wordpress-x ...
...
wordpress-compta 1 Sat ... DEPLOYED wordpress-x ...
Helm a bien supprimé les éléments dans le cluster Kubernetes, mais garde une trace du package.

En réalité, il reste un type d’objet : les volumes persistants qui ont été créés à l’aide d’un StatefulSet. C’est ici le cas
avec la base de données MariaDB. Ce comportement est normal du fait que le volume persistant n’est pas un objet
créé par Helm.
Il est possible de revenir en arrière en utilisant la commande
>l’option
> le nom du package ( elevated-snail ),
> un numéro de révision (ici la seule version disponible : 1).
helm suivie des options suivantes :

rollback ,
Ci­dessous la commande complète :

$ helm rollback elevated-snail 1

- Purge d'un chart :

pour supprimer definitivement un chart :

$ helm delete elevated-snail --purge

- Configuration d'un helm chart :

-> consultation des options de chart :

$ helm inspect stable/wordpress

La sortie est tres verbeuse : Une alternative est de se rendre sur le site GitHub contenant la référence de ces charts.
Dans notre cas par ex : https://github.com/helm/charts/tree/master/stable

On peut donc etudier les options de configuration de publication 
ex : pour wordpress et utilisation sur minikube :

Une partie de l’aide évoque la manière de gérer la configuration Ingress et particulièrement les options suivantes :
>  l ingress.enabled : booléen permettant d’activer les ressources Ingress.
>  ingress.hosts[0].name : champ permettant de donner le nom du site web exposé sur l’extérieur (ex. :wordpress­compta.intranet.example.com).
L’URL du site de WordPress sera stockée dans la variable d’environnement 
WORDPRESS_URL .
Avec Minikube, l’adresse IP de la machine se récupère à l’aide de la commande
minikube ip .

Ci­dessous un exemple d’assignation de la valeur pour un déploiement sur Minikube combiné avec nip.io :
$ export WORDPRESS_URL=wordpress.compta.$(minikube ip).nip.io



- upgrade : 

on va pouvoir updater notre chart suite a une modif par exemple dans le value d'une arbo : 
helm  upgrade MY_APP  -f helm_vars/ENV/values.yaml .
ex: 
helm  upgrade authent -f helm_vars/production/values.yaml .

