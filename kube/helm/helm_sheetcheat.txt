=== cheatsheet helm : ===

= setup :
on dowload la version qui nous interresse : 
https://github.com/helm/helm/releases
ex: 
on decompresse puis on place le binaire dans le path désiré :
tar -zxvf helm-v3.0.0-linux-amd64.tar.gz
mv linux-amd64/helm /usr/local/bin/helm
on test : 
helm help

= search :
recherche de charts : 

helm search repo
helm search hub wordpress


= repo : 

- ajout de repo :

helm repo add repo 
$ helm repo add brigade https://brigadecore.github.io/charts
"brigade" has been added to your repositories

$ helm search repo brigade
NAME                        	CHART VERSION	APP VERSION	DESCRIPTION
brigade/brigade             	1.3.2        	v1.2.1     	Brigade provides event-driven scripting of Kube...
brigade/brigade-github-app  	0.4.1        	v0.2.1     	The Brigade GitHub App, an advanced gateway for...
....

$ helm repo list

- update :
pour mettre à jour nos repos :

helm repo update

- suppression de repo :

helm repo remove 


- Update des dépendance de repos ( chart umbrella )

on va pouvoir installer / mettre à jour un chart qui dépend d'autres charts quand on a un chart umbrella et donc une section dependancies dans notre fichier Chart.yaml :

helm dependency update




= install :

helm install va nous permettre d'installer un chart : en lui donnant le nom d'une release et en précisant le chart qu'on veut installer 

$ helm install happy-panda stable/mariadb
Fetched stable/mariadb-0.3.0 to /Users/mattbutcher/Code/Go/src/helm.sh/helm/mariadb-0.3.0.tgz
happy-panda
Last Deployed: Wed Sep 28 12:32:28 2016
Namespace: default
Status: DEPLOYED

- On peut installer une archive locale : 
helm install foo foo-0.1.1.tgz

- On peut installer un rep de chart décompressé : 
helm install foo path/to/foo

-On peut installer un chart en donnant le path de notre url : 
helm install foo https://example.com/charts/foo-1.2.3.tgz


= status d'une install :

helm status happy-panda
Last Deployed: Wed Sep 28 12:32:28 2016
Namespace: default
Status: DEPLOYED

= Examen des valeurs overriable dans notre chart :
on va pouvoir examiner toutes les valeurs que l'on va pouvoir personaliser dans notre chart.

helm show values

on peut overrider par exemple nos valeurs dans un fichier qu'on passe en conf :
ex : 
$ echo '{mariadbUser: user0, mariadbDatabase: user0db}' > config.yaml
$ helm install -f config.yaml stable/mariadb --generate-name

on peut overrider de deux manieres :
- -f : on injecte nos données dans un fichier de conf en yaml
- --set : on va overrider en cli :
ex : 
--set name=value
--set a=b,c=d  : plusieurs données séparées par des ,

--set outer.inner=value  : on chaine les valeurs d'un hash 
ex : 
outer:
  inner: value

--set name={a, b, c} : on peut overrider une liste :
ex :
name:
  - a
  - b
  - c

--set servers[0].port=80  : on parse le tableau :

servers:
  - port: 80

--set servers[0].port=80,servers[0].host=example : valeurs multiples 

servers:
  - port: 80
    host: example

--set name=value1\,value2 : on protoge des caractères si besoin 
ex: 
name: "value1,value2"    



= recup en local d'un chart : 

on peut dowload un chart en local :
$helm pull bob/mysql 
$ls
mysql-5.7.7.tgz



= upgrade :

- bien sur on va pouvoir tester avant de déployer le rendu avec un dry-run : 

ex :
helm upgrade harbor-1st-release --dry-run --debug harbor/ -f harbor/helm_vars/dev/values.yaml

on va pouvoir mettre a jour notre charts :
un nouveau fichier yaml contenant : 
mariadbUser: user1

$ helm upgrade -f panda.yaml happy-panda stable/mariadb

Fetched stable/mariadb-0.3.0.tgz to /Users/mattbutcher/Code/Go/src/helm.sh/helm/mariadb-0.3.0.tgz
happy-panda has been upgraded. Happy Helming!
Last Deployed: Wed Sep 28 12:47:54 2016
Namespace: default

On peut voir les valeurs modifiées de notre chart avec : 
helm get values happy-panda
mariadbUser: user1


= rollback :

si on a un souci dans notre appli on peut rollback :
helm rollback release  num_version_voulue
helm rollback happy-panda 1

= numero de version : 

On peut voir les num de version avec :
helm history release

= Desinstallation de release :

$ helm uninstall happy-panda

Si on veut conserver un historique :
helm uninstall --keep-history

= creation de chart : 

- creation :

$ helm create bob-workflow
Creating bob-workflow

on a donc maintenant un chart  ./bob-workflow qu'on peut modifier et dont on peut travailler les templates. 

- lint :
une fois qu'on a modifier nos charts on peut faire un check avec :
helm lint .

on peut linter plusieurs fichiers pour s'assurer de la syntaxe : 

helm lint -f values.yaml -f helm_vars/integration/values.yaml


- packaging :
quand tout sera ok on pourra packager notre chart :
$ helm package bob-workflow
bob-workflow-0.1.0.tgz

et donc installer notre chart :
$ helm install bob-workflow ./bob-workflow-0.1.0.tgz


- debug et dry run :

on peut tester en dry-run l'installation d'un chart qui générera la sortie de nos templates pour vérifier les valeurs recues et le résulat final sans installer : 

helm install --debug --dry-run lapin-nain ./mychart 

install.go:158: [debug] Original chart version: ""
install.go:175: [debug] CHART PATH: /home/boogie/Documents/lab/helm/mychart

NAME: lapin-nain
LAST DEPLOYED: Fri Apr  3 14:08:21 2020
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
affinity: {}
fullnameOverride: ""
image:
  pullPolicy: IfNotPresent
  repository: nginx
imagePullSecrets: []
ingress:
  annotations: {}
  enabled: false
  hosts:
  - host: chart-example.local
    paths: []
  tls: []
nameOverride: ""
nodeSelector: {}
podSecurityContext: {}
replicaCount: 1
resources: {}
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name: null
tolerations: []

HOOKS:
MANIFEST:
---
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lapin-nain-configmap
data:
  myvalue: "hello world!"

