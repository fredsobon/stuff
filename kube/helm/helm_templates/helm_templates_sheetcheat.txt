=== notes memo helm template : ===

= génération du template à la volée apres une conf : permet de tester le bon fonctionnement de notre code avant de  déployer :

on applique pas la conf mais on voit le résultat du template généré 

helm template mysql-test --debug  . -f values.yaml -f helm_vars/prod/values.yaml

== loop : ==

= boucler sur un tableau de valeur :

ex: on a dans notre fichiervalues.yaml
...
Targets:
  - 192.168.0.7
  - 192.168.0.8
  - 192.168.0.9
..
On va pouvoir boucler dans notre template :
..
    - targets:
      {{- range $target := .Values.proxmoxTargets }}
      - {{ $target }}
      {{- end }}

on aura bien notre tpl généré : 
..
   - targets:
     - 192.168.0.7
     - 192.168.0.8
     - 192.168.0.9
..  

= boucler sur un tableau de hash :

on va vouloir bloucler sur un tableau contenant des hash :
ex: dans notre fichier values: 
  nodeTarget:
    - ip: 192.168.0.7
    - ip: 192.168.0.8
    - ip: 192.168.0.9

pour pouvoir générer notre object kube correctement on va devoir passer par une double assignation de variable : 

- addresses:
    {{- range $key, $value := .Values.nodeTarget }}
    {{- range $ip, $addr := $value }}
    - {{ $ip }}: {{ $addr }}
    {{- end }}
    {{- end }}
  ports:

    
on aura en sortie de template :
..
- addresses:
    - ip: 192.168.0.7
    - ip: 192.168.0.7
    - ip: 192.168.0.7
  ports:
...

== fonctions : ==

- keys :  on va pouvoir récupérer les clés d'un dictionnaire :

ex : dans notre fichier values : 
bob:
  yop: lapin
  yap: lapi

dans notre template on va utiliser la fonction keys pour récupérer les clés contenues dans une variable établie auparavant : 

apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-configmap
data:
  dico:
    {{ $dic := .Values.bob }}
    {{ keys  $dic }}

ce qui nous donne en resultat : 
 helm template .
---
# Source: babar/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-configmap
data:
  dico:

    [yap yop]

