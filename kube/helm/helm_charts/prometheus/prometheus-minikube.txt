=== notes prometheus sur minikube : ===

minikube start --memory=4096                                                                                                      [‚ò∏ |N/A:default]
üòÑ  minikube v1.9.2 on Ubuntu 20.04
‚ú®  Using the kvm2 driver based on user configuration
üëç  Starting control plane node m01 in cluster minikube
üî•  Creating kvm2 VM (CPUs=2, Memory=4096MB, Disk=20000MB) ...
üê≥  Preparing Kubernetes v1.18.0 on Docker 19.03.8 ...
üåü  Enabling addons: default-storageclass, storage-provisioner
üèÑ  Done! kubectl is now configured to use "minikube"

1/ on recupere en local le chart prometheus :

helm pull stable/prometheus-operator

2/ creation de namespace et install du chart : 
 boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ kctl create ns prom                                                                                                          [‚ò∏ |minikube:default]
namespace/prom created

helm install -n prom monitor prometheus-operator -f prometheus-operator.yaml                                                 [‚ò∏ |minikube:default]
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-instal"
NAME: monitor
LAST DEPLOYED: Tue Apr 28 20:23:44 2020
NAMESPACE: prom
STATUS: deployed
REVISION: 1
NOTES:
The Prometheus Operator has been installed. Check its status by running:
  kubectl --namespace prom get pods -l "release=monitor"

Visit https://github.com/coreos/prometheus-operator for instructions on how
to create & configure Alertmanager and Prometheus instances using the Operator.



3/ on va d√©finir des valeurs dans notre arbo pour overrider la conf et faire nos settings : 

on examine la lecture du charts et des options 
pour pouvoir acceder au differentes apps ( prometheus, alertmanager, grafana) : on va d√©finir des services de type externalIPs.

on va examiner les ip pr√©sentes sur notre minikube et en prendre une diff√©rente de la sortie de minikube ip pour garder l'ip de managment minikube dans notre cas : 
 minikube ip
192.168.39.114


' _ ` _ `\| |/' _ `\| || , <  ( ) ( )| '_`\  /'__`\
| ( ) ( ) || || ( ) || || |\`\ | (_) || |_) )(  ___/
(_) (_) (_)(_)(_) (_)(_)(_) (_)`\___/'(_,__/'`\____)

$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 5c:69:3c:d1:37:ff brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.170/24 brd 192.168.122.255 scope global dynamic eth0
       valid_lft 2884sec preferred_lft 2884sec
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether fc:6f:5e:8d:60:de brd ff:ff:ff:ff:ff:ff
    inet 192.168.39.114/24 brd 192.168.39.255 scope global dynamic eth1
       valid_lft 2884sec preferred_lft 2884sec



cat ../prometheus-operator.yaml                                                                             [‚ò∏ |minikube:prom]
prometheus:
  service:
    externalIPs: 
    - 192.168.122.170

alertmanager:
 ingress:
   enabled: true
   annotations:
     kubernetes.io/ingress.class: nginx
   hosts:
   - "alertmanager.boogie7.net"
 service:
   externalIPs:
   - 192.168.122.170

grafana:
  persistence:
    enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - "grafana.boogie7.net"
  service:
    externalIPs: 
    - 192.168.122.170
coreDns:
  enabled: true

kubeDns:
  enabled: false



Une fois que c'est install√© :
helm upgrade monitor . -f ../prometheus-operator.yaml


on va examiner les services qui tournent : 

kctl get svc                                                                                                [‚ò∏ |minikube:prom]
NAME                                      TYPE        CLUSTER-IP       EXTERNAL-IP       PORT(S)                      AGE
alertmanager-operated                     ClusterIP   None             <none>            9093/TCP,9094/TCP,9094/UDP   47h
monitor-grafana                           ClusterIP   10.103.213.36    192.168.122.170   80/TCP                       47h
monitor-kube-state-metrics                ClusterIP   10.102.31.123    <none>            8080/TCP                     47h
monitor-prometheus-node-exporter          ClusterIP   10.105.53.132    <none>            9100/TCP                     47h
monitor-prometheus-operato-alertmanager   ClusterIP   10.109.71.132    192.168.122.170   9093/TCP                     47h
monitor-prometheus-operato-operator       ClusterIP   10.106.182.128   <none>            8080/TCP,443/TCP             47h
monitor-prometheus-operato-prometheus     ClusterIP   10.107.29.15     192.168.122.170   9090/TCP                     8m19s
prometheus-operated                       ClusterIP   None             <none>            9090/TCP                     47h


on pourra donc dans un navigateur atteindre respectivement : grafana , prometheus et alertmanager : 
192.168.122.170:3000
192.168.122.170:9090
192.168.122.170:9093

- info de login pour acceder au dashboard de grafana :
username: admin
# password: prom-operator
http://localhost:3000/


=== Methode annexe d'acces externe : 
on peut d√©cider de d√©finir des  services de type loadbalancer dans notre conf 

on va qu'on a un service de type loadbalancer de cr√©er avec une ip cluster ip mais une ip EXTERNAL-IP toujours en pending : c'est normal dans notre cas aucun √©l√©ment ne peut d√©clencher l'attribution de l'ip externe (on pourrait passer par metallb ou autre ) mais dans minikube cela reste sommaire pour des tests.

On va donc pour atteindre le service depuis notre pc ajouter une route permettant de joindre l'ip de notre service via l'interface de notre minikube :
minikube ip                                                                                                                     [‚ò∏ |minikube:prom]
192.168.39.114

On ajoute notre route en local :
sudo ip r a 10.97.152.3  via 192.168.39.114 

et depuis notre navigateur en local on peut donc atteindre : 
curl  http://10.97.152.3:9090/graph

Il est sinon possible d'atteindre le service via l'interface de l'ip de minikube suivie par le port attribu√© que l'on voit dans la ligne Loadbalancer des services : 
On a un node port atteignable .

curl http://192.168.39.114:30437/graph


