=== notes prometheus sur minikube : ===

minikube start --memory=4096                                                                                                      [‚ò∏ |N/A:default]
üòÑ  minikube v1.9.2 on Ubuntu 20.04
‚ú®  Using the kvm2 driver based on user configuration
üëç  Starting control plane node m01 in cluster minikube
üî•  Creating kvm2 VM (CPUs=2, Memory=4096MB, Disk=20000MB) ...
üê≥  Preparing Kubernetes v1.18.0 on Docker 19.03.8 ...
üåü  Enabling addons: default-seorageclass, storage-provisioner
üèÑ  Done! kubectl is now configured to use "minikube"

1/ on recupere en local le chart prometheus :

helm pull stable/prometheus-operator

2/ creation de namespace et install du chart : 
 boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ kctl create ns prom                                                                                                          [‚ò∏ |minikube:default]
namespace/prom created

helm install -n prom monitor prometheus-operator -f prometheus-operator.yaml                                                 [‚ò∏ |minikube:default]
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-instal"
NAME: monitor
LAST DEPLOYED: Tue Apr 28 20:23:44 2020
NAMESPACE: prom
STATUS: deployed
REVISION: 1
NOTES:
The Prometheus Operator has been installed. Check its status by running:
  kubectl --namespace prom get pods -l "release=monitor"

Visit https://github.com/coreos/prometheus-operator for instructions on how
to create & configure Alertmanager and Prometheus instances using the Operator.



3/ on va d√©finir des valeurs dans notre arbo pour overrider la conf et faire nos settings : 

on examine la lecture du charts et des options 
pour pouvoir acceder au differentes apps ( prometheus, alertmanager, grafana) : on va d√©finir des services de type externalIPs.

on va examiner les ip pr√©sentes sur notre minikube et en prendre une diff√©rente de la sortie de minikube ip pour garder l'ip de managment minikube dans notre cas : 
 minikube ip
192.168.39.114


' _ ` _ `\| |/' _ `\| || , <  ( ) ( )| '_`\  /'__`\
| ( ) ( ) || || ( ) || || |\`\ | (_) || |_) )(  ___/
(_) (_) (_)(_)(_) (_)(_)(_) (_)`\___/'(_,__/'`\____)

$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 5c:69:3c:d1:37:ff brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.170/24 brd 192.168.122.255 scope global dynamic eth0
       valid_lft 2884sec preferred_lft 2884sec
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether fc:6f:5e:8d:60:de brd ff:ff:ff:ff:ff:ff
    inet 192.168.39.114/24 brd 192.168.39.255 scope global dynamic eth1
       valid_lft 2884sec preferred_lft 2884sec


On va donc definir des valeurs dans notre chart qui vont nous permettre d'acceder aux ressources en dehors du cluster.

On doit pour s'assurer d'avoir un comportement correct d'avoir installer un ingress controller dans notre minikube : c'est lui qui va nous servir de reverse proxy et permettre d'atteindre les points d'entr√©es qui seront eux meme redirig√©s en fonction de l'url appell√©es sur le service d√©di√© redirigeant vers le pod h√©bergeant l'appli 

minikube addons enable ingress

on verifie que l'ingress controller est bien up : 

 kctl get pod --all-namespaces |grep ingress
kube-system   nginx-ingress-controller-6d57c87cb9-g9xcj                1/1     Running   0          59m

on renseigne nos valeurs dans le fichier de notre chart et on examine les modif effectu√©es en cons√©quence dans les manifests :  

cat prometheus-operator.yaml
prometheus:
 ingress:
   enabled: true
   annotations:
     kubernetes.io/ingress.class: nginx
   hosts:
   - "prometheus.boogie7.net"    <<<< on va donc ici definir notre point d'entr√©e dans l'ingress qui redirigera vers le service prometheus et le pod 
 service:
   externalIPs:
   - 192.168.122.149

on voit en examinant la ressource ingress cr√©ee qu'elle redirige vers le service dedi√© prometheus qui lui va renvoyer vers le / les pods h√©bergant l'appli :

kctl get  ing monitor-prometheus-operato-prometheus -o yaml
..
spec:
  rules:
  - host: prometheus.boogie7.net
    http:
      paths:
      - backend:
          serviceName: monitor-prometheus-operato-prometheus
          servicePort: 9090
        path: /
        pathType: ImplementationSpecific
status:
  loadBalancer:
    ingress:
    - ip: 192.168.39.214
..

kctl get svc monitor-prometheus-operato-prometheus -o yaml
..

spec:
  clusterIP: 10.109.204.228
  externalIPs:
  - 192.168.122.149
  ports:
  - name: web
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: prometheus
    prometheus: monitor-prometheus-operato-prometheus
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

..

on a donc le cheminement global de l'ingress au pod en passant par la redirection vers le bon service
on repete la m√™me chose pour nos autres composants alertmanager et grafana 

alertmanager:
 ingress:
   enabled: true
   annotations:
     kubernetes.io/ingress.class: nginx
   hosts:
   - "alertmanager.boogie7.net"
 service:
   externalIPs:
   - 192.168.122.149

grafana:
  persistence:
    enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - "grafana.boogie7.net"
  service:
    externalIPs:
    - 192.168.122.149
coreDns:
  enabled: true

kubeDns:
  enabled: false

Une fois que c'est configur√© on lance l'upgrade : 
cat prometheus-operator.yaml 
prometheus:
 ingress:
   enabled: true
   annotations:
     kubernetes.io/ingress.class: nginx
   hosts:
   - "prometheus.boogie7.net"
 service:
   externalIPs: 
   - 192.168.122.149

alertmanager:
 ingress:
   enabled: true
   annotations:
     kubernetes.io/ingress.class: nginx
   hosts:
   - "alertmanager.boogie7.net"
 service:
   externalIPs:
   - 192.168.122.149

grafana:
  persistence:
    enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - "grafana.boogie7.net"
  service:
    externalIPs: 
    - 192.168.122.149
coreDns:
  enabled: true

kubeDns:
  enabled: false


helm upgrade monitor . -f ../prometheus-operator.yaml

on va donc rensigner dans notre fichier hosts les entr√©es de nos apps : 
192.168.122.149 grafana.boogie7.net
192.168.122.149 alertmanager.boogie7.net
192.168.122.149 prometheus.boogie7.net

et un curl de chacune des ressource r√©pond correctement sans avoir a sp√©cifier le moindre num de port :
 ‚úò boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ curl -I  grafana.boogie7.net
HTTP/1.1 302 Found
Server: openresty/1.15.8.2
Date: Fri, 15 May 2020 14:21:06 GMT
Content-Type: text/html; charset=utf-8
Connection: keep-alive
Cache-Control: no-cache
Expires: -1
Location: /login
Pragma: no-cache
Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax
X-Frame-Options: deny

 boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ curl -I  alertmanager.boogie7.net
HTTP/1.1 405 Method Not Allowed
Server: openresty/1.15.8.2
Date: Fri, 15 May 2020 14:21:14 GMT
Content-Type: text/plain; charset=utf-8
Content-Length: 19
Connection: keep-alive
Allow: GET, OPTIONS
X-Content-Type-Options: nosniff

 boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ curl -I  prometheus.boogie7.net
HTTP/1.1 405 Method Not Allowed
Server: openresty/1.15.8.2
Date: Fri, 15 May 2020 14:21:25 GMT
Content-Type: text/plain; charset=utf-8
Content-Length: 19
Connection: keep-alive
Allow: GET, OPTIONS
X-Content-Type-Options: nosniff


on va examiner les services qui tournent : 

 boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ kctl get ing          [‚ò∏ |minikube:prom]
NAME                                      CLASS    HOSTS                      ADDRESS          PORTS   AGE
monitor-grafana                           <none>   grafana.boogie7.net        192.168.39.214   80      62m
monitor-prometheus-operato-alertmanager   <none>   alertmanager.boogie7.net   192.168.39.214   80      62m
monitor-prometheus-operato-prometheus     <none>   prometheus.boogie7.net     192.168.39.214   80      50m
 boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ kctl get svc          [‚ò∏ |minikube:prom]
NAME                                      TYPE        CLUSTER-IP       EXTERNAL-IP       PORT(S)                      AGE
alertmanager-operated                     ClusterIP   None             <none>            9093/TCP,9094/TCP,9094/UDP   62m
monitor-grafana                           ClusterIP   10.109.221.5     192.168.122.149   80/TCP                       62m
monitor-kube-state-metrics                ClusterIP   10.97.186.49     <none>            8080/TCP                     62m
monitor-prometheus-node-exporter          ClusterIP   10.104.233.183   <none>            9100/TCP                     62m
monitor-prometheus-operato-alertmanager   ClusterIP   10.103.211.214   192.168.122.149   9093/TCP                     62m
monitor-prometheus-operato-operator       ClusterIP   10.98.121.5      <none>            8080/TCP,443/TCP             62m
monitor-prometheus-operato-prometheus     ClusterIP   10.109.204.228   192.168.122.149   9090/TCP                     62m
prometheus-operated                       ClusterIP   None             <none>            9090/TCP                     62m
 boogie@boogieland ÓÇ∞ ~/Documents/lab/prometheus/minikube_prom ÓÇ∞ kctl get pod          [‚ò∏ |minikube:prom]
NAME                                                     READY   STATUS    RESTARTS   AGE
alertmanager-monitor-prometheus-operato-alertmanager-0   2/2     Running   0          62m
monitor-grafana-857c4b68b4-ss5jm                         2/2     Running   0          62m
monitor-kube-state-metrics-587c68f878-w5k6j              1/1     Running   0          62m
monitor-prometheus-node-exporter-25brj                   1/1     Running   0          62m
monitor-prometheus-operato-operator-7dfc4bd9b4-flrzw     2/2     Running   0          62m
prometheus-monitor-prometheus-operato-prometheus-0       3/3     Running   1          50m


=  info de login pour acceder au dashboard de grafana :
username: admin
# password: prom-operator
http://localhost:3000/




=== Methode annexe d'acces externe : 
on peut d√©cider de d√©finir des  services de type loadbalancer dans notre conf 

on va qu'on a un service de type loadbalancer de cr√©er avec une ip cluster ip mais une ip EXTERNAL-IP toujours en pending : c'est normal dans notre cas aucun √©l√©ment ne peut d√©clencher l'attribution de l'ip externe (on pourrait passer par metallb ou autre ) mais dans minikube cela reste sommaire pour des tests.

On va donc pour atteindre le service depuis notre pc ajouter une route permettant de joindre l'ip de notre service via l'interface de notre minikube :
minikube ip                                                                                                                     [‚ò∏ |minikube:prom]
192.168.39.114

On ajoute notre route en local :
sudo ip r a 10.97.152.3  via 192.168.39.114 

et depuis notre navigateur en local on peut donc atteindre : 
curl  http://10.97.152.3:9090/graph

Il est sinon possible d'atteindre le service via l'interface de l'ip de minikube suivie par le port attribu√© que l'on voit dans la ligne Loadbalancer des services : 
On a un node port atteignable .

curl http://192.168.39.114:30437/graph


