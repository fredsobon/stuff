== notes prometheus kube ==


= mise a jour repo avant install via helm :
helm repo up

= install brute dans un premier temps sur un cluster quasi vide : 
helm install monitoring stable/prometheus-operator

helm ls                                                    (⎈ b-k:monitoring)
NAME      	NAMESPACE 	REVISION	UPDATED                                 	STATUS  	CHART                     	APP VERSION
monitoring	monitoring	1       	2020-06-13 18:05:06.382195114 +0200 CEST	deployed	prometheus-operator-8.14.0	0.38.1

= test de base :

on va utiliser kubectl port-forward pour examiner via un tunnel créer en tre notre cluster et notre laptop la bonne installation de prometheus :
on va examiner les pods identifier celui de prometheus :
 kctl get all                                               (⎈ b-k:monitoring)
NAME                                                         READY   STATUS    RESTARTS   AGE
pod/alertmanager-monitoring-prometheus-oper-alertmanager-0   2/2     Running   0          3m21s
pod/monitoring-grafana-9b57b76bd-vzq5m                       2/2     Running   0          3m37s
pod/monitoring-kube-state-metrics-8679d78f6f-fdtlf           1/1     Running   0          3m37s
pod/monitoring-prometheus-node-exporter-8bmhq                1/1     Running   0          3m37s
pod/monitoring-prometheus-node-exporter-bpkcw                1/1     Running   0          3m37s
pod/monitoring-prometheus-node-exporter-sfsbp                1/1     Running   0          3m37s
pod/monitoring-prometheus-oper-operator-885477745-4pgvh      2/2     Running   0          3m37s
pod/prometheus-monitoring-prometheus-oper-prometheus-0       3/3     Running   1          3m10s


on cherche maintenant dans les services le port utilisé pour rediriger vers le pod prometheus :
..
NAME                                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
service/alertmanager-operated                     ClusterIP   None             <none>        9093/TCP,9094/TCP,9094/UDP   3m21s
service/monitoring-grafana                        ClusterIP   10.111.103.232   <none>        80/TCP                       3m37s
service/monitoring-kube-state-metrics             ClusterIP   10.104.46.201    <none>        8080/TCP                     3m37s
service/monitoring-prometheus-node-exporter       ClusterIP   10.97.201.199    <none>        9100/TCP                     3m38s
service/monitoring-prometheus-oper-alertmanager   ClusterIP   10.99.230.203    <none>        9093/TCP                     3m38s
service/monitoring-prometheus-oper-operator       ClusterIP   10.100.230.164   <none>        8080/TCP,443/TCP             3m37s
service/monitoring-prometheus-oper-prometheus     ClusterIP   10.107.189.2     <none>        9090/TCP                     3m38s
service/prometheus-operated                       ClusterIP   None             <none>        9090/TCP                     3m10s
..
on utilise port-forward vers le pod et le port du service et un port chois pour consulter sur notre laptop :

kubectl port-forward prometheus-monitoring-prometheus-oper-prometheus-0 9090:9090

on ouvre un navigateur et on voit sans souci notre instance prometheus : 
http://localhost:9090/graph


on va faire la même chose pour grafana :
on va examiner le pod et le service : c'est le port 3000 qui est utilisé 


ex: k9s sur service monitoring grafana : 
┌───────────────────────────────────────────────────── Describe(monitoring/monitoring-grafana) ──────────────────────────────────────────────────────┐
│Name:              monitoring-grafana                                                                                                               │
│Namespace:         monitoring                                                                                                                       │
│Labels:            app.kubernetes.io/instance=monitoring                                                                                            │
│                   app.kubernetes.io/managed-by=Helm                                                                                                │
│                   app.kubernetes.io/name=grafana                                                                                                   │
│                   app.kubernetes.io/version=7.0.3                                                                                                  │
│                   helm.sh/chart=grafana-5.1.4                                                                                                      │
│Annotations:       <none>                                                                                                                           │
│Selector:          app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana                                                             │
│Type:              ClusterIP                                                                                                                        │
│IP:                10.111.103.232                                                                                                                   │
│Port:              service  80/TCP                                                                                                                  │
│TargetPort:        3000/TCP                                                                                                                         │
│Endpoints:         10.124.71.97:3000                                                                                                                │
│Session Affinity:  None                                                                                                                             │
│Events:            <none>


on redirige vers le port 3000 

kubectl port-forward monitoring-grafana-9b57b76bd-vzq5m  3000:3000

on ouvre un navigateur et c'est bon 

http://localhost:3000/login



= installation d'un controller ingress : =

helm repo add nginx-stable https://helm.nginx.com/stable  
"nginx-stable" has been added to your repositories

helm install my-release nginx-stable/nginx-ingress  
NAME: my-release
LAST DEPLOYED: Sun Jun 14 13:28:15 2020
NAMESPACE: monitoring
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The NGINX Ingress Controller has been installed.

= exposition de nos services pour acces externe du cluster :


1/ via un ingress controler :

on va overrider des valeurs de charts dans un fichier dédié comprenant des conf ingress specifiant les "hosts" et une external ip : que l'on associe a un node de notre cluster 


cat b-k-prometheus-operator.yaml                           
prometheus:
 ingress:
   enabled: true
   annotations:
     kubernetes.io/ingress.class: nginx
   hosts:
   - "prometheus.boogie7.net"
 service:
   externalIPs:
   - 192.168.0.82

alertmanager:
 ingress:
   enabled: true
   annotations:
     kubernetes.io/ingress.class: nginx
   hosts:
   - "alertmanager.boogie7.net"
 service:
   externalIPs:
   - 192.168.0.82

grafana:
  persistence:
    enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - "grafana.boogie7.net"
  service:
    externalIPs:
    - 192.168.0.82
coreDns:
  enabled: true

kubeDns:
  enabled: false

on upgrade notre chart 
helm upgrade monitor prometheus-operator -f b-k-prometheus-operator.yaml


on renseigne notre fichier hosts et c'est ok nos services sont dispos via un navigateur.


L'inconvénient de cette méthode est le fait dze n'avoir qu'une seule adresse ip disponible.

2/ Addressage automatique des services via metallb :

nous avons configuré metallb avec le mode macadresse /niveau 2 pour qu'il distribue les ip de services sur le range : 192.168.0.100-192.168.0.200


(voir notes metallb ) 

apiVersion: v1
kind: ConfigMap
name: config
namespace: metallb-system
data:
  config: |
    address-pools:
      - name: net-svc-b-k
        protocol: layer2
        addresses:
          - 192.168.0.100-192.168.0.200

nous allons donc modifier les services déployés originellement :

-> service monitor-grafana
on passe le service de type: ClusterIp à type: LoadBalancer

-> service prometheus-operator-alertmanager 
on passe le service de type: ClusterIp à type: LoadBalancer
et on change la conf de port :

  ports:
  - name: web
    nodePort: 31190
    port: 9093     <<<<<<  on passe à 80 : de ce fait on pourra acceder à notre service directement dans le navigateur sans préciser de port
    protocol: TCP
    targetPort: 9093

-> service prometheus-operator-prometheus :

on passe le service de type: ClusterIp à type: LoadBalancer
et on change la conf de port :

  ports:
  - name: web
    nodePort: 32040
    port: 9090     <<<<<<  on passe à 80 : de ce fait on pourra acceder à notre service directement dans le navigateur sans préciser de port
    protocol: TCP
    targetPort: 9090


( la modification via le chart helm de type :
prometheus-operator:
  prometheus:
    service:
      type: LoadBalancer
      port: 80
  alertmanager:
    service:
      type: LoadBalancer
      port: 80
  grafana:
    service:
      type: LoadBalancer
      port: 80

n'a pas fonctionnée mais la modif manuelle des services via k9s elle a fonctionnée.

des l'application de la modif les adresses ip sont ditribuées via metallb :

kctl get svc                                                                                                                                         [☸ |kubernetes-admin@b-k:monitoring]
NAME                                      TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE
alertmanager-operated                     ClusterIP      None             <none>          9093/TCP,9094/TCP,9094/UDP   63m
monitor-grafana                           LoadBalancer   10.98.64.179     192.168.0.102   80:32396/TCP                 63m
monitor-kube-state-metrics                ClusterIP      10.110.89.34     <none>          8080/TCP                     63m
monitor-prometheus-node-exporter          ClusterIP      10.105.224.112   <none>          9100/TCP                     63m
monitor-prometheus-operato-alertmanager   LoadBalancer   10.108.81.109    192.168.0.105   80:31190/TCP                 63m
monitor-prometheus-operato-operator       ClusterIP      10.102.229.117   <none>          8080/TCP,443/TCP             63m
monitor-prometheus-operato-prometheus     LoadBalancer   10.109.223.245   192.168.0.101   80:32040/TCP                 63m
prometheus-operated                       ClusterIP      None             <none>          9090/TCP                     63m

on renseigne notre fichier hosts :

192.168.0.101 prometheus.boogie7.net
192.168.0.105 alertmanager.boogie7.net
192.168.0.102 grafana.boogie7.net

et on peut atteindre les services :

curl -Iv prometheus.boogie7.net                                                                                                                      [☸ |kubernetes-admin@b-k:monitoring]
curl -Iv http://prometheus.boogie7.net                                                                                                               [☸ |kubernetes-admin@b-k:monitoring]
*   Trying 192.168.0.101:80...
* TCP_NODELAY set
* Connected to prometheus.boogie7.net (192.168.0.101) port 80 (#0)
> HEAD / HTTP/1.1
> Host: prometheus.boogie7.net
> User-Agent: curl/7.68.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
< HTTP/1.1 405 Method Not Allowed
HTTP/1.1 405 Method Not Allowed
< Allow: GET, OPTIONS
Allow: GET, OPTIONS
< Content-Type: text/plain; charset=utf-8
Content-Type: text/plain; charset=utf-8
< X-Content-Type-Options: nosniff
X-Content-Type-Options: nosniff
< Date: Sun, 14 Jun 2020 15:47:56 GMT
Date: Sun, 14 Jun 2020 15:47:56 GMT
< Content-Length: 19
Content-Length: 19

curl -Iv http://alertmanager.boogie7.net                                                                                                             [☸ |kubernetes-admin@b-k:monitoring]
*   Trying 192.168.0.105:80...
* TCP_NODELAY set
* Connected to alertmanager.boogie7.net (192.168.0.105) port 80 (#0)
> HEAD / HTTP/1.1
> Host: alertmanager.boogie7.net
> User-Agent: curl/7.68.0
> Accept: */*
>
* Mark bundle as not supporting multiuse
< HTTP/1.1 405 Method Not Allowed
HTTP/1.1 405 Method Not Allowed
< Allow: GET, OPTIONS
Allow: GET, OPTIONS
< Content-Type: text/plain; charset=utf-8
Content-Type: text/plain; charset=utf-8
< X-Content-Type-Options: nosniff
X-Content-Type-Options: nosniff
< Date: Sun, 14 Jun 2020 15:48:29 GMT
Date: Sun, 14 Jun 2020 15:48:29 GMT
< Content-Length: 19
Content-Length: 19

curl -Iv http://grafana.boogie7.net                                                                                                                  [☸ |kubernetes-admin@b-k:monitoring]
*   Trying 192.168.0.102:80...
* TCP_NODELAY set
* Connected to grafana.boogie7.net (192.168.0.102) port 80 (#0)
> HEAD / HTTP/1.1
> Host: grafana.boogie7.net
> User-Agent: curl/7.68.0
> Accept: */*
>
* Mark bundle as not supporting multiuse
< HTTP/1.1 302 Found
HTTP/1.1 302 Found
< Cache-Control: no-cache
Cache-Control: no-cache
< Content-Type: text/html; charset=utf-8
Content-Type: text/html; charset=utf-8
< Expires: -1
Expires: -1
< Location: /login
Location: /login
< Pragma: no-cache
Pragma: no-cache
< Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax
Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax
< X-Frame-Options: deny
X-Frame-Options: deny
< Date: Sun, 14 Jun 2020 15:48:42 GMT
Date: Sun, 14 Jun 2020 15:48:42 GMT

<
* Connection #0 to host grafana.boogie7.net left intact

