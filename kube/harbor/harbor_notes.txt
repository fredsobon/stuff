=== notes harbor : ===


= usage de base : ==

- push / pull image docker :

on tag notre image locale buildée apres l'avoir construite d'apres un dockerfile : 
ex :
cat Dockerfile                                                                                                                                                   (⎈ recette:fso)
FROM debian
RUN apt-get update && apt-get install -y vim curl strace lsof netcat tcpdump tree net-tools

docker build -t bob_helper:0.0.1 .

on tag notre image pour la registry : 
docker tag bob_helper:0.0.1 registry.lapin.io/bob/bob_helper:0.0.1
on s'authentifie sur la registry : 
docker login https://registry.lapin.io
docker push registry.lapin.io/bob/bob_helper:0.0.1

une fois poussée l'image apparait bein dans le projet bob sur notre registry harbor

Si nous n'avons pas de certif tls /ssl valide on peut flagger notre repo comme insecure mais on peut quand meme pousser dans harbor 

 cat /etc/docker/daemon.json                                                                                                                                      (⎈ recette:fso)
{
  "insecure-registries" : ["registry.lapin.io"]
}

- Utilisation avec buildah : 

-on peut pull une image :
buildah pull nginx                                                                                                                                                (⎈ recette:fso)

- listing images : 
buildah images                                                                                                                                                    (⎈ recette:fso)
REPOSITORY                TAG      IMAGE ID       CREATED       SIZE
docker.io/library/nginx   latest   2073e0bcb60e   3 weeks ago   131 MB


- push registry : 
buildah push --tls-verify=false nginx docker://registry.lapin.io/fso/nginx:latest                                                                             (⎈ recette:fso)
Getting image source signatures
Copying blob 22439467ad99 done  
Copying blob b4a29beac87c done  
Copying blob 488dfecc21b1 done  
Copying config 2073e0bcb6 done  
Writing manifest to image destination
Storing signatures


- Lancement de scann de securité :

Attention : biensur ceci n'est faisable que si notre harbor a acces a internet et ou qu'on dump de bdd Harbor est reinjecté manuellement dans la db de notre Harbor de prod 
on peut scanner une images ou plusieurs images avec le scann de secu clair 

dans notre projet sur harbor :
projet/repositories/images
on selectionne l'image que l'on veut scanner :
et on clic sur scann ..le scann se met en queue et s'execute ..on peut des lors examiner le detail des failles en examiant le repertoire de l'image.





https://goharbor.io/docs/

- on premise : standalone : 

- 1 / setup :
exemple sur centos :

pre-req pour harbor de test : 2 vpu / 4gb ram / 40gb hdd

sudo yum install docker-ce.x86_64
sudo yum install docker-compose.noarch

- 2 / prepa tls :

pour permettre la validité des imgs et des scanns il va falloir configurer du tls pour notre conf 

on génére un certif qu'on signe avec notre ca :

openssl genrsa -out paasregistry.lapin.io.key 2048
openssl req -new -sha256 -key paasregistry.lapin.io.key -subj "/C=FR/ST=Paris/O=meetic, Inc./CN=paasregistry.lapin.io" -out paasregistry.lapin.io.csr
openssl x509 -req -in paasregistry.lapin.io.csr -CA meetic_env_CA.crt -CAkey meetic_env_CA.key -CAcreateserial -out paasregistry.lapin.io.crt -days 3650 -sha256
openssl x509 -in  paasregistry.lapin.io.crt -text -noout


on va ensuite copier ca , crt et clé vers le path qui sera parsé par docker 

[root@zinfpaasregistry02uv ~] # ll /data/cert/
total 16K
-rw-r--r-- 1 root root 1,7K 20 févr. 16:16 meetic_env_CA.crt
-rw-r--r-- 1 root root 1,3K 20 févr. 16:16 paasregistry.lapin.io.cert
-rw-r--r-- 1 root root 1,3K 20 févr. 13:17 paasregistry.lapin.io.crt
-rw------- 1 root root 1,7K 20 févr. 13:18 paasregistry.lapin.io.key



prise en compte de notre cert : 

cp /data/cert/paasregistry.lapin.io.crt /etc/pki/ca-trust/source/anchors/
ll /etc/pki/ca-trust/source/anchors/



- 3 / setup :

on recupere la conf du set up en online ou offline 
https://github.com/goharbor/harbor/releases

harbor-online-installer-v1.10.1.tgz
tar -xzvf harbor-online-installer-v1.10.1.tgz 
cd harbor

on rempli le fichier de conf harbor.yaml :
on va rensigner à minima : le hostname / le path vers le cert et key du cert et le path des data 


hostname: zinfpaasregistry02uv.infra.lapin.io

http:
  # port for http, default is 80. If https enabled, this port will redirect to https port
  port: 80

https:
  # https port for harbor, default is 443
  port: 443
  # The path of cert and key files for nginx
  certificate: /data/cert/paasregistry.lapin.io.crt
  private_key: /data/cert/paasregistry.lapin.io.key

harbor_admin_password: Harbor12345

database:
  # The password for the root user of Harbor DB. Change this before any production use.
  password: root123
  # The maximum number of connections in the idle connection pool. If it <=0, no idle connections are retained.
  max_idle_conns: 50
  # The maximum number of open connections to the database. If it <= 0, then there is no limit on the number of open connections.
  # Note: the default number of connections is 100 for postgres.
  max_open_conns: 100

data_volume: /data



clair:
  # The interval of clair updaters, the unit is hour, set to 0 to disable the updaters.
  updaters_interval: 12

jobservice:
  # Maximum number of job workers in job service
  max_job_workers: 10

notification:
  # Maximum retry count for webhook job
  webhook_job_max_retry: 10

chart:
  # Change the value of absolute_url to enabled can enable absolute url in chart
  absolute_url: disabled

log:
  # options are debug, info, warning, error, fatal
  level: info
  # configs for logs in local storage
  local:
    # Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.
    rotate_count: 50
    # Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.
    # If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G
    # are all valid.
    rotate_size: 200M
    # The directory on your host that store log
    location: /var/log/harbor

  # Uncomment following lines to enable external syslog endpoint.
  # external_endpoint:
  #   # protocol used to transmit log to external endpoint, options is tcp or udp
  #   protocol: tcp
  #   # The host of external endpoint
  #   host: localhost
  #   # Port of external endpoint
  #   port: 5140

_version: 1.10.0

proxy:
  http_proxy:
  https_proxy:
  # no_proxy endpoints will appended to 127.0.0.1,localhost,.local,.internal,log,db,redis,nginx,core,portal,postgresql,jobservice,registry,registryctl,clair,chartmuseum,notary-server
  no_proxy:
  components:
    - core
    - jobservice
    - clair


on lance l'install : 

sudo ./install.sh --with-notary --with-clair --with-chartmuseum


on peut se conecter ensuite à l'interface harbor via un navigateur.



= Configuration : =


on peut permettre l'authent surt harbor via ldap : on va ici renseigner les infos correspondantes à notre ldap après la fleche .. les autres champs sont laissés vides.

Configuration
Authentication
Email
System Settings
Auth Mode

LDAP URL ->  ldaps://10.192.168.1    <<<< ip / hostname de notre ldap 
LDAP Search DN -> CN=kerberos,OU=adminsys,OU=accounts-users,DC=lapin,DC=net  <<< compte qui permet d'interroger le ldap et recupérer les infos de user qui essaye de se logger pour voir s'il est authorisé.
LDAP Search Password -> ••••••••••••••••••••  <<<< mdp du user précédent
LDAP Base DN -> DC=lapinDC=net  <<<< base de la recherche de l'arbre de notre ldap 
LDAP Filter
LDAP UID -> sAMAccountName  <<<< methode de recherche : sAMAccountName , cn etc ...
LDAP Scope

LDAP Group Base DN -> OU=accounts-users,DC=lapin,DC=net  <<<< base de la recherche sur les groups 
LDAP Group Filter
LDAP Group GID
LDAP Group Admin ->DN cn=sysadm,ou=it,dc=lapin,dc=net  <<<< ici tous les users membres du groupe sysadm seront admin sur harbor automatiquement
LDAP Group Membership ->memberof  <<< par default
LDAP Scope

LDAP Verify Certificate


- synchro de repos externes :

on peut pull ou push des images / charts depuis harbor : des repo externes sont maintenus ( gitlab, artifactory, docker registry ....) 
on va pouvoir décider si on pull ou push sur harbor
-> on cree d'abord un endpoint sur harbor 
ex :

Endpoint
Provider
Name gitlab.lapin.net
Description
Endpoint URL https://gitlab.lapin.net/
Access ID bob
Access Secret ••••••••
Verify Remote Cert

-> on crée en suite une repli entre ce endpoint et arbor :

Replication Rule
Name gitlab_get
Description get content from gitlab
Replication mode Pull-based
Source registry gitlab.lapin.net

Source resource filter
Name:
Tag:
Resource:image
Destination namespace
Trigger Mode

Override

Enable rule

