=== notes the complete kubernetes course  ===

= ch1 intro =

- Commandes utiles  : 

- se plugger a une pod en cours d'excution : 
kubectl attach podname   

 kubectl attach nodehelloworld.example.com                                                                                                  [☸ minikube:default]
Defaulting container name to k8s-demo.
Use 'kubectl describe pod/nodehelloworld.example.com -n default' to see all of the containers in this pod.
If you don't see a command prompt, try pressing enter.

- execution de commande au sein d'un pod :

boogie$ kubectl exec debian-pod -- ip a                                                                                                        [☸ minikube:default]
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000
    link/sit 0.0.0.0 brd 0.0.0.0
12: eth0@if13: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:ac:11:00:05 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.5/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever

boogie$ kubectl -it exec debian-pod -- bash                                                                                                        [☸ minikube:default]
root@debian-pod:/# date
Tue Sep 10 19:28:13 UTC 2019


- port forwarding : on va pouvoir rediriger un port de notre machine vers le port d'un pod ecoutant dessus :
boogie$ kubectl port-forward nodehelloworld.example.com 8080:3000                                                                [☸ minikube:default]
Forwarding from [::1]:8080 -> 3000

sur notre poste :
curl http://localhost:8080                            [☸ minikube:default]
{
  "paths": [
    "/api",
    "/api/v1",
    "/apis",
    "/apis/",
    "/apis/admissionregistration.k8s.io",
...
boogie$ kubectl logs nodehelloworld.example.com               [☸ minikube:default]
npm info it worked if it ends with ok
npm info using npm@2.15.11
npm info using node@v4.6.2
npm info prestart myapp@0.0.1
npm info start myapp@0.0.1

> myapp@0.0.1 start /app
> node index.js

Example app listening at http://:::3000






- premiers manifests :


pod :
boogie$ cat first-app/helloworld.yml                                                                                                               [☸ minikube:default]
apiVersion: v1
kind: Pod
metadata:
  name: nodehelloworld.example.com
  labels:
    app: helloworld
spec:
  containers:
  - name: k8s-demo
    image: wardviaene/k8s-demo
    ports:
    - name: nodejs-port
      containerPort: 3000

service avec node port qui va matcher le container du pod précédent 

boogie$ cat first-app/helloworld-nodeport-service.yml                                                                                              [☸ minikube:default]
apiVersion: v1
kind: Service
metadata:
  name: helloworld-service
spec:
  ports:
  - port: 31001
    nodePort: 31001
    targetPort: nodejs-port
    protocol: TCP
  selector:
    app: helloworld
  type: NodePort


=== ch2 bases ===

- nodes :

kubelet -> pilote les set up de container dans les pods
kubeproxy > va s'occuper du routage des pods : permettre a tous les pods d'être contactables depuis le cluster et hors cluster en alimentant les regles iptables 

- replication controller : 

pour un appli stateless ( qui n'ecrit dans aucun fichier local ) pas d'etat : on va facilement pouvoir scaler.
La plupart des applis web sont stateless contrairement aux dbs qui sont stateful 
Attention pour les infrmations de sessions users web doivent être stockées hors containers.
Aucun fichier ne doit être sauvegarder dans un pod qui de part leur nature sont ephémeres.

On va scaller avec un object s'appelant replication controller : on defini le nombre de pod qu'on veut et kube s'assure que le nombre de ses containers actifs est toujours présent. Le container sera toujours recréee si il est delete ou ko 

boogie$ cat replication-controller/helloworld-repl-controller.yml                                                                                  [☸ minikube:default]
apiVersion: v1
kind: ReplicationController
metadata:
  name: helloworld-controller
spec:
  replicas: 2      <<< on defini le nombre de réplica
  selector:
    app: helloworld  <<< le selector va matcher les pods ayant le label app: helloworld
  template:
    metadata:
      labels:
        app: helloworld    <<<< le label de notre pod
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - name: nodejs-port      <<< on defini un nom a notre port pour l'identifier plus facilement lors d'appels ulterieurs (utiles pour les ports moins connus que 80 /443 par ex)
          containerPort: 3000


On voit qu"on a bien deux pods issus de notre replication controller : 

boogie$ kubectl get pod                                                                                                                            [☸ minikube:default]
NAME                          READY   STATUS    RESTARTS   AGE
debian-pod                    1/1     Running   9          36d
helloworld-controller-dv92r   1/1     Running   1          11h
helloworld-controller-ndlrd   1/1     Running   1          11h

si on delete un pod : le controller va en réinstancier un automatiquement :

boogie$ kubectl delete pod helloworld-controller-dv92r                                                                                             [☸ minikube:default]
pod "helloworld-controller-dv92r" deleted

boogie$ kubectl get pod                                                                                                                            [☸ minikube:default]
NAME                          READY   STATUS    RESTARTS   AGE
debian-pod                    1/1     Running   9          36d
helloworld-controller-fxhs8   1/1     Running   0          36s   <<< on voit ici qu'un nouveau pod a été popé pour remplacer celui qui a été détruit.
helloworld-controller-ndlrd   1/1     Running   1          11h

on peut scale en live le nombre de réplicat :

->on peut passer le fichier de replica en argumant en specifiant le nombre de pod désiré avant : 
boogie$ kubectl scale --replicas=3 -f helloworld-repl-controller.yml                                                                               [☸ minikube:default]
replicationcontroller/helloworld-controller scaled
 ~/Documents/learn/kubernetes/learn-devops-the-complete-kubernetes-course/kubernetes-course/replication-controller (master) [10:00:37]
boogie$ kubectl get pod                                                                                                                            [☸ minikube:default]
NAME                          READY   STATUS    RESTARTS   AGE
debian-pod                    1/1     Running   9          36d
helloworld-controller-fxhs8   1/1     Running   0          5m8s
helloworld-controller-ndlrd   1/1     Running   1          11h
helloworld-controller-qw6c4   1/1     Running   0          6s

->  on peut directement modifier le type d'objet replicationcontroller ( rc ) en le passant en argument :
ex : on reduit le nombre de pod en utilisant le nom du rc qu'on recupere avant avec un get rc :
 ~ [10:17:32]
boogie$ kubectl get rc                                                                                                                             [☸ minikube:default]
NAME                    DESIRED   CURRENT   READY   AGE
helloworld-controller   3         3         3       11h


boogie$ kubectl scale --replicas=1 rc/helloworld-controller                                                                                        [☸ minikube:default]
replicationcontroller/helloworld-controller scaled
 ~ [10:19:40]
boogie$ kubectl get pod                                                                                                                            [☸ minikube:default]
NAME                          READY   STATUS             RESTARTS   AGE
debian-pod                    1/1     Running            10         36d
helloworld-controller-fxhs8   0/1     ImagePullBackOff   0          24m
boogie$ kubectl get rc                                                                                                                             [☸ minikube:default]
NAME                    DESIRED   CURRENT   READY   AGE
helloworld-controller   1         1         0       11h

Biensur nous scallons de maniere horizontale notre appli c'est qu'elle est stateless 

on peut delete notre replicationcontroller facilement :

boogie$ kubectl delete rc helloworld-controller                                                                                                    [☸ minikube:default]
replicationcontroller "helloworld-controller" deleted
 ~ [10:22:41]
boogie$ kubectl get rc                                                                                                                             [☸ minikube:default]
No resources found.
 ~ [10:22:43]
boogie$ kubectl get pod                                                                                                                            [☸ minikube:default]
NAME                          READY   STATUS        RESTARTS   AGE
debian-pod                    1/1     Running       10         36d
helloworld-controller-fxhs8   0/1     Terminating   0          27m


- Deployment : 

on va d'abord  voir le replicaset qui est la version maintenue par kube puisque le replication  controller est deprecated.
on va pouvoir dans cet object utiliser des selectors qui vont nous permettre de filtrer de manière plus étendu qu'avec les replicationcontroller qui se contentaient de pouvoir fournir des filtres d'egalite ( ex :env: prod) 

le replicaset est utilisé dans l'object deployment : le deployment va nous permettre de déployer des app, de les updater . On defini un status pour notre appli et kube assure que ce status est bien up and running.
L'object deployment est plus facile a utiliser que le replicatcontroller / replicaset , demande moins d'intervention manuelle et offre plus de possiblilitées.

-> create un deployment
-> update un deployment 
-> rolling update : deployment sans impact
-> rollback a une version donnée
-> pause / resume : deployment d'un certain pourcentage de nos pods.

cat deployment/helloworld.yml 

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: helloworld-deployment
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - name: nodejs-port
          containerPort: 3000

- deployments commandes :

- kubectl get deployments
- kubectl get rs ( replicaset)
- kubectl get pods --show-labels                                                                                                             [☸ minikube:default]
NAME                         READY   STATUS    RESTARTS   AGE    LABELS
debian-pod                   1/1     Running   13         38d    <none>
nodehelloworld.example.com   1/1     Running   2          2d5h   app=helloworld

- kubectl rollout status  deployment/helloworld-deployment  : etat du deployment 
- kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2 run k8s-demo avec l'image k8s-demo:2 du label
- kubectl edit deployment/helloworld-deployment  : edition du deployment 
- kubectl rollout history deployment/helloworld-deployment  permet de  voir l'historique des versions déployées.
- kubectl rollout undo  deployment/helloworld-deployment permet de rollback sur la version déployée précédemment.
- kubectl rollout undo  deployment/helloworld-deployment --to-revision=N permet de rollback sur la version N déployée précédemment.


apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: helloworld-deployment
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - name: nodejs-port
          containerPort: 3000

 kubectl create -f deployment/helloworld.yml

boogie$ kubectl get deployments                                                                                                                    [☸ minikube:default]
NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
helloworld-deployment   3/3     3            3           2m8s

boogie$ kubectl get replicasets                                                                                                                    [☸ minikube:default]
NAME                               DESIRED   CURRENT   READY   AGE
helloworld-deployment-748f49d795   3         3         3       2m20s


boogie$ kubectl get pods --show-labels                                                                                                             [☸ minikube:default]
NAME                                     READY   STATUS    RESTARTS   AGE     LABELS
debian-pod                               1/1     Running   13         38d     <none>
helloworld-deployment-748f49d795-56h2r   1/1     Running   0          3m26s   app=helloworld,pod-template-hash=748f49d795
helloworld-deployment-748f49d795-n4fnd   1/1     Running   0          3m26s   app=helloworld,pod-template-hash=748f49d795
helloworld-deployment-748f49d795-rvczv   1/1     Running   0          3m26s   app=helloworld,pod-template-hash=748f49d795
nodehelloworld.example.com               1/1     Running   2          2d5h    app=helloworld

-> check de l'etat du deployment : 
boogie$ kubectl rollout status deployment helloworld-deployment                                                                                    [☸ minikube:default]
deployment "helloworld-deployment" successfully rolled out

-> modification de l'image utilisée : deploy d'une nouvelle version de notre app: 
boogie$ kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2                                                          [☸ minikube:default]
deployment.extensions/helloworld-deployment image updated
boogie$ kubectl get pods  --show-labels                                                                                                            [☸ minikube:default]
NAME                                     READY   STATUS        RESTARTS   AGE    LABELS
debian-pod                               1/1     Running       13         38d    <none>
helloworld-deployment-748d88f59f-8xw74   1/1     Running       0          36s    app=helloworld,pod-template-hash=748d88f59f
helloworld-deployment-748d88f59f-pwzl9   1/1     Running       0          30s    app=helloworld,pod-template-hash=748d88f59f
helloworld-deployment-748d88f59f-zh27v   1/1     Running       0          36s    app=helloworld,pod-template-hash=748d88f59f
helloworld-deployment-748f49d795-56h2r   1/1     Terminating   0          11m    app=helloworld,pod-template-hash=748f49d795
helloworld-deployment-748f49d795-n4fnd   1/1     Terminating   0          11m    app=helloworld,pod-template-hash=748f49d795
nodehelloworld.example.com               1/1     Running       2          2d5h   app=helloworld


boogie$ kubectl describe pod helloworld-deployment-748d88f59f-pwzl9                                                                                [☸ minikube:default]
Name:           helloworld-deployment-748d88f59f-pwzl9
Namespace:      default
Priority:       0
Node:           minikube/10.0.2.15
Start Time:     Fri, 13 Sep 2019 16:24:16 +0200
Labels:         app=helloworld
                pod-template-hash=748d88f59f
Annotations:    <none>
Status:         Running
IP:             172.17.0.15
Controlled By:  ReplicaSet/helloworld-deployment-748d88f59f
Containers:
  k8s-demo:
    Container ID:   docker://6d211169aa8da1588bf5a96d01e6df1e19646e53142e41f8030a1391a25abfc4
    Image:          wardviaene/k8s-demo:2
    Image ID:       docker-pullable://wardviaene/k8s-demo@sha256:c7536949ff900fb7dc923cf9f2475d1209766c65aa07325caf880e754e7e0fae
    Port:           3000/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Fri, 13 Sep 2019 16:24:18 +0200
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-wfc8r (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  default-token-wfc8r:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-wfc8r
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  61s   default-scheduler  Successfully assigned default/helloworld-deployment-748d88f59f-pwzl9 to minikube
  Normal  Pulling    60s   kubelet, minikube  Pulling image "wardviaene/k8s-demo:2"
  Normal  Pulled     59s   kubelet, minikube  Successfully pulled image "wardviaene/k8s-demo:2"
  Normal  Created    59s   kubelet, minikube  Created container k8s-demo
  Normal  Started    59s   kubelet, minikube  Started container k8s-demo

on a donc notre nouvelle appli déployée.

- Eamen de l'historique des versions déployés :

boogie$ kubectl rollout history  deployment/helloworld-deployment                                                                                  [☸ minikube:default]
deployment.extensions/helloworld-deployment
REVISION  CHANGE-CAUSE
1         <none>
2         <none>

on va pouvoir rollback et revenir a notre version précédente : 
boogie$ kubectl rollout undo  deployment/helloworld-deployment                                                                                     [☸ minikube:default]
deployment.extensions/helloworld-deployment rolled back

le rollback se passe bien ; 
boogie$ kubectl rollout status  deployment/helloworld-deployment                                                                                   [☸ minikube:default]
Waiting for deployment "helloworld-deployment" rollout to finish: 2 of 3 updated replicas are available...
deployment "helloworld-deployment" successfully rolled out

on voit nos différents  pods : 
 ~/Documents/learn/kubernetes/learn-devops-the-complete-kubernetes-course/kubernetes-course (master) [04:32:27]
boogie$ kubectl get pods  --show-labels                                                                                                            [☸ minikube:default]
NAME                                     READY   STATUS        RESTARTS   AGE     LABELS
debian-pod                               1/1     Running       13         38d     <none>
helloworld-deployment-748d88f59f-8xw74   1/1     Terminating   0          8m22s   app=helloworld,pod-template-hash=748d88f59f
helloworld-deployment-748d88f59f-pwzl9   1/1     Terminating   0          8m16s   app=helloworld,pod-template-hash=748d88f59f
helloworld-deployment-748d88f59f-zh27v   1/1     Terminating   0          8m22s   app=helloworld,pod-template-hash=748d88f59f
helloworld-deployment-748f49d795-fp79k   1/1     Running       0          11s     app=helloworld,pod-template-hash=748f49d795
helloworld-deployment-748f49d795-gp8qd   1/1     Running       0          11s     app=helloworld,pod-template-hash=748f49d795
helloworld-deployment-748f49d795-lddvl   1/1     Running       0          8s      app=helloworld,pod-template-hash=748f49d795
nodehelloworld.example.com               1/1     Running       2          2d5h    app=helloworld

on peut changer le nombre d'historique de version conservé de notre déployment :
avec le param revisionHistoryLimit: XX que l'on set dans notre déployment : 
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 3
    revisionHistoryLimit: 100
    selector:
      matchLabels:
        app: helloworld

on peut rollnack 
boogie$ kubectl rollout undo  deployment/helloworld-deployment                                                                                     [☸ minikube:default]
deployment.extensions/helloworld-deployment rolled back
 ~/Documents/learn/kubernetes/learn-devops-the-complete-kubernetes-course/kubernetes-course (master) [04:42:17]
boogie$ kubectl rollout history deployment                                                                                                         [☸ minikube:default]
deployment.extensions/helloworld-deployment 
REVISION  CHANGE-CAUSE
4         <none>

- on utilise une nouvelle image : 
boogie$ kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:1                                                          [☸ minikube:default]
deployment.extensions/helloworld-deployment image updated

~/Documents/learn/kubernetes/learn-devops-the-complete-kubernetes-course/kubernetes-course (master) [04:48:45]
boogie$ kubectl rollout status  deployment/helloworld-deployment                                                                                   [☸ minikube:default]
Waiting for deployment "helloworld-deployment" rollout to finish: 2 out of 3 new replicas have been updated...

on voit qu'on a plusieurs versions historisées : 
boogie$ kubectl rollout history  deployment/helloworld-deployment
deployment.extensions/helloworld-deployment 
REVISION  CHANGE-CAUSE
4         <none>
5         <none>
6         <none>
7         <none>

on peut donc forcer le rollback dans une version particulière : 
boogie$ kubectl rollout undo  deployment/helloworld-deployment --to-revision=5                                                                     [☸ minikube:default]
deployment.extensions/helloworld-deployment rolled back



v32 demo service 



oogie$ cat first-app/helloworld.yml                                                                                                               [☸ minikube:default]
apiVersion: v1
kind: Pod
metadata:
  name: nodehelloworld.example.com
  labels:
    app: helloworld
spec:
  containers:
  - name: k8s-demo
    image: wardviaene/k8s-demo
    ports:
    - name: nodejs-port
      containerPort: 3000

boogie$ cat first-app/helloworld-nodeport-service.yml                                                                                              [☸ minikube:default]
apiVersion: v1
kind: Service
metadata:
  name: helloworld-service
spec:
  ports:
  - port: 31001
    nodePort: 31001
    targetPort: nodejs-port
    protocol: TCP
  selector:
    app: helloworld
  type: NodePort

kubectl create -f first-app/helloworld.yml
kubectl create -f first-app/helloworld-nodeport-service.yml

boogie$ kubectl get svc                                                                                                                            [☸ minikube:default]
NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE
helloworld-service   NodePort    10.106.205.39   <none>        31001:31001/TCP   13h
kubernetes           ClusterIP   10.96.0.1       <none>        443/TCP           36d

on recupere le couple ip/port exposé dans minikube 
boogie$ minikube service helloworld-service --url                                                                                                  [☸ minikube:default]
http://192.168.99.100:31001

on voit sur notre poste qu'un reseau est monté dans le range :
boogie$ ip a |grep vboxnet3                                                                                                                        [☸ minikube:default]
8: vboxnet3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 192.168.99.1/24 brd 192.168.99.255 scope global vboxnet3




