=== notes post install helm charts ===

= jenkins :
helm install --name jenkins stable/jenkins

NOTES:
1. Get your 'admin' user password by running:
  printf $(kubectl get secret --namespace default jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo
2. Get the Jenkins URL to visit by running these commands in the same shell:
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        You can watch the status of by running 'kubectl get svc --namespace default -w jenkins'
  export SERVICE_IP=$(kubectl get svc --namespace default jenkins --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")
  echo http://$SERVICE_IP:8080/login
3. Login with the password from step 1 and the username: admin
For more information on running Jenkins on Kubernetes, visit:
https://cloud.google.com/solutions/jenkins-on-container-engine


NB: pour les installs sur minikube il faut changer des params le type Loadbalancer pour le service n'est pas pri en compte : on va le changer en nodeport :

helm install --name jenkins --set master.serviceType=NodePort  stable/jenkins

on peut charger des parametres en les settant dans un fichier √©galement :

$ echo $'master:\n  serviceType: NodePort' > config.yaml
$ helm install -f config.yaml stable/jenkins


pour pouvoir acceder √† l'inteface de jenkins avec minikube :
on va r√©cup√©rer le service associ√© et ensuite permettre l'ouverture de ce service via minikube :

kubectl get service                                                                                                 [‚ò∏ minikube:default]
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
jenkins         NodePort    10.108.149.85   <none>        8080:30553/TCP   14m
jenkins-agent   ClusterIP   10.104.231.81   <none>        50000/TCP        14m
kubernetes      ClusterIP   10.96.0.1       <none>        443/TCP          43m

 boogie@FRLDE01011 ÓÇ∞ ~ ÓÇ∞ minikube service jenkins                                                                                                 [‚ò∏ minikube:default]
üéâ  Opening kubernetes service default/jenkins in default browser...


on peut ensuite se logguer en utilisant le user admin et le password r√©cup√©r√© en step 1 de post install :

http://192.168.99.100:30553/


= elastic :


NOTES:
1. Watch all cluster members come up.
  $ kubectl get pods --namespace=elastic -l app=elasticsearch-master -w
2. Test cluster health using Helm test.
  $ helm test elasticsearch



= helm charts  =


helm va utiliser des templates et on va pouvoir injecter dans un fichier les valeurs qui nous interesse pour un deploiment : les valeurs seront inject√©es dans les template et pouss√©es lors du deploiement du chart : 

on peut utiliser les charts officiel elastic dispo sur github : 
https://github.com/elastic/helm-charts

apres un git clone  on va dans le repo : 
/home/boogie/Documents/work/repos_work/helm-charts

on peut installer le chart elastic en local, apres avoir cloner le repo git :

cd helm-charts/elasticsearch
helm install --name elasticsearch  . --namespace elastic 


On peut aussi vouloir modifier les valeurs fournies par defaut  par elastic 
 ~/Documents/work/repos_work/helm-charts (master*) 
boogie$ ls                                                                                                                                                                                                         
CHANGELOG.md  CONTRIBUTING.md  elasticsearch  filebeat  helpers  kibana  LICENSE  metricbeat  README.md  requirements.txt
boogie$ ls elasticsearch                                                                                                                                                                                          
Chart.yaml  examples  Makefile  README.md  templates  tests  values.yaml


Ex: ici on va vouloir changer le repo source de l'image et le num de version definie dans le fichier values.yaml :

image: "artifact-lapin.net/elasticsearch/elasticsearch"
imageTag: "7.3.0"
imagePullPolicy: "IfNotPresent"

on va egalement commenter la section relative au volume / volume claim car pour notre test nous ne voulons pas de stockage persistant. On va setter a false la persistence : 

volumeClaimTemplate:
  # accessModes: [ "ReadWriteOnce" ]
    # resources:
    #   requests:
    #     storage: 30Gi
  
persistence:
  enabled: false
  annotations: {}


pour info ces valeurs d√©finies sont ensuite inject√©es dans le template elasticsearch/templates/statefulset.yaml :
ex: 
  selector:
      matchLabels:
        app: "{{ template "uname" . }}"
    replicas: {{ default .Values.replicas }}
    podManagementPolicy: {{ .Values.podManagementPolicy }}
    updateStrategy:
      type: {{ .Values.updateStrategy }}
    {{- if .Values.persistence.enabled }}       <<<< on voit ici le test fait sur la ref de notre persistence. 
    volumeClaimTemplates:
    - metadata:
        name: {{ template "uname" . }}
      {{- with .Values.persistence.annotations  }}
        annotations:
  {{ toYaml . | indent 8 }}
      {{- end }}




On va ensuite pouvoir deployer notre chart de la maniere suivant : on donne un nom et on peut specifier un namespace qui servira a heberger notre appli 

boogie$ helm install --name logging-elasticsearch elasticsearch/.  --namespace logging

on peut upgrader egalement un chart d√©ploy√© :

si on a modifi√© une valeur dans notre yaml : 
helm upgrade logging-kibana kibana/. -f kibana/values.yaml --namespace logging

