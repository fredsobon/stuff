=== kube dns : ===

= Dns configuration: (absolute beguiners) =

A : 192.168.0.1.10
B : 192.168.0.1.11
on va mettre un alias avec db

-> on ajoute une entrée dans le /etc/hosts de nos servers :

ping db depuis A est ok

biensur on met se que l'on veut dans la hosts : on peut mettre google pointant sur 192.168.1.11
eci ne verifie pas que l'on est bien  sur le bon hosts ...

biensur ceci est ingérable plus on multiplie les entrées.

-> on installe un dns

ex : 192.168.1.100

on va ajouter sur nos clients l'entrée de ce serveur dans le fichier /etc/resolv.conf

nameserver 192.168.1.100

biensur on peut utiliser le /etc/hosts pour des tests.
si on a deux entrées (/etc/hosts et dns) : il y a un e priorité :
Il y a un ordre de priorité dans la lecture des infos :

/etc/nsswitch.conf



 boogie   master ✚ 1 … 1  ~  Documents  stuff  cat /etc/nsswitch.conf
# /etc/nsswitch.conf
#
# `info libc "Name Service Switch"' for information about this file.

passwd:         compat systemd
group:          compat systemd
shadow:         compat
gshadow:        files

hosts:          files mdns4_minimal [NOTFOUND=return] dns myhostname
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files
netgroup:       nis

pour avoir des résolutions externes on peut utiliser une entrée externe : ex :
/etc/resolv.conf
nameserver 8.8.8.8

- domain names :

top level domain : ex : .com / .org


.  -< root
.com : tld
google.com < domain
www / apps / mail  ...< sous domain
(www.google.com)

pour conserver les entrées on va les mettre en cache pour un moment.


pour eviter dans un domaine interne de rajouter le nom de domaine complet ( ex : web.mycompany.com )

on va vouloir saisir web directement
pour cela dasn notre /etc/resolv.conf : on va rajouter un champ search qui va être automatiquement compléter quand on cherchera un nom

ex : on saisi web > le nom web.mycompany.com sera automatiquement ajouté et la recherche dns se fera sur ce domaine.

- records types :
- A : faire pointer un nom de domaine vers une ip
- AAAA : faire pointer un nom de domaine vers une ipv-
- CNAME : faire pointer un nom vers un autre nom : food.steack.com -> lunch.meat.com

- nslookup

pour requeter un nom : attention cet outil ne requette pas le fichier /etc/hosts.

- dig

notre cluster est composé de nodes ayant une ip et un nom probablement enregistré dans notre dns d'entreprise.
Comment fonctionne la resolution de nom au sein de notre cluster pour les pods,services ... ?

kube deploie un dns interne quand on set up un cluster.

ex :

test-pod                     service-web  web-pod
10.244.0.2                   10.107.10.5   10.244.1.2

on voit dans notre exemple que les deux pods semblent être sur des nodes différents : peut importe car le service dns va entrer en jeu.

Dès que le service est crée :kube va créer un enregistrement dns qui va mapper le nom du service avec son ip
N'importe quel pod pourra donc atteindre le service en utilisant son nom :

curl http://service-web

Welcome to nginx!

On va retrouver les notions de namespaces :
si nos pods sont dans le même namespace ( ex le namespace par default ) alors ils pourront contacter le service directement en saisissant son nom.


Si maintenant nos pods sont dans des namespaces differents , il faudra utiliser le nom de celui hébergeant le service pour atteindre celui-ci
ex :

  ns - default                      ns - apps
test-pod                     service-web  web-pod
10.244.0.2                   10.107.10.5   10.244.1.2


test-pod pourra atteindre le service avec:

curl http://service-web.apps

pour les namespaces kube crée donc des sous domaines.

Kube va en plus regrouper tous les services dans un sous domaine nommé svc
on peut donc contacter notre service avec :

curl http://service-web.apps.svc
kube rassemble les objets dans un root domaine qui se nomme par default : cluster.local

on peut donc atteindre notre service aussi en faisant un
curl http://service-web.apps.svc.cluster.local

on atteind donc ici le fully qualified domain name -> fqdn.

Les enregistrement pour les pods ne sont pas fait explicitement.

kube pour chaque pod va créer un enregistement dns dans lequel il va remplacer le point de l'ip du pod par un tiret :

10.244.1.2  -> 10-244-1-2 en dns kube
un sous domain pod existe

on peut toujours atteindre le pod :

curl http://10-244-1-2.apps.pod.cluster.local

pour le pod dans le namespace default on aura donc :

10-244-0-2.default.svc.cluster.local

= implementation dns dans kube =

on peut enregistrer le nom de nos pods avec leur ip dans un dns local et renseigner le dns dans les /etc/resolv de chaque nodes pour resoudre les pods
kube ne procede pas comme ceci et remplace le nom du pod par l'ip de celui ci dont les "." sont remplacés par des tirets.

10.244.1.2  -> 10-244-1-2 en dns kube

kube rensigne les enregistrements dans son dns .
Depuis la version 1.12 de kube le dns est coredns

il est deployer en tant que pod dans un replicaset

Un fichier de conf est utilisé :
/etc/coredns/Corefile

:53 {
  errors
  health
  kubernetes cluster.local in addr-arpa ip6.arpa {
  pods insecure
  upstream
  fallthrough in addr-arpa ip6.arpa
  }
  prometheus :9153
  proxy . /etc/resolv.conf
  cache 30
  reload
}


des plugins sont présents dans ce fichier de conf .
on voit que le top level domain de kube y est setté :

cluster.local

on voit que par default la creation de records pour les pods avec la conversion de "." en "-" est par defaut desactivée :

pods insecure
chaque resolution dns faite par un pod est forwardée au fichier /etc/resolv.conf
kube dans ce cas utilise le /etc/resolv.conf du node !
le corefile de coredns est passé à kube en tant que configmap object :

kubectl get configmap -n kube-system
NAME      DATA  AGE
coredns   1     20d

si on a besoin de modifier la conf on peut alors modifier ce configmap

Quel est l'adresse que les pods utilisent pour atteindre le server coredns ?

quand on deploie coredns un service est aussi crée par kube

kubectl get service -n kube-system
NAME    TYPE           CLUSTER-IP EXTERNAL-IP   PORT(S)
l'ip de ce service est configurée comme le nameserver dans la conf des pods :

/etc/resolv.conf
nameserver 10.96.0.10

kube cree tout ceci pour nous.

on peut voir la conf utilisée dans kubelet
on voit l'ip du dns

on peut maintenant resoudre en short ou fqdn ( en fonction de l'endroit depuis lequel on interroge )
en fait dans le resolv.conf on a aussi une section search : on a plusieurs entrées du fqdn au plus court pour permettre la résolution :

ex :
host web-service
web-service.default.svc.cluster.local

cat /etc/resolv.conf
nameserver 10.96.0.10
search default.svc.cluster.local svc.cluster cluster.local

Attention pour les pods se systeme ne fonctionne pas il faut fournir le fqdn

