= cert manager : =

une quantité de temps enorme est consacrée à la gestion des certificats tls dans kube.
cert manager va nous aider a gagner du temps.
on peut installer cert-manager sur kube.
Il peut utiliser let's encrypt ( authorite de certif libre) 

on doit prouver à let's encrypt qu'on est le propriétaire du domaine 
ensuite on recoit le certif qui est reconnu par la majorité des browsers.

Avec letsencrypt on doit renouveller nos certif tous les deux mois.
cert-manager va surveiller la date d'expiration et gérer la procedure de renouvellement.
une fois qu'on a recu notre cert tls, celui ci sera stocker en tant que secret dans kube et pourra être utilisé par l'ingress controller.

= utilisation cert-manager : =



Dans un premier temps on va installer helm :

# install helm

You can download the latest release from https://github.com/kubernetes/helm/releases or enter the following command to install helm locally:

```
curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
```

# init helm

```
helm init --service-account tiller
```

on set ensuite un service account avec les droits :

boogie$ cat rbac-config.yml                                                                                                  [☸ kubernetes-admin@kube_devtools:default]
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system


on doit ensuite d'assurer qu'on a un ingress controller puisqu'on doit acceder à notre cluster par les ports 80 et 443 entre autre :

boogie$ cat myapp-ingress.yml                                                                                                [☸ kubernetes-admin@kube_devtools:default]
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  name: myapp
  namespace: default
spec:
  #tls:
  #- secretName: myapp-tls-staging
  #  hosts:
  #  - myapp.newtech.academy
  rules:
    - host: myapp.newtech.academy
      http:
        paths:
          - backend:
              serviceName: myapp
              servicePort: 3000
            path: /



# install nginx ingress

```
helm install --name my-ingress stable/nginx-ingress \
  --set controller.kind=DaemonSet \
  --set controller.service.type=NodePort \
  --set controller.hostNetwork=true           <<<< on defini ici une conf reseau permettant d'acceder au port 80 /443 directement en saisissant l'ip du node 
```

# start myapp

Create myapp and add an ingress rule:

```
kubectl create -f myapp.yml
kubectl create -f myapp-ingress.yml



on doit permettre si on a un firewall les acces au ports 80/443 : car let's encrypt va essayer de se connecter sur notre ip pub pour gérer les certs


on va déployer notre app :

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: myapp

puis on va publier notre conf ingress pour permettre l'acces à notre endpoint en attaquant vers un nom dns :

boogie$ cat myapp-ingress.yml                                                                                                 [☸ kubernetes-admin@kubeallinone:default]
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  name: myapp
  namespace: default
spec:
  #tls:
  #- secretName: myapp-tls-staging
  #  hosts:
  #  - myapp.newtech.academy
  rules:
    - host: myapp.newtech.academy       <<<<< a chaque fois qu'on va appeller ce domaine 
      http:
        paths:
          - backend:
              serviceName: myapp       <<<<<< on va rediriger vers le service matchant ce nom : que l'on retrouve dans notre déploiement. 
              servicePort: 3000
            path: /


on va faire une entrée dns de ce domaine vers une ip pub portée par notre cluster (ex : node1 )
si on est chez un provider dont les ip changent on peut mettre en place une ip flottante pour nous assurer que le nom dns ne change pas.


une fois notre record fait on peut tester :

un curl sur ip pub > envoi vers le default backend de notre conf ingress
un curl sur notre domaine ( directmeent sur le port 80) renvoi vers le pod en passant par l'ingress, puis kubeproxy qui route vers le backend final hénbergeant l'appli nommée myapp.


on va maintenant que notre service est accessible depuis l'exterrieur pouvoir installer cert-manager avec helm :

une fois que notre appli est déployer on va devoir préparer un issuer : qui va certifier notre tls :
comme on est limité en demande de certification : on crée un issuer pour tester et un pour la prod : 

boogie$ cat issuer-staging.yml                                                                                                
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: myapp-letsncrypt-staging
  namespace: default
spec:
  acme:
    # The ACME server URL
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: your@email.inv                                              <<<< on renseigne notre adresse email pour la verif de domaine faite par letsenscrypt.
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: myapp-letsncrypt-staging
    # Enable HTTP01 validations
    http01: {}



boogie$ cat issuer-prod.yml                                                                                                   
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: myapp-letsncrypt-prod
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: your@email.inv                                             <<<<< idem ici 
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: myapp-letsncrypt-prod
    # Enable HTTP01 validations
    http01: {}




kubectl create -f issuer-staging.yml
kubectl create -f issuer-prod.yml


on a egalement des objects de type certificat :


boogie$ cat certificate-staging.yml                                                                                                                                                                 [☸ kubernetes-admin@kubeallinone:default]
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: myapp
  namespace: default
spec:
  secretName: myapp-tls-staging   <<<<<<<<<<<<<<<<<<<<<<<  le cert sera stocké en secret 
  issuerRef:
    name: myapp-letsncrypt-staging       <<<<< on a ici l'issuer 
  commonName: myapp.newtech.academy      <<<<<  le certif sera signé pour ce domaine 
  #dnsNames:                             <<<<   on peut décommenté cette partie si le certif gere aussi le www
  #- www.myapp.newtech.academy
  acme:                                <<<<<<<<<<<<<<<< cette section est utilisée pour le process de vérification 
    config:
    - http01:                          <<< on signifie qu'on utilise http pour la verif
        ingress: myapp                 << et que l'ingress sera myapp et ingress est bien responsable de notre domaine.
      domains:
      - myapp.newtech.academy                                         
      #- www.myapp.newtech.academy

Letsencrypt utilise toujours la meme url de verif et on va donc en publiant notre conf créer un certif qui au bout d'un petit moment sera signé par letsencrypt 
on pourra voir les logs de l'ingress et du certificat et faire un describe sur ces ressources pour voir que letsencrypt a bien validé les certifs pou notre domain de staging : qui va nous servir de test car non reconnu par les browsers. et . 


pour activer le certificat il suffit d'enable tls dans notre conf en décommantant les lignes précedemments commentées dans nos objects :


boogie$ cat myapp-ingress.yml                                                                                                 [☸ kubernetes-admin@kubeallinone:default]
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  name: myapp
  namespace: default
spec:
  tls:                                <<<<<<< section tls activé pour notre ingress apres que letsencrypt ait validé notre cert 
  - secretName: myapp-tls-staging
    hosts:
    - myapp.newtech.academy
  rules:
    - host: myapp.newtech.academy     
      http:
        paths:
          - backend:
              serviceName: myapp       
              servicePort: 3000
            path: /


on va maintenant faire la meme chose pour la prod.
on peut voir que l'entree de notre domaine/.well-known/acme-challenge/.... est utilisée par letsencrypt pour la verif de domaine ..si on examine les logs ou on fait un describe de notre certificate avant qu'il ne soit signé par letsencrypt.

une fois que c'est signé : on peut ouvrir un browser et saisir notre url de site : on verra que le site est en https avec un certif valide délivré par letsencrypt.

