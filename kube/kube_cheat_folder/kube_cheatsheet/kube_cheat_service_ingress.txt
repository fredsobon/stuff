==== cheat sheets sur service ingress === 


= services : 

- definition de service : 

on va rendre disponible un service qui au sein de notre cluster va rediriger le traffic vers un /des pods


apiVersion: v1
kind: Service
metadata:
  name: bobsvc
spec:
  ports:
  - port: 80          << port sur lequel le service sera disponible 
    targetPort: 8080    << port du container vers lequel le service enverra le traffic
  selector:
    app: bob          << tous les pods ayant le label 'bob' feront parti du service et le kubeproxy forwardera le traffic vers chacun de ses pods

examiner notre service crée :

$ kubectl get svc
NAME       CLUSTER-IP       EXTERNAL-IP    PORT(S)   AGE
kubernetes  10.111.240.1    <none>         443/TCP    30d
bobsvc       10.111.249.107  <node>         80/TCP      1m

- executer une commande curl depuis un pod pour interroger un service :  

$ kubectl exec kube-pod-1233 -- curl -s http://10.111.249.107
hello world!

on aura biensur auparavant recupérer l'ip de notre service  avec un kubectl get service (svc)  -n un name_space


Le "--" de kubectl indique la fin de l'option de commande et que tout se qui est apres est la commande a executer depuis le pod.
Ceci est optionnel si la commande que l'on passe n'a pas d'argument avec un "-" mais dans notre cas c'est necessaire : le -s d'option de curl serait interpreeté comme une option de kubectl exec et nous retournerait une erreur.


Dans le  cas ou notre service redirige vers plusieurs pods : il peut être utile de sticker les requettes d'un client sur un pod en particulier : dans ce cas on va definir dans notre service une sessionAffinity qui peut prendre  deux valeurs : None / ClientIP


apiVersion: v1
kind: Service
spec:
sessionAffinity: ClientIP

Dans le cas ou on set l'option : le kube proxy redirigera systematiquement les requettes de la même ip source vers le même pod.

/!\ Attention il n'y a pas de mecanisme de cookie : kube n'agit qu'au niveau tcp/ udp : la payload http n'est pas pri en compte.



- Multiples ports : 

Si nos pods ecountent sur plusieurs ports on peut définir un service qui expose plusieurs ports :
on peut par exemple definir un service qui va exposer les ports 80 et 443 qui seront redirigés respectivememnt vers les  pods  qui exposent les ports 80 et 443 :

apiVersion: v1
kind: Service
metadata:
  name: bobsvc
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 8443
  selector:
    app: bob

/!\ attention ici on voit qu'on a un selector qui pointe sur tous les ports : notre service sera vu comme une seule entité : si on veut agir sur les ports distinctement il faudra configfurer plusieurs services.

- Utilisation des ports nommés : on va pouvoir définir les ports exposés par leur nom : ce qui peut être utilie pour des ports pas tres connus :
ex on va definir dans notre pod des noms pour nos ports .
ex :

kind: Pod
spec:
  containers:
    - name: boss
  ports:
    - name: http
      containerPort: 8080
    - name: https
      containerPort: 8443


ce qui va pouvoir être récupéré et utilisé dans notre service : 

apiVersion: v1
kind: Service
spec:
  ports:
    - name: http
      port: 80
      targetPort: http    <<<< on va ici referencer le port de notre pod qui est en fait le 8080  : le port 80 de notre service redirige vers le http ( 8080 de notre pod)
    - name: https
      port: 443
      targetPort: https   <<<< on va ici referencer le port de notre pod qui est en fait le 8443


on va pouvoir ainsi modifier le port d"un pod de maniere transparente ..puisque notre service pointe sur un "alias" nommé de notre port .

- Decouverte de services : 

on va pouvoir decouvrit des services via différents mecanismes .

-> variables d'environnement  :

quand on crée des services avant les pods : ceux ci vont pouvoir récupérer les infos de services à leur instanciation : on peut le voir en interrogeant les variables d'environment poussées dans ces pods 

kubectl exec pod-123 env 

-> dns : 
chaque service va avoir un enregistement dns qui pourra être intérrogé depuis un pod par exmemple


/!\ Attention une ip de service n'est pas pingable : c'est une ip virtuelle qui n'a pas de sens sans le port associé.


- Service externe au cluster :

il va être utile de pouvoir acceder à des ressources externes au cluster  : du coup pas des service hébergés sur des pods mais des ips/ports externes au cluster. 
Nous allons donc pouvoir permettre à nos pods d'acceder à des ressources externes au cluster comme ils le font naturellment au sein du cluster.

- Endpoints :

on va voir dans la descriotion de nos services la présence de la section endpoint 

ex avec l'api kube :

boogie$ kubectl describe svc kubernetes                                                                                                            [☸ minikube:default]
Name:              kubernetes
Namespace:         default
Labels:            component=apiserver
                   provider=kubernetes
Annotations:       <none>
Selector:          <none>
Type:              ClusterIP
IP:                10.96.0.1
Port:              https  443/TCP
TargetPort:        8443/TCP
Endpoints:         192.168.99.100:8443
Session Affinity:  None
Events:            <none>

on peut interroger l'objet endpoint : 
boogie$ kubectl get endpoints -o wide                                                                                                              [☸ minikube:default]
NAME         ENDPOINTS             AGE
kubernetes   192.168.99.100:8443   34d

boogie$ kubectl describe endpoints kubernetes                                                                                                      [☸ minikube:default]
Name:         kubernetes
Namespace:    default
Labels:       <none>
Annotations:  <none>
Subsets:
  Addresses:          192.168.99.100
  NotReadyAddresses:  <none>
  Ports:
    Name   Port  Protocol
    ----   ----  --------
    https  8443  TCP

Events:  <none>


On a biensur lors de service habituels des listes entiere d'ip port 

Bien que le pod selector est défini dans le service : ce n'est pas ditrectement utilisé pour rediriger le traffic . Le selector est utilisé pour construire une liste ip:port qu'il va stocker dans la section endpoint 

Quand un client se connecte a un service : le kube-proxy recupere la liste des endpoints et redirige le flux vers les pods en ecoute. 

Attention : si on crer manuellement un service sans pod selector  ..kube ne remplira pas la section endpoint: en effet il faut savoir ou rediriger le flux.
Il faut si on le fait manuellement en laissant vide la section endpoint : créer un fichier service et un fichier endpoint.
Le fichier endpoint et service doivent porter le même nom.

- externalName service :
au lieu de créer un service externe en configurant les endpoint on peut faire plus simple en utilisant le fqdn : on va créer un alias à notre service externe.

apiVersion: v1
kind: Service
metadata:
  name: external-service      <<<< ici on cree notre service
spec:
  type: ExternalName
  externalName: someapi.somecompany.com   <<< ici le fqdn de notre ressource externe 
  ports:
  - port: 80



