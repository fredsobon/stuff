=== notes upgrade kube version avec kubeadm : ===

cluster upgrade process : on ne parle pas de coredns ni d'etcd
tous les composants doivent etre à la même version
aucun composant ne doit avoir de version supérieure à apiserver

on peut avoir une version en moins pour controller-manager et kube-scheduleur
on peut avoir deux version en moins pour kubelet et kube-proxy

le kubectl peut avoir une version sup a l'apiserver , la meme version ou une version en moins que l'apiserver

on peut  upgrader composants par composants.

 Quand upgrader ?

!! Attention kubernetes ne peux pas supporter d'upgrade supérieure à 3 versions !!

1.12 -- 1.11 -- 1.10
l'upgrade de 1.9 a 1.12 ne passe pas.

Il est recommandé d'upgrader une version mineure à la fois.

1/ upgrade de master :

on met a jour le master : pendant ce temps les workers travaillent toujours
les users ne sont pas impactés.

pour les nodes ont a plusieurs stratégies :

- upgrade de tous les nodes :
dans ce cas plus aucuns service n'est dispo pour les users.
- upgrade node par node :
on update un node ..les pods partent sur les nodes dispos du cluster et on fait cela au fur et mesure
- injection d'un nouveau node avec la nouvelle version :
on injecte les pods dessus et on eteind le vieux node ..on poursuit pour tous les noeuds du cluster.

- kubeadm upgrade plan

-> va nous montrer les info de versions presentes et disponibles pour l'upgrade

on peut voir egalement que l'upgrade de certains composants (kubelet) doit se faire manuellement sur chaque node.
puis on peut faire un kubadm apply num_version quand on est pret

1- on va upgrade kubeadm :

apt upgrade -y kubeadm=1.14.0-00

2- upgrade

kubeadm upgrade apply v1.14.0 : l'upgrade se fait naturellement.
quand on fait un kubectl get nodes on voit les num de versions inchangés -> c'est uniquement car c'est la version de kubelet qui est remontées sur les nodes.

en fonction de la maniere dont on a déployer notre cluster on peut avoir kubelet present sur notre master node. : si on a installer avec kubeadm.

on upgrade kubelet :
- sur le master en premier ( si présent )
apt upgrade -y kubelet=1.14.0-00

- sur les nodes :
on drain les nodes d'un node puis on upgrade ..on le fait partout
puis on uncordon
kubeadm upgrade node config  --kubelet-version v1.14.0
systemctl restart kubelet


A - upgrade de version mineure de notre cluster kube 

1/ sur notre master ( ou un premier master du cluster ) vérifier les versions candidates :

-kubeadm upgrade plan

ici on voit que pour upgrader notre version actuelle 1.15.2 en version finale (1.16.2 ..il va falloir faire un upgrade progressif en 1.15.5 
remote version is much newer: v1.16.2; falling back to: stable-1.15
[upgrade/versions] Latest stable version: v1.15.5
[upgrade/versions] Latest version in the v1.15 series: v1.15.5

Components that must be upgraded manually after you have upgraded the control plane with 'kubeadm upgrade apply':
COMPONENT   CURRENT       AVAILABLE
Kubelet     3 x v1.15.2   v1.15.5

Upgrade to the latest version in the v1.15 series:

COMPONENT            CURRENT   AVAILABLE
API Server           v1.15.2   v1.15.5
Controller Manager   v1.15.2   v1.15.5
Scheduler            v1.15.2   v1.15.5
Kube Proxy           v1.15.2   v1.15.5
CoreDNS              1.3.1     1.3.1
Etcd                 3.3.10    3.3.10

You can now apply the upgrade by executing the following command:

	kubeadm upgrade apply v1.15.5

on va donc installer des version intermediaires :

apt-get install kubeadm=1.15.5-00
apt-get install kubelet=1.15.5-00
apt-get install kubctl=1.15.5-00

kubeadm upgrade apply v1.15.5

..
[upgrade/successful] SUCCESS! Your cluster was upgraded to "v1.15.5". Enjoy!
[upgrade/kubelet] Now that your control plane is upgraded, please proceed with upgrading your kubelets if you haven't already done so.


on met donc à jour nos kubelet sur les workers :
root@k-node01:~# apt-get install kubelet=1.15.5-00
..
on voit ensuite via kubectl que notre cluster est bien passé en 1.15.5 :

boogie@k-master01:~$ kubectl get nodes
NAME         STATUS   ROLES    AGE   VERSION
k-master01   Ready    master   64d   v1.15.5
k-node01     Ready    <none>   64d   v1.15.5
k-node02     Ready    <none>   64d   v1.15.5


B - Upgrade version majeure : 
on peut upgrader si on veut sauter de version majeure : 

on va examiner la presence des paquets dédiés au nos os ( controller et worker )
root@k-master01:~# apt-cache policy kubeadm |more
kubeadm:
  Installé : 1.15.5-00
  Candidat : 1.16.2-00
 Table de version :
 *** 1.16.2-00 500
        500 http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages

on installe la version kubeadm /kubelet et kubectl de la version qu'on veut sur notre cluster : 

apt-get install kubeadm=1.16.2-00 
apt-get install kubelet=1.16.2-00 
apt-get install kubectl=1.16.2-00 

on check sur notre cluster la version candidate effective 
kubeadm upgrade plan
..
et on lance l'upgrade :
kubeadm upgrade apply v1.16.2

on upgrade la version de kubelet sur nos nodes :
root@k-node01:~# apt-get install kubelet=1.16.2-00
root@k-node02:~# apt-get install kubelet=1.16.2-00

une verif via kubectl nous montre qu'on est uptodate :
boogie@k-master01:~$ kubectl get nodes
NAME         STATUS   ROLES    AGE   VERSION
k-master01   Ready    master   64d   v1.16.2
k-node01     Ready    <none>   64d   v1.16.2
k-node02     Ready    <none>   64d   v1.16.2

si on verifie une seconde fois avec un upgrade plan on voit qu'on est a jour :

root@k-master01:~# kubeadm upgrade plan
[upgrade/config] Making sure the configuration is correct:
[upgrade/config] Reading configuration from the cluster...
[upgrade/config] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
[preflight] Running pre-flight checks.
[upgrade] Making sure the cluster is healthy:
[upgrade] Fetching available versions to upgrade to
[upgrade/versions] Cluster version: v1.16.2
[upgrade/versions] kubeadm version: v1.16.2
[upgrade/versions] Latest stable version: v1.16.2
[upgrade/versions] Latest version in the v1.16 series: v1.16.2

Awesome, you're up-to-date! Enjoy!

