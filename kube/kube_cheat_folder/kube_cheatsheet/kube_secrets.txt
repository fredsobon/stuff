= notes secrets =

les secrets dans kube vont permettre de passer des credentials, password , data à nos pods.
- generation de secret depuis un fichier

boogie$ echo -n "root" > ./username.txt                                                         [☸ minikube:default]
boogie$ echo -n "password" > ./password.tx
boogie$ kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt
secret/db-user-pass created

- - generation d'un secret depuis un cle ssh  , un cert tls :

boogie$ kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa  --ssl-cert=mysslcert.c (KO)


- Generation depuis un yaml :

on va encoder nos credentials via base64

boogie$ echo -n "root" |base64                                                                  [☸ minikube:default]
cm9vdA==
boogie$ echo -n "password" |base64                                                              [☸ minikube:default]
cGFzc3dvcmQ=

secret-data.yaml

apiVersion: v1
kind: Secret
metadata:
  name: app-secret
data:
   password: cGFzc3dvcmQ=
   username: cm9vdA==

Une fois qu'on a créer nos secret on va pouvoir les utiliser

On va pouvoir les utiliser de différentes manieres

- variables d'env :
on defini l'appel dans notre pod :

...
 env:
   - name: SECRET USERNAME
     ValueFrom:            <<<<<<<<  on va donc maintenant rattacher les valeurs definis dans notre secret au pod
      - secretRef:
        name: app-secret
        key: username

- on defini un volume:

boogie$ cat deployment/helloworld-secrets-volumes.yml                                           [☸ minikube:default]
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: helloworld-deployment
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - name: nodejs-port
          containerPort: 3000
        volumeMounts:
        - name: cred-volume
          mountPath: /etc/creds
          readOnly: true
      volumes:
      - name: cred-volume
        secret:
          secretName: db-secrets




On peut voir quand on crée nos ressources , en examinant un pod que notre fichier secret est défini :


kubectl describe pod helloworld-deployment-6b6585d49c-d6748                             [☸ minikube:default]
Name:           helloworld-deployment-6b6585d49c-d6748
..
    Mounts:
      /etc/creds from cred-volume (ro)   <<<< c'est le point de montage
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-wfc8r (ro)

On va examiner depuis notre pod et voir que les secrets sont présents dans le point de montage défini :

boogie$ kubectl exec -it helloworld-deployment-6b6585d49c-d6748 -- bash                         [☸ minikube:default]
root@helloworld-deployment-6b6585d49c-d6748:/app# ls
Dockerfile  docker-compose.yml	index-db.js  index.js  misc  node_modules  package.json
passwordroot@helloworld-deployment-6b6585d49c-d6748:/app# ls /etc/creds/
password  username



- Generation depuis un yaml :

on va encoder nos credentials via base64

boogie$ echo -n "root" |base64                                                                  [☸ minikube:default]
cm9vdA==
boogie$ echo -n "password" |base64                                                              [☸ minikube:default]
cGFzc3dvcmQ=

secret-data.yaml

apiVersion: v1
kind: Secret
metadata:
  name: app-secret
data:
   password: cGFzc3dvcmQ=
   username: cm9vdA==

