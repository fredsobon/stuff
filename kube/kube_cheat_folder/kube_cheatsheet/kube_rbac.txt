= rbac : 

apres l'authentification, on va devoir décider ce que notre user a le droit de faire.
les authorisations se font au niveau de l'api.
ex: quand on fait un kubectl get node : l'api va vérifier si le user qui execute cette commande a le droit de le faire.

rbac : role base access controle va permettre de 
reguler les acces via des roles
administrer dynamiquement les ressources.

webhook : on va envoyer des requette d'authorisation un une api rest
si on veut gérer un server d'authorization : on peut parser le payload en json et repondre si l'acces est granté ou pas.

Les vielles versions de kube nécéssitait de demarrer le cluster en precisant le mode d'authorisation rbac

--authorisation-mode=RBAC 

pour minikube invoquer en cli au boot :
minikube start --extra-config=apiserver.Authorization.Mode=RBAC 

on peut biensur definir nos rbac dans un fichier :
1/ on defini un role
2/ on associe un user / group a ce role 
on peut créer des roles limités a un namespace : Role
ou alors valable pour tous les namespaces : ClusterRole

on associera donc ensuite ces role / user avec des RoleBinding ( limité à un namespace ) ou alors ClusterRole Binding : pas de limite de namespace 


ex : role limité a un namespace :

on crée un role qui permet de lire, examiner les pods et secrets : 

boogie@boogie-stuff:~/Documents/learn/kube/learn-devops-the-complete-kubernetes-course/kubernetes-course$ cat users/user.yaml 
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods", "secrets"]
  verbs: ["get", "watch", "list"]

Maintenant on va faire matcher ce role à un user créer au prealable : 
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: boogie     <<< notre user        
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader  <<<<<          on accroche le role défini auparavant 
  apiGroup: rbac.authorization.k8s.io


maintenant cluster wide : on ne precise pas de namespace car c'est pour notre cluster entier 


boogie@boogie-stuff:~/Documents/learn/kube/learn-devops-the-complete-kubernetes-course/kubernetes-course$ cat users/user.yaml 
kind: ClusterRole           <<<<< on defini ici l'objet ClusterRole 
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader-clusterwide  <<< on ne precise pasde namespace : puisqu'ils sont tous accessibles mais on donne un nom explicite.
rules:
- apiGroups: [""]
  resources: ["pods", "secrets"]
  verbs: ["get", "watch", "list"]

Maintenant on va faire matcher ce role à un user créee au prealable : 
---
kind: ClusterRoleBinding   <<<< on défini un clusterolbinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: read-pods
subjects:
- kind: User
  name: bob     <<< notre user        
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader-clusterwide  <<<<<          on accroche le role défini auparavant 
  apiGroup: rbac.authorization.k8s.io

boogie@boogie-stuff:~/Documents/learn/kube/learn-devops-the-complete-kubernetes-course/kubernetes-course$ cat users/admin-user.yaml 
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: User
  name: "boogie"
  apiGroup: rbac.authorization.k8s.io


Pour examiner les droits qu'un user dispose :

kubectl auth can-i create deployements
yes


kubectl auth can-i delete nodes
no


on peut en tant qu'admin examiner les droits d'un user :


kubectl auth can-i create deployements --as dev-user
no

kubectl auth can-i create pods --as dev-user
yes

on peut definir les perms sur un namespace aussi :

kubectl auth can-i create deployements --as dev-user --namespace test
no

Il va être possible de définir des droits specifiques a certaines ressources : ex acces uniquement a certains pods :



cat developer-role.yaml
apiversion: rbac.authorization.k8s.io/v1
kind: role
metadata:
  name: developer
rules:
- apiGroups: [""]
  ressources: ["pods"]
  verbs: ["list", "get", "create", "update", "delete"]
  ressourcesNames: ["app-web1", "app-vcs2"]

on a vu que les roles et rolesbinding sont associés à un namespace donné.

Comment peut on faire pour les nodes ? Ce type de ressource n'est pas associée à un namespace : on est dans ce cas dans le domaine du cluster.

Les ressources sont donc catégorisées en 2 :

-> namespaced : pods, replicatset, jobs, services ....
-> cluster scoped : nodes, cluster roles, clusters roles binding , namespaced, certificate signing requests


on peut examiner les différents type de ressources avec :

kubectl api-resources --namespaced=true --> on va voir ici toutes les ressources du scope 'namespace'
kubectl api-resources --namespaced=false --> on va voir ici toutes les ressources du scope 'cluster'

Comment donner le droits a des users de gérer certaines parties du cluster ???
avec les  cluster roles et les clusterroles binding



