= kubeconfig : =

quick :

KUBECONFIG=~/.kube/config:~/.kube/recette-config
kubectl config view --flatten

KUBECONFIG=~/.kube/config:~/.kube/recette-config kubectl config view --flatten  > newconf : on repousse ensuite le fichier contenant les infos dans notre rep :  ~/.kube/config



- test de fichier de config unitaire :

on peut instancier kubectl en lui passant en argument un fichier de conf particulier :

ex : 
kubectl get pods --kubeconfig=ma_config




on a  vu la génération des conf ( key, cert ) pour un admin
on sait qu'on peut interroger notre api en http via curl

c'est forcement laborieux.
On va donc mettre les infos dans un fichier -> kiubeconfig.
Ce fichier a plusieurs sections

-> cluster : on peut avoir plusieurs cluster a administrer :
production, dev, google

-> user
admin , dev , prod_ user
-> context : associe quel user va acceder quel cluster :

admin@production
dev@google


on ne crée rien en terme de droit on ne fait qu'associer les infos


on va donc  renseigner les différentes infos dans les différentes section :

ex :

 cat .kube/config
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0dfdfsdfsfscscciBDRVJUSUZJQ0FURS0tLS0tCk1JSUR3VENDQXFtZ0F3SUJBZ0lKQUlzK3RGQUdDVkFiTUEwR0NTcUdTSWIzRFFFQkN3VUFNSGN4Q3pBSkJnTlYKQkFZVEFrWlNNUll3RkFZRFZRUUlEQTFKYkdVdFpHVXRSbkpoYm1ObE1RNHdEQVlEVlFRSERBVlFZWEpwY3pFUApNQTBHQTFVRUNnd0dUV1ZsZEdsak1Rd3dDZ1lEVlFRTERBTkVVMGt4SVRBZkJnTlZCQU1NR0V0MVltVkdiM0pFClpYWWdTM1ZpWlhKdVpYUmxjeUJEUVRBZUZ3MHhPVEF6TURRd09UVXlNamhhRncweU9UQXpNREV3T1RVeU1qaGEKTUhjeEN6QUpCZ05WQkFZVEFrWlNNUll3RkFZRFZRUUlEQTFKYkdVdFpHVXRSbkpoYm1ObE1RNHdEQVlEVlFRSApEQVZRWVhKcGN6RVBNQTBHQTFVRUNnd0dUV1ZsZEdsak1Rd3dDZ1lEVlFRTERBTkVVMGt4SVRBZkJnTlZCQU1NCkdFdDFZbVZHYjNKRVpYWWdTM1ZpWlhKdVpYUmxjeUJEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUtYMWxoOTZOZFRqY1NTK0I5Y2ZJSURPSHNqc0xEK2ZzajVrMHhFU2JWRy84Z25oaEo5cwprcEQ0NXdvWU9YOXZGTlFTM1VCZWNoZG91QUpVNWJnWkx4a0dVS0FMUlcrek1ZMGlqU0t6dGVKcDl2T3dQV1NGClcwTUQyaVpLQStaRS9ZdEZmTUFlbUo4Nm5DUjAzUGdvYmdyK1JrOTBHaU13dXo1cnpsdnBZbUkwZldLb3piRWgKenNZa05haStwV2NnMlRZSlNlb3NHdGdTWGJpb2VSWXMvOWw0NmdsTzg4V1pubEdOOHZHYk45MWxuV3NscHUxcwpUamUzWmQwRXVIMUtQd0w1UXp2K01zQTlZSU4zWXFwcEZxNmRqcUxKNkFzem9WQTBHRkRkbjcvVnNRaXp4TndmCmtyVmJpRldHZmVmblh5WmxMdjRlT0lJN1htc055cm1TWE84Q0F3RUFBYU5RTUU0d0hRWURWUjBPQkJZRUZHTTgKSVdsZW5mbSt2TVBqK2JDM2V4Vi8xMlhTTUI4R0ExVWRJd1FZTUJhQUZHTThJV2xlbmZtK3ZNUGorYkMzZXhWLwoxMlhTTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRjE1UXplVlU2dDMrbUhqCmt5R3pWUHE3YXI2NEVhR05tMGZ2dHI1WG1lT2s1VFl2ck5ZVStKUHM0elY2UTFYMjlrWE01Wk0rMVc3aGxWRjIKNDZ5V1ReVNQUWgxaGFJeDZSazljS242QktqdEo2WFY0eFJOSC93PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://192.168.10.51:6443
  name: kubeprod
contexts:
- context:
    cluster: kubefordev
    user: boogie-dev-cert
  name: kubefordev-cert
- context:
    cluster: minikube
    user: minikube
 name: minikube
- context:
    cluster: kubeprod
    user: boogie-prod.cert
  name: kubeprod-cert
current-context: minikube
kind: Config
preferences: {}
users:
- name: boogie-dev-cert
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMekNDQWhjQ0NRRHdSN3A3N29UL016QU5CZ2txaGtpRzl3MEJBUXNGQURCM01Rc3dDUVlEVlFRR0V3SkcKVWpFV01CUUdBMVVFQ0F3TlNXeGxMV1JsTFVaeVlXNWpaVEVPTUF3R0ExVUVCd3dGVUdGeWFYTXhEekFOQmdOVgpCQW9NQmsxbFpYUnBZekVNTUFvR0dDUVlEVlFRR0V3SkcKVWpFV01CUUdBMVVFQ0F3TlNXeGxMV1JsTFVaeVlXNWpaVEVPTUF3R0ExVUVCd3dGVUdGeWFYTXhEekFOQmdOVgpCQW9NQmsxbFpYUnBZekVNTUFvR0ExVUVDd3dEUkZOSk1TRXdId1lEVlFRRERCaExkV0psUm05eVJHVjJJRXQxClltVnlibVYwWlhNZ1EwRXdIaGNOTVRrd05EQTVNVEkxTnpJd1doY05NVGt3TnpBNE1USTFOekl3V2pBOE1SQXcKRGdZRFZRUUREQWRtTG5OdlltOXVNUll3RkFZRFZRUUtEQTFOWldWMGFXTXRRV1J0YVc1ek1SQXdEZ1lEVlFRSwpEQWRYWldKalpYSjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXBDYTY5b2NYCjliWmVzcVFQbVVTTGVldEZ4cG5obVZMbGNPd1RiWk5iN2x0MnVtQndVL3ova3Q0T0ZXZXkvMEdPenFuMjBLR1MKYlc1Z2Z3dW85a3FFNlQzYTEzVnAxZEI5RFNTajJCWjVncmNIalM0cGxjc3FCelB4TFpScHRDSGllZTBvVHJrRgorbGxuS1ptOTBhWEhSaExrVVdYZEZJWllUcXFHckVIZGZ2eGRUMHk5Z1d5RnByU04wdzdwTjd0V2JoT1IxRkRLCitzRDZpbFo5QkNxMWs2VGsvb3hibk0zM052ejhCczhnRDBCcWhzTG5oaUswaHk0djVESlh4Z0lOVkJJc3hpd24KTjd3eUZGQ21KMWNJMUhvYzlwb2ZUTFFCU0M1TnhlQWs1bDNGd25OTUtoc09pcERlUzE4R0RaRWtBSU12NlhVcAp4ektMb0hzblFOVHBtUUlEQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQVFJWlJ1bzE1cjVYRXJNNWh4CkE5Vmg3d0gralRaczcyWFZOWlQ4Q0pnUGRlMXZIaFZZLzd4UVJKaFRZcFZ5cnhUWlBUWlR0dnFhVzZpKy9PWjQKZEFTaUZWc1ovaU1vTHY0NUxWTmViWnFRUHdRMmRidnAzL2NIQTNQRFp6dldnNXhIa2ZySFBJeDhyOTRhbUJFYgpTMm1YUnErbFBEVzlqV2s2U0RNTTZYd3pJWE9XMzlKVGlvSzdOcloxWDg3YlhjWG1FZDIwV0l3Q01maG42eVFBCmhHaXcvOW1nV1ViVHVZczVKNnMzdGJvN1QwRW9HTmMweHk1aXBWRkY4dTd2cnVwOXlUWlk3RWh4T3RZMlcvK3QKT1gxVmhhaUZ5eWVRNUdDcCtDLzhSZlBKMTNzcEYzSERobnF0Y1d2Snp4UVFDTHQrWWJmNG5sMVNLVktpbEc0UgpjcW1ECi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ3RkOTdjOUwxQ1Jrb2YKZnplenRDcDFKR21PK1JYc2d2MVJvVk9XZWlZR2tvNkE5VUxjR1VBZ2FOREU1bjQ5NmRxOFFUVVoxRWZRTlllWgpTQUZucmw4Zzl0TTEyaE5JdUx3Z3krelRHK0xLMThZRHJSZktiTUE5U29nRTk4dUJ2SjdqaDBMMU9JY28vQjNyClBoWTR2M3c2MXY4NXAxSmxQVm90TnVHdHJoL0d2T0tXa3c3TUZHYXFJZ0UxNjJONDFPcGR3Yk4wc3k0VnZMUysKWldxdlNtVkN2SWxmc256SlNTK25aY24wdFdXdUEwejNsQkQ2R2dpMXlMZ2hnanhQT1RjMDkzK3Jla29qTHBVRgpkNmhDa3N1eHhjMGcrT1VxV0p4TkVqV2xENnVkQ2pLTUJWVHA1ZFpBM0NHWkFXR0o3amZnSVVBdThQMFhnVytZCk1DbGEvUGk1QWdNQkFBRUNnZ0VCQUlDUnZlN0t2cE9tZ1QzRERzZjBteHRqdDVFdWNOOXhYc3ZuNUlvOVVuM0EKbGpwaWpnR1AvWVdINm1SbDZkOTl1bytaVFFBdDVHUWZxTGNsTlZWaFdrU1diSWtYYnYrUlhHNTZkcmNwamZpRgo0TS9NdFR0bFN6NmlSUnBaaHM1THZRQXF1cWdDRTd0KzBiWVB1R3lyRUNxVU8yckI1MEgrTFI0aDlUYkRQZTRQCnpFZGI3aXFKOTZ4ZThVWHZvdzlSZHhTdTR6V3pkOGRRY3crNTVYWTFGM2N2L2ZxaXY4ZDliTzdtR1VVM1RUaDAKVWVCamcxQ2dVTFIyRlluOHdZQlc5S1JLcFFWaThPMWk2U2o4NXZiSHZ3M045YWhVNlBvWllGeUpNUXV2bzZoZQpsNkF0R1cwM0svRzQ5dXhoWTlQZkdHbzdqMGViSThKMDJOQmxmQldyMDJFQ2dZRUE0ZUZ5NHFCNGp4Q3oxYzJuClhPSW80b1VDNGtQZG9wZmo2NHVybHFmczNOOENxTDFBOWNCOVR4eVhZZExtYjdZRmNGZlkxRklrNlRocnhPLzAKRE9FZ2tOS2NZNG9HY2dxWDd1dkdJMGF5N25uOWFuUWphUGFTVlhyd2JYSndnei9ncDBTVE8ydG1pSEdOQysxTgovUmt1TStTMHBQN2p3RS9XSnY3UWRnU1JzSTBDZ1lFQXhKbE1IbTcyYlZrZWFSdUJENnRuRW1MeGoyeTdvTlVNClU5dnJPZEdvY2xqL284SlltTU11QjNUYTh2OXV0azMrdHI5dUpQaDMvUUhhd0pQQUVQRFpxaUZOanVyMzM4OWYKeXVYd1RMV040LzkxZWN5NkVwbmJ5YUZmbUN1STZPNHdlQ0llRjh1aFlDcTJYbWVJYlh6NDZZeS9kVUdrVEdIWAo3LytvamdTSGk5MENnWUVBeTRQOXB3TStuR2hJSDlMemdGU2swYk5XTGRkSDBqOVlNOW5iK0JuRTZCeG1vUElqCm5VaVpuclg4RHorZUwvaW9YZGhJbk1TR1RUdHduamcwZzRZemVVakpiMFhsR010Q3FSbjFvOE1IWkthMUZUMGUKeW11ZTNUV3ZlbTBwd3BmREtmSTNWY29tejdpL2hJZURSUTl5K1g2TzVEcGpxZHBFOFUyVk5VQllvK0VDZ1lCUgpUMW1sQ0oyUTBoZjZ2cTVkTGJXK2EvK2VJd2xpMWxwMzRHL2tCT3RYQjZvTEw1ajI3VnAvS1B4WkhmM0xGbXp2ClpqTUd4V0RTMms1LzhWdXhaZnVRR3AvNktRSUZwYjNucTd2NzdlYldVbFJpNEtKZ2lSUFd5NUErM2xxTWc5NjIKQU41VFZ4dlNLemdyeVVRcWpGSmlQWno5d1AxVHZlL1NTZm1MYXlJb1hRS0JnQ2J6S0tTWkZrbnBjbU42bE9wRQozZUY3a2NNRWl3VDZXVXJjeG1xYjg1Mi9Ibkk3NEsxRDBUaWJ4OTRVVjRDajhmclVKVnRzTERVdUxSRXJyNEhNCkZPM3h0eUxSN1Vxb0doYTc1ZVNaRzNNUFVXSHlQTU13ZWdZREtLcVlESXAvMFhPejdoMWMxVVdvRzNjUExBVWoKUWN6RWQ0MjNldEd6N21jclgzM3A4RG1aCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
    U8yckI1MEgrTFI0aDlUYkRQZTRQCnpFZGI3aXFKOTZ4ZThVWHZvdzlSZHhTdTR6V3pkOGRRY3crNTVYWTFGM2N2L2ZxaXY4ZDliTzdtR1VVM1RUaDAKVWVCamcxQ2dVTFIyRlluOHdZQlc5S1JLcFFWaThPMWk2U2o4NXZiSHZ3M045YWhVNlBvWllGeUpNUXV2bzZoZQpsNkF0R1cwM0svRzQ5dXhoWTlQZkdHbzdqMGViSThKMDJOQmxmQldyMDJFQ2dZRUE0ZUZ5NHFCNGp4Q3oxYzJuClhPSW80b1VDNGtQZG9wZmo2NHVybHFmczNOOENxTDFBOWNCOVR4eVhZZExtYjdZRmNGZlkxRklrNlRocnhPLzAKRE9FZ2tOS2NZNG9HY2dxWDd1dkdJMGF5N25uOWFuUWphUGFTVlhyd2JYSndnei9ncDBTVE8ydG1pSEdOQysxTgovUmt1TStTMHBQN2p3RS9XSnY3UWRnU1JzSTBDZ1lFQXhKbE1IbTcyYlZrZWFSdUJENnRuRW1MeGoyeTdvTlVNClU5dnJPZEdvY2xqL284SlltTU11QjNUYTh2OXV0azMrdHI5dUpQaDMvUUhhd0pQQUVQRFpxaUZOanVyMzM4OWYKeXVYd1RMV040LzkxZWN5NkVwbmJ5YUZmbUN1STZPNHdlQ0llRjh1aFlDcTJYbWVJYlh6NDZZeS9kVUdrVEdIWAo3LytvamdTSGk5MENnWUVBeTRQOXB3TStuR2hJSDlMemdGU2swYk5XTGRkSDBqOVlNOW5iK0JuRTZCeG1vUElqCm5VaVpuclg4RHorZUwvaW9YZGhJbk1TR1RUdHduamcwZzRZemVVakpiMFhsR010Q3FSbjFvOE1IWkthMUZUMGUKeW11ZTNUV3ZlbTBwd3BmREtmSTNWY29tejdpL2hJZURSUTl5K1g2TzVEcGpxZHBFOFUyVk5VQllvK0VDZ1lCUgpUMW1sQ0oyUTBoZjZ2cTVkTGJXK2EvK2VJd2xpMWxwMzRHL2tCT3RYQjZvTEw1ajI3VnAvS1B4WkhmM0xGbXp2ClpqTUd4V0RTMms1LzhWdXhaZnVRR3AvNktRSUZwYjNucTd2NzdlYldVbFJpNEtKZ2lSUFd5NUErM2xxTWc5NjIKQU41VFZ4dlNLemdyeVVRcWpGSmlQWno5d1AxVHZlL1NTZm1MYXlJb1hRS0JnQ2J6S0tTWkZrbnBjbU42bE9wRQozZUY3a2NNRWl3VDZXVXJjeG1xYjg1Mi9Ibkk3NEsxRDBUaWJ4OTRVVjRDajhmclVKVnRzTERVdUxSRXJyNEhNCkZPM3h0eUxSN1Vxb0doYTc1ZVNaRzNNUFVXSHlQTU13ZWdZREtLcVlESXAvMFhPejdoMWMxVVdvRzNjUExBVWoKUWN6RWQ0MjNldEd6N21jclgzM3A4RG1aCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
- name: minikube
  user:
    client-certificate: /home/boogie/.minikube/client.crt
    client-key: /home/boogie/.minikube/client.key

on voit ici  qu'on associe les infos de user et cluster dans les contextes pour setter nos infos.

On a un contexte par défault de setté : quand on lance kubectl on est connecté sur ce cluster et on peut modifier biensur cette valeur.

- kubectl commandes :

kubectl config view :


kubectl  config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: REDACTED
    server: https://192.168.8.10:6443
  name: kubefordev
- cluster:
    certificate-authority: /home/boogie/.minikube/ca.crt
    server: https://192.168.99.100:8443
  name: minikube
- cluster:
    certificate-authority-data: REDACTED
    server: https://192.168.1.51:6443
  name: kubeprod
  ...
  ..............
  ...
contexts:
- context:
    cluster: kubefordev
    user: boogie-dev-cert
- name: boogie-dev-cert
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
- name: boogie-prod-cert
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
- name: minikube
  user:
    client-certificate: /home/boogie/.minikube/client.crt
    client-key: /home/boogie/.minikube/client.key

- modif de context :

kubeclt config use-context boogie-dev@kubedev


>>> on a donc setté notre context par défaut sur un autre cluster maintenant.

- kubectl -h : liste des options possibles.

- Namespaces :

on va pouvoir setté un namespace particulier dans un contexte :

ex: on set le namespace kube-system par defaut dans le contexte kubedev
...
contexts:
- context:
    cluster: kubefordev
    user: boogie-dev-cert
    namespace: kube-system
  name: kubefordev-cert
....
- on peut définir les eléments tls dans notre kubeconfig :

on peut mettre le path de nos cert ou alors ( comme dans les exemples précédents ) mettre les data que l'on aura chiffrer au préalable

echo "LsCCZD.." |base64 et que l'on renseigne dans  la section

- cluster:
    certificate-authority-data:

