=== notes deployments ===

- Deployment :

on va d'abord  voir le replicaset qui est la version maintenue par kube puisque le replication  controller est deprecated.
on va pouvoir dans cet object utiliser des selectors qui vont nous permettre de filtrer de manière plus étendu qu'avec les replicationcontroller qui se contentaient de pouvoir fournir des filtres d'egalite ( ex :env: prod)

le replicaset est utilisé dans l'object deployment : le deployment va nous permettre de déployer des app, de les updater . On defini un status pour notre appli et kube assure que ce status est bien up and running.
L'object deployment est plus facile a utiliser que le replicatcontroller / replicaset , demande moins d'intervention manuelle et offre plus de possiblilitées.

-> create un deployment
-> update un deployment
-> rolling update : deployment sans impact
-> rollback a une version donnée
-> pause / resume : deployment d'un certain pourcentage de nos pods.

cat deployment/helloworld.yml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: helloworld-deployment
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - name: nodejs-port
          containerPort: 3000

- deployments commandes :

- kubectl get deployments
- kubectl get rs ( replicaset)
- kubectl get pods --show-labels                                                                                                             [☸ minikube:default]
NAME                         READY   STATUS    RESTARTS   AGE    LABELS
debian-pod                   1/1     Running   13         38d    <none>
nodehelloworld.example.com   1/1     Running   2          2d5h   app=helloworld

- kubectl rollout status  deployment/helloworld-deployment  : etat du deployment
- kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2 run k8s-demo avec l'image k8s-demo:2 du label
- kubectl edit deployment/helloworld-deployment  : edition du deployment
- kubectl rollout history deployment/helloworld-deployment  permet de  voir l'historique des versions déployées.
- kubectl rollout undo  deployment/helloworld-deployment permet de rollback sur la version déployée précédemment.
- kubectl rollout undo  deployment/helloworld-deployment --to-revision=N permet de rollback sur la version N déployée précédemment.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: helloworld-deployment
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
      - name: k8s-demo
        image: wardviaene/k8s-demo
        ports:
        - name: nodejs-port
          containerPort: 3000

- creation deployment : 
 kubectl create -f deployment/helloworld.yml

- recherche des deployment : 
boogie$ kubectl get deployments                                                                                                                    [☸ minikube:default]
NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
helloworld-deployment   3/3     3            3           2m8s

boogie$ kubectl get replicasets                                                                                                                    [☸ minikube:default]
NAME                               DESIRED   CURRENT   READY   AGE
helloworld-deployment-748f49d795   3         3         3       2m20s

- examen des labels des pods : on peut identifier les pods attribues d'un labels liés a un deployment : 
boogie$ kubectl get pods --show-labels                                                                                                             [☸ minikube:default]
NAME                                     READY   STATUS    RESTARTS   AGE     LABELS
debian-pod                               1/1     Running   13         38d     <none>
helloworld-deployment-748f49d795-56h2r   1/1     Running   0          3m26s   app=helloworld,pod-template-hash=748f49d795
helloworld-deployment-748f49d795-n4fnd   1/1     Running   0          3m26s   app=helloworld,pod-template-hash=748f49d795
helloworld-deployment-748f49d795-rvczv   1/1     Running   0          3m26s   app=helloworld,pod-template-hash=748f49d795
nodehelloworld.example.com               1/1     Running   2          2d5h    app=helloworld

-> check de l'etat du deployment :
boogie$ kubectl rollout status deployment helloworld-deployment                                                                                    [☸ minikube:default]
deployment "helloworld-deployment" successfully rolled out

-> modification de l'image utilisée : deploy d'une nouvelle version de notre app:
boogie$ kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2                                                          [☸ minikube:default]
deployment.extensions/helloworld-deployment image updated

- Eamen de l'historique des versions déployés :

boogie$ kubectl rollout history  deployment/helloworld-deployment                                                                                  [☸ minikube:default]
deployment.extensions/helloworld-deployment
REVISION  CHANGE-CAUSE
1         <none>
2         <none>

- rollback version précédente d'une appli : 
on va pouvoir rollback et revenir a notre version précédente :

boogie$ kubectl rollout undo  deployment/helloworld-deployment                                                                                     [☸ minikube:default]
deployment.extensions/helloworld-deployment rolled back


- parametre d'historisation des releases : 
on peut changer le nombre d'historique de version conservé de notre déployment :
avec le param revisionHistoryLimit: XX que l'on set dans notre déployment :
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 3
    revisionHistoryLimit: 100
    selector:
      matchLabels:
        app: helloworld

boogie$ kubectl rollout history  deployment/helloworld-deployment
deployment.extensions/helloworld-deployment
REVISION  CHANGE-CAUSE
4         <none>
5         <none>
6         <none>
7         <none>

- rollback version précise : 
on peut donc forcer le rollback dans une version particulière avec l'option --to-revision=5 

boogie$ kubectl rollout undo  deployment/helloworld-deployment --to-revision=5                                                                     [☸ minikube:default]
deployment.extensions/helloworld-deployment rolled back

