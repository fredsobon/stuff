= statefulsets :


Un diagnostic est posé : le mécanisme de déploiement n’est pas adapté pour gérer un ensemble de pods de base 
de données. Pour cela, Kubernetes offre un autre mécanisme : les objets de type StatefulSet.
Un objet StatefulSet (ou son raccourci sts) dispose des caractéristiques suivantes :

Caractéristiques
-> prédictibilité du nom des pods,
-> assignation du stockage persistant pod par pod,
-> création des pods dans un ordre donné,
->  mise à jour des pods dans un ordre donné.

Si l’application à déployer n’a pas besoin de ces caractéristiques, il est recommandé de passer par un mécanisme 
de déploiement classique.


Les statefulesets vont être utiles pour des appli qui vont avoir besoin d'un nom de pod stable et
unique (contrairement au deploiement qui genere des noms de pod en random)

Ceci va être particulierement utile pour les applis qui utilisent des noms dns pour
 communiquer : ex elasticsearch, cassandra

/!\ attention :
Il est fortement recommandé de disposer d’un mécanisme de création automatique des volumes persistants. Dans
le  cas  contraire,  l’administrateur  devra  réaliser  toutes  les  déclarations  d’objet  de  type  PersistentVolume manuellement.
Derniers points, les volumes persistants créés par le StatefulSet ne seront pas purgés automatiquement lors de la
réduction du nombre de pods. Charge à l’administrateur de faire les purges nécessaires.

Les statefulsets permettent la gestion de stockage : le volume associé a un statefu
lset n'est pas delete quand le statefulset lui meme est détruit.

QUand on scale une appli statefulset : l'incrementation des index se fait automatiq
uement par kube :

on va passer de 2 à  3 replicats en passant donc de pod-0, pod-1 à pod-0, pod-1, po
d-2

idem quand on va scale down :
on passera de pod-0, pod-1, pod-2 à pop-0, pod-1

on va pouvoir prendre comme exemple un cluster cassandra qui a besoin d'un node "seed" : une source avec laquelle les autres membres du cluster doivent communiquer :


on va créer notre appli comportant 3 nodes dont le nom sera fixe , ces nodes reprendront le meme hostname  s'ils sont detruit , un volume est présenté aux pods qui vont l'utiliser

boogie$ cat statefulset/cassandra.yaml                                 [☸ N/A:N/A]
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 3
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
      - name: cassandra
        image: gcr.io/google-samples/cassandra:v13
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "500m"
            memory: 1Gi
          requests:
           cpu: "500m"
           memory: 1Gi
        securityContext:
          capabilities:    <<<<< ici on defini des droits particuliers nécéssaire à cassandra : les IPC_LOCK
            add:
              - IPC_LOCK
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - nodetool drain
        env:
          - name: MAX_HEAP_SIZE
            value: 512M
          - name: HEAP_NEWSIZE
            value: 100M
          - name: CASSANDRA_SEEDS
            value: "cassandra-0.cassandra.default.svc.cluster.local"   <<< on aura ici le nom de notre seed qui servira au cluster
          - name: CASSANDRA_CLUSTER_NAME
            value: "K8Demo"
          - name: CASSANDRA_DC
            value: "DC1-K8Demo"
          - name: CASSANDRA_RACK
            value: "Rack1-K8Demo"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /ready-probe.sh
          initialDelaySeconds: 15
          timeoutSeconds: 5
        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the stateful pod volumes.
        volumeMounts:
        - name: cassandra-data
          mountPath: /cassandra_data
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  # do not use these in production until ssd GCEPersistentDisk or other ssd pd
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 8Gi
---
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
  name: standard
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
  zone: eu-west-1a
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
  - port: 9042
  selector:
    app: cassandra

