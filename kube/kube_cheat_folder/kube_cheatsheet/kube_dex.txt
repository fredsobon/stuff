== notes dex == 


dex es tun service d'identification qu utilise open id connect (oidc.)
kube va utiliser dex pour authentifier ses users.
dex utilise des connectors pour authentifier un user à d'autre source d'identification :
ex : ldap / ad ; github , saml ...

on va devoir demarrer kubernetes en utilisant oidc et en utilisant dex 

le user va s'authentifier a dex qui va verifier l'id en se connectant à une autre souce (ldap /ad, github).
Dex va ensuite fournir un token a nootre user qui va s'en servir pour se connecter à kube.
kube va verifier le token pour s'assurer qu'il est ok en le comparant a son oidc interne : qui est defini comme dex .
c'est kube api qui va verifier le token ( s'assurer de sa provenance, sa validité) ensuite la requette du user va être examinée ex: get pods  les rbac sont verifiées. si le user a le droit de faire un get pod alors le resultat de la commande lui est renvoyé.


la provenance du token etait verifiée et valide : le user peut donc se connecter à kube.

OICD n'est pas déploye dans beaucoup d'entreprises.
Dex sert donc de pont entre ce que les entreprises utilisent générallement comme méthode d'authent (ldap ...) et ce que kube utilise (oicd ...)


- exemple creation de conf pour authent à github en oauth :

- set up de dex :

sur le master kube plusieurs etapes sont à faire :

> generation de certifs
> creation du namespace dex 
> creation des secret dex dans le namespace dex en donnant les cert générés précédemment 
> on copie le ca.pem dans l'arbo kubernetes/pki en le nommant openid-ca.pem
./gencert.sh
kubectl create -f dex-ns.yaml
kubectl create secret tls dex.newtech.academy.tls -n dex --cert=ssl/cert.pem --key=ssl/key.pem
sudo cp ssl/ca.pem /etc/kubernetes/pki/openid-ca.pem

on peut examiner le contenu du script qui génere les certs : 

cat gencert.sh 
#!/bin/bash

mkdir -p ssl

cat << EOF > ssl/req.cnf
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name

[req_distinguished_name]

[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = dex.newtech.academy   <<<<<<<<<<<<<<<<<<<<<<<<<< on doit biensur adapter l'entrée en focntion de notre nom de domaine .
EOF

openssl genrsa -out ssl/ca-key.pem 2048
openssl req -x509 -new -nodes -key ssl/ca-key.pem -days 10 -out ssl/ca.pem -subj "/CN=kube-ca"

openssl genrsa -out ssl/key.pem 2048
openssl req -new -key ssl/key.pem -out ssl/csr.pem -subj "/CN=kube-ca" -config ssl/req.cnf
openssl x509 -req -in ssl/csr.pem -CA ssl/ca.pem -CAkey ssl/ca-key.pem -CAcreateserial -out ssl/cert.pem -days 10 -extensions v3_req -extfile ssl/req.cnf




on s'assure que l'entree dns pointe sur un node de notre cluster 



On va maintenant creer un secret pour notre compte github :

```
kubectl create secret \
    generic github-client \
    -n dex \
    --from-literal=client-id=$GITHUB_CLIENT_ID \
    --from-literal=client-secret=$GITHUB_CLIENT_SECRET
```


on doit au prealable creer un compte pour l'oauth github :
on se log sur notre compte , on va des les settings et on choisi oauth :
-> on va definir une application qui aura le droit de s'authentifier :
on saisit par exemple kubernetes dex 
-> homepage de l'appli : https://dex.newtech.ackademy
-> authorization callback url : on defini l'url de l'appli avec le portr du node port et callback : pour permttre le retour de github a notre appli . Si on met un fake dns il faudra nousassurer de renseigner correctement le fichier hosts 
https://dex.newtech.academy:32000/callback

une fois qu'on enregistre notre appli on retrouve sur la page github notre client id et notre client secret

on va recuperer ces infos puis faire des exports des variables github :

export GITHUB_CLIENT_ID=bldfdfdfddfd
export GITHUB_CLIENT_SECRET=dfdfffegrgrghrhth

on peut maintenant lancer notre commande :

kubectl create secret \
    generic github-client \
    -n dex \
    --from-literal=client-id=$GITHUB_CLIENT_ID \
    --from-literal=client-secret=$GITHUB_CLIENT_SECRET

On va maintenant devoir modifier notre api-server pour la prise en compte de oicd :

kube-apiserver manifest file changes ( /etc/kubernetes/manifests/kube-apiserver.yaml):
```
    - --oidc-issuer-url=https://dex.newtech.academy:32000    <<<<< on renseigne avec les entréés de notre conf 
    - --oidc-client-id=example-app   <<< appli de test fourni par dex 
    - --oidc-ca-file=/etc/kubernetes/pki/openid-ca.pem  <<< ca qu'on a générée 
    - --oidc-username-claim=email  <<< type mail pour les users
    - --oidc-groups-claim=groups


il est possible d'avoir des souci  pour editer le manifest kube-api-server avec vim : on peut le faire avec nano.
une fois fait on peut voir que l'api server redémarre.

on peut biensur toujours se connecter au cluster avec kubectl qui utilise la config peuplée de certif.
on va avec oidc utiliser au autre mécanisme.

on va maintenant déployer dex :

kubectl create -f dex.yaml

cat dex.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: dex
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dex
  namespace: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources identity must be able to create customresourcedefinitions.
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex                 # Service account assigned to the dex pod.
  namespace: dex  # The namespace dex is running in.
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
/etc/ssl/certs/cacert.pem  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex
      hostAliases:
      - ip: "127.1.2.3"  <<< à supprimer et remplacer par 192.168.0.80 ou ip pub   <<<<<<<<< à checker ...      
        hostnames:
        - "ldap01.example.com"
      containers:
      - image: quay.io/coreos/dex:v2.10.0
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]

        ports:
        - name: https
          containerPort: 5556

        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg
        - name: tls
          mountPath: /etc/dex/tls
        - name: ldap-tls
          mountPath: /etc/dex/ldap-tls

        env:
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: github-client
              key: client-id
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: github-client
              key: client-secret
      volumes:
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        secret:
          secretName: dex.newtech.academy.tls
      - name: ldap-tls                          <<<< la section ldap n'est pas utilisée pour l'instant.
        configMap:
          name: ldap-tls
          items:
          - key: cacert.pem
            path: cacert.pem
---
kind: ConfigMap                         <<<< pour l'instant la section ldap n'est pas utilisée .
apiVersion: v1
metadata:
  name: ldap-tls
  namespace: dex
data:
  cacert.pem: |
    empty
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    issuer: https://dex.newtech.academy:32000
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.newtech.academy:32000/callback
        org: kubernetes
    oauth2:
      skipApprovalScreen: true

    staticClients:
    - id: example-app
      redirectURIs:
      - 'https://dex.newtech.academy:32000/callback'   <<<<<< on defini ici notre conf de callback 
      - 'http://178.62.90.238:5555/callback'           <<<<<< ici on a une ip du master en seconde entrée 
      name: 'Example App'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    enablePasswordDB: false
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  type: NodePort
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32000   <<<< node port dispo sur les hosts du cluster
  selector:
    app: dex



on va maintenant installer sur notre master l'appli de test de dex pour nous authentifier :

sudo apt-get install make golang-1.9
git clone https://github.com/coreos/dex.git
cd dex
git checkout v2.10.0
export PATH=$PATH:/usr/lib/go-1.9/bin
go get github.com/coreos/dex
make bin/example-app
export MY_IP=$(curl -s ifconfig.co)

on laisse l'appli tourner en background : 
./bin/example-app --issuer https://dex.newtech.academy:32000 --issuer-root-ca /etc/kubernetes/pki/openid-ca.pem --listen http://${MY_IP}:5555 --redirect-uri http://${MY_IP}:5555/callback


on  va créer un user pour valider notre test :

cat user.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: exampleUser
  namespace: default
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: exampleUser
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: exampleUser
subjects:
- kind: User
  name: your@email.inv  <<<<< on saisi l'adresse email donnée sur le compte github.
  namespace: default

une fois créee , on va maintenant recupérer un token en nous connectant sur l'appli d'exemple :

http://178.62.90.238:5555

on clic sur se logger : on arrive sur une page https non validé car c'est un autosigné 
puis on arrive sur une page github , on clic sur authoriser l'application definie kubernetes dex , une fois fait on est redirigé vers l'url de callback définie et on a un token généré.

on va maintenant definir notre token en variable et crée un user context dans kube utilisant ce token :

kubectl config set-credentials developer --auth-provider=oidc --auth-provider-arg=idp-issuer-url=https://dex.newtech.academy:32000 --auth-provider-arg=client-id=example-app --auth-provider-arg=idp-certificate-authority=/etc/kubernetes/pki/openid-ca.pem  --auth-provider-arg=id-token=${TOKEN}


on defini ce context par defaut :
kubectl config set-context dev-default --cluster=kubernetes --namespace=default --user=developer
kubectl config use-context dev-default

si on test on voit que le user peut se connecter et recupérer la liste des pods mais pas des nodes comme specifié dans le rbac ...

il est possible de générer un renouvellement auto du token mais ceci n'est pas conseillé car on doit partager un secret avec le end user :

# Auto-renewal of token
For autorenewal, you need to share the client secret with the end-user (not recommended)
```
kubectl config set-credentials developer --auth-provider=oidc --auth-provider-arg=idp-issuer-url=https://dex.newtech.academy:32000 --auth-provider-arg=client-id=example-app --auth-provider-arg=idp-certificate-authority=/etc/kubernetes/pki/openid-ca.pem  --auth-provider-arg=id-token=${TOKEN} --auth-provider-arg=refresh-token=${REFRESH_TOKEN} --auth-provider-arg=client-secret=${CLIENT_SECRET}


=  ldap config :  =


sur un node master du cluster pour tester on va installer un ldap :

sudo apt-get -y install slapd ldap-utils gnutls-bin ssl-cert

on defini un password ldap

on peut reconfigurer le ldap :

sudo dpkg-reconfigure slapd

on defini un fake domain pour nos test  : example.com
orgabisation example.inc

on configure un passwd pour l'admin et on set mdb comme storage db
on peut remove l'ancienne db si besoin.
on utilise les derniers protocoles ldap

dex veut du chiffrement pour le ldap sinon on est en clair.
on va donc créer des certif pour ldap :
on va s'assurer de renseigner les bonnes infos : 
cat gencert-ldap.sh
#!/bin/bash

# from https://help.ubuntu.com/lts/serverguide/openldap-server.html

set -x

sudo sh -c "certtool --generate-privkey > /etc/ssl/private/cakey.pem"

echo 'cn = Example Company
ca
cert_signing_key
' > /tmp/ca.info

sudo mv /tmp/ca.info /etc/ssl/ca.info

sudo certtool --generate-self-signed \
--load-privkey /etc/ssl/private/cakey.pem \
--template /etc/ssl/ca.info \
--outfile /etc/ssl/certs/cacert.pem

sudo certtool --generate-privkey \
--bits 1024 \
--outfile /etc/ssl/private/ldap01_slapd_key.pem

echo 'organization = Example Company
cn = ldap01.example.com    <<< notre host avec notre fake domaine 
tls_www_server
encryption_key
signing_key
expiration_days = 3650' > /tmp/ldap01.info

sudo mv /tmp/ldap01.info /etc/ssl/ldap01.info

sudo certtool --generate-certificate \
--load-privkey /etc/ssl/private/ldap01_slapd_key.pem \
--load-ca-certificate /etc/ssl/certs/cacert.pem \
--load-ca-privkey /etc/ssl/private/cakey.pem \
--template /etc/ssl/ldap01.info \
--outfile /etc/ssl/certs/ldap01_slapd_cert.pem

sudo chgrp openldap /etc/ssl/private/ldap01_slapd_key.pem
sudo chmod 0640 /etc/ssl/private/ldap01_slapd_key.pem
sudo gpasswd -a openldap ssl-cert

sudo sh -c "cat /etc/ssl/certs/cacert.pem >> /etc/ssl/certs/ca-certificates.crt"

sudo systemctl restart slapd.service

on va maintenant modifier notre ldap pour qu'il prenne en charge nos certificats :

on a une arbo ldap de créer :
ls ldap 
certinfo.ldif  users.ldif

cat ldap/certinfo.ldif
dn: cn=config
add: olcTLSCACertificateFile
olcTLSCACertificateFile: /etc/ssl/certs/cacert.pem
-
add: olcTLSCertificateFile
olcTLSCertificateFile: /etc/ssl/certs/ldap01_slapd_cert.pem
-
add: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/ssl/private/ldap01_slapd_key.pem

on modifie notre ldap pour qu'il prenne en compte nos certif :

sudo ldapmodify -H ldapi:// -Y EXTERNAL -f ldap/certinfo.ldif

on va ajouter un user pour tester notre fonctionnement 
on a donc un user account avec une mailbox , un password et un service account qui sera utilisé par kube. 
ex : 
cat ldap/users.ldif          [☸ minikube:default]
dn: ou=People,dc=example,dc=com
objectClass: organizationalUnit
ou: People

dn: ou=Groups,dc=example,dc=com
objectClass: organizationalUnit
ou: Groups

dn: cn=miners,ou=Groups,dc=example,dc=com
objectClass: posixGroup
cn: miners
gidNumber: 5000

dn: uid=john,ou=People,dc=example,dc=com
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
uid: john
sn: Doe
givenName: John
cn: John Doe
displayName: John Doe
uidNumber: 10000
gidNumber: 5000
userPassword: johnldap
gecos: John Doe
mail: john@doe.inv
loginShell: /bin/bash
homeDirectory: /home/john

dn: uid=serviceaccount,ou=People,dc=example,dc=com
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
uid: serviceaccount
sn: serviceaccount
givenName: serviceaccount
cn: service account
displayName: service account
uidNumber: 99999
gidNumber: 9999
userPassword: serviceaccountldap
gecos: Service Account
loginShell: /bin/false
homeDirectory: /home/serviceaccount

ldapadd -x -D cn=admin,dc=example,dc=com -W -f ldap/users.ldif


on doit maintenant ajouter le ldaps dans la conf de notre ldap :

 /etc/default/slapd
```
SLAPD_SERVICES="ldap:/// ldapi:/// ldaps:///"  <<< on rajoute ldaps 

on redemarre ldap 
sudo systemctl restart slapd.service

pour tester notre ldap on va modifier le /etc/hosts du master kube 

127.0.0.1 localhost ldap01.example.com

on recherche notre user :

ZZ signifie en ssl 

ldapsearch -x -D 'uid=serviceaccount,ou=People,dc=example,dc=com' -w 'serviceaccountldap' -H ldap:///ldap01.example.com -ZZ -b dc=example,dc=com 'uid=john' cn gidNumber  

si on utilise localhost le certificat ne match pas et on a une erreur.

on peut forcer à toujours utiliser ssl en ajoutant le port :

ldapsearch -x -D 'uid=serviceaccount,ou=People,dc=example,dc=com' -w 'serviceaccountldap' -H ldaps:///ldap01.example.com:636 b dc=example,dc=com 'uid=john' cn gidNumber  


il est possible d'avoir des erreurs de type DNS SRV: Could not turn DN="ldap01.example.com" into a domain

dans ce cas pour tester on pourra requetter en local notre ldap sans préciser de host :

root@boogie-hypervisor:~/dex/on-prem-or-cloud-agnostic-kubernetes/dex# ldapsearch -x -D 'uid=serviceaccount,ou=People,dc=example,dc=com' -w 'serviceaccountldap'  -b dc=example,dc=com 'uid=john' cn gidNumber
# extended LDIF
#
# LDAPv3
# base <dc=example,dc=com> with scope subtree
# filter: uid=john
# requesting: cn gidNumber
#

# john, People, example.com
dn: uid=john,ou=People,dc=example,dc=com
cn: John Doe
gidNumber: 5000

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1

on  a bien la reponse de notre ldap -> c'est ok



on va maintenant modifier la config map pour ajouter le certifact tls 
on ajoute le certif de notre conf situé /etc/ssl/certs/cacert.pem

kubectl edit configmap ldap-tls -n dex 

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: ldap-tls
  namespace: dex
data:
  cacert.pem: |
    empty         <<< on ajoute notre certif généré.
---

on va editer la seconde config map :


cat configmap-ldap.yaml 
apiVersion: v1
kind: ConfigMap
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    issuer: https://dex.newtech.academy:32000
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.newtech.academy:32000/callback
        org: kubernetes
    - type: ldap                                                            <<<<< on renseigne nos confs 
      id: ldap
      name: LDAP
      config:
        host: ldap01.example.com:636
        rootCA: /etc/dex/ldap-tls/cacert.pem

        # The DN and password for an application service account. The connector uses
        # these credentials to search for users and groups. Not required if the LDAP
        # server provides access for anonymous auth.
        # Please note that if the bind password contains a `$`, it has to be saved in an
        # environment variable which should be given as the value to `bindPW`.
        bindDN: uid=serviceaccount,ou=People,dc=example,dc=com
        bindPW: serviceaccountldap

        # The attribute to display in the provided password prompt. If unset, will
        # display "Username"
        usernamePrompt: SSO Username

        # User search maps a username and password entered by a user to a LDAP entry.
        userSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=person)(uid=<username>))".
          baseDN: ou=People,dc=example,dc=com                                       <<<< on adapte la conf en fonction de nos besoins.
          # Optional filter to apply when searching the directory.
          filter: "(objectClass=inetOrgPerson)"

          # username attribute used for comparing user entries. This will be translated
          # and combined with the other filter as "(<attr>=<username>)".
          username: uid
          # The following three fields are direct mappings of attributes on the user entry.
          # String representation of the user.
          idAttr: uid
          # Required. Attribute to map to Email.
          emailAttr: mail
          # Maps to display name of users. No default value.
          nameAttr: cn

        # Group search queries for groups given a user entry.
        groupSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=group)(member=<user uid>))".
          baseDN: ou=Groups,dc=example,dc=com
          # Optional filter to apply when searching the directory.
          filter: "(objectClass=group)"

          # Following two fields are used to match a user to a group. It adds an additional
          # requirement to the filter that an attribute in the group must match the user's
          # attribute value.
          userAttr: uid
          groupAttr: member

          # Represents group name.
          nameAttr: name
    oauth2:
      skipApprovalScreen: true
    staticClients:
    - id: example-app
      redirectURIs:
      - 'http://178.62.90.238:5555/callback'
      name: 'Example App'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    enablePasswordDB: false

bien verifier les termes car chaque ldap est different 

on applique notre conf : 
kubectl apply -f configmap-ldap.yaml

on delete les pods du namespace dex 
puis ceux ci sont redémarrés avec la bonne conf 

on va pouvoir se reconnecter à notre appli exemple de dex qui propose maintenant en plus de github un login ldaps :
quand on clic sur ldap ..on retouve un token ..qu'on va utiliser pour nosu connecter à kube ....




























====== article objectif libre : === 
https://www.objectif-libre.com/fr/blog/2017/12/29/kubernetes-authentification-ldap/
Interfacer votre Kubernetes avec un LDAP : explication et tutoriel.

Objectif
Kubernetes ne permet pas de s’interfacer nativement avec un annuaire LDAP. Pour cela, plusieurs briques supplémentaires sont nécessaires.

Cet article explique comment agencer et configurer ces différents services.

OpenID connect
Le système d’authentification OpenID Connect est au centre de l’authentification LDAP sur Kubernetes.

Ce système met en jeu plusieurs acteurs :

L’utilisateur : demandeur d’un token de connexion à Kubernetes
L’Identity Provider : gère la liaison avec le système d’authentification (LDAP), et est fournisseur du token de connexion à Kubernetes
L’application cliente : UI permettant l’envoi des scopes d’authentification et l’affichage des informations de connexions renvoyées par le serveur
Kubernetes : consommateur du token
Lorsqu’un utilisateur souhaite se connecter au Kubernetes via ses identifiants LDAP, il faudra qu’il suive les étapes suivantes :

Accès à l’application cliente
Redirection vers le serveur d’authentification
Authentification LDAP auprès du serveur d’authentification
Redirection vers l’application cliente :  récupération des informations de connexion pour Kubernetes
Authentification auprès de Kubernetes avec votre token
Mise en œuvre
Pour le lab, nous utiliserons plusieurs outils :

Minikube
Dex
OpenLDAP
Les tests ont été effectués sur une distribution Ubuntu 17.04.

L’ensemble des manipulations ci-dessous sont à effectuer sur votre poste tant qu’il n’est pas spécifié de travailler sur la VM minikube.

Mise en place du LDAP de test
Pré-requis : Docker

Lancement du conteneur OpenLDAP :
docker run --name ldap -p 1389:389 -d osixia/openldap:1.1.10
Ajout de données de test
cat <<EOF > config-ldap.ldif
dn: ou=People,dc=example,dc=org
objectClass: organizationalUnit

dn: uid=janedoe,ou=People,dc=example,dc=org
objectClass: posixAccount
objectClass: inetOrgPerson
objectClass: top
cn: Jane Doe
sn: Doe
gidNumber: 10001
gecos: Jane Doe
uidNumber: 10001
loginShell: /bin/bash
homeDirectory: /home/jdoe
mail: jane.doe@example.org
uid: janedoe
userpassword: foo

dn: uid=johndoe,ou=People,dc=example,dc=org
objectClass: posixAccount
objectClass: inetOrgPerson
objectClass: top
cn: John Doe
sn: Doe
gidNumber: 10002
gecos: John Doe
uidNumber: 10002
loginShell: /bin/bash
homeDirectory: /home/jdoe
mail: john.doe@example.org
uid: johndoe
userpassword: bar

# Group definitions.

dn: ou=Groups,dc=example,dc=org
objectClass: organizationalUnit
ou: Groups

dn: cn=admins,ou=Groups,dc=example,dc=org
gidnumber: 20001
objectclass: posixgroup
objectclass: top
cn: admins
memberuid: janedoe
memberuid: johndoe

dn: cn=developers,ou=Groups,dc=example,dc=org
gidnumber: 20002
objectclass: posixgroup
objectclass: top
cn: developers
memberuid: janedoe
EOF

sudo apt install -y ldap-utils
ldapadd -H ldap://localhost:1389 -D "cn=admin,dc=example,dc=org" -w admin -f config-ldap.ldif
# Ajouter l'entrée "127.0.0.1 ldap.example.org" dans votre fichier /etc/hosts
Configuration du service Dex
Prérequis : LDAP fonctionnel

Dex est notre Identity Provider : il nous permet d’obtenir un token rendant possible l’authentification sur Kubernetes.

Création de la configuration Dex :
cat <<EOF > config-dex.yaml
issuer: https://dex.example.com:5554/dex
storage:
 type: sqlite3
 config:
 file: dex.db
web:
 http: 0.0.0.0:5556
 https: 0.0.0.0:5554
 tlsCert: /etc/dex/cfg/ssl/cert.pem
 tlsKey: /etc/dex/cfg/ssl/key.pem
logger:
 level: "debug"
 format: "text"
staticClients:
- id: minikube
  redirectURIs:
  - 'http://127.0.0.1:5555/callback'
  name: 'Minikube Auth'
  secret: ZXhhbXBsZS1hcHAtc2VjcmV0
oauth2:
 skipApprovalScreen: true
connectors:
- type: ldap
  id: ldap
  name: LDAP
  config:
    host: ldap.example.org:1389
    insecureNoSSL: true
    insecureSkipVerify: true
    startTLS: false
    bindDN: cn=admin,dc=example,dc=org
    bindPW: admin
    userSearch:
      baseDN: ou=People,dc=example,dc=org
      filter: "(objectClass=posixAccount)"
      username: mail
      idAttr: uid
      emailAttr: mail
      nameAttr: uid
    groupSearch:
      baseDN: ou=Groups,dc=example,dc=org
      filter: "(objectClass=posixgroup)"
      userAttr: uid
      groupAttr: memberuid
      nameAttr: cn
EOF
Génération des certificats pour Dex :
wget https://raw.githubusercontent.com/coreos/dex/master/examples/k8s/gencert.sh
# Ajouter l'entrée "127.0.0.1 dex.example.com" dans votre fichier /etc/hosts
chmod +x gencert.sh
./gencert.sh
 Lancement de Dex :
docker run --name dex --network host -d -v $(pwd):/etc/dex/cfg/ quay.io/coreos/dex:v2.9.0 serve /etc/dex/cfg/config-dex.yaml
Vous devriez maintenant avoir un identity provider fonctionnel permettant de délivrer des tokens pour les utilisateurs stockés dans votre LDAP de test.

 

Configuration de notre application cliente
Nous allons utiliser une application cliente fournie comme exemple par Dex, mais légèrement modifiée (du CSS et du formatage pour l’utilisation du token avec Kubernetes)

Configuration de l’application
cat <<EOF > config-login-app.yaml
# ID pour authentifier l'application auprès de Dex
client_id: "minikube"
# Secret partagé
client_secret: ZXhhbXBsZS1hcHAtc2VjcmV0
# URL d'accès à Dex
issuer_url: "https://dex.example.com:5554/dex"
# CA signant le certificat de Dex
issuer_root_ca: "/config/ssl/ca.pem"
# URL de redirection
redirect_url: "http://127.0.0.1:5555/callback"
# IP, Port et protocol d'écoute
listen: "http://0.0.0.0:5555"
# Désactivation des champs "extra_scopes" dans l'application
disable_choices: false
# Les extra_scopes
extra_scopes: "groups"
# En-tête de l'application
app_name: "Kubernetes Login"
EOF
Lancement de l’application :
docker run --name login-app -d --network host -v $(pwd):/config/ objectiflibre/login-app /config/config-login-app.yaml
Vous devriez maintenant pouvoir vous connecter sur http://localhost:5555.

Après avoir cliqué sur « Requests Token » sur la page de login, vous serez redirigé sur l’interface d’authentification Dex. Renseignez l’utilisateur « jane.doe@example.org » et le mot de passe « foo ».

Configuration de Minikube
Et maintenant le cœur du sujet : l’authentification sur Kubernetes !

Pré-requis : binaire minikube

Lancement de Minikube avec les informations de connexion OIDC :
minikube start \
 --kubernetes-version v1.8.0 \
 --mount-string "$(pwd):/minikube-host" \
 --mount \
 --extra-config=apiserver.Authorization.Mode=RBAC \
 --extra-config=apiserver.Authentication.OIDC.IssuerURL=https://dex.example.com:5554/dex \
 --extra-config=apiserver.Authentication.OIDC.UsernameClaim=email \
 --extra-config=apiserver.Authentication.OIDC.ClientID="minikube" \
 --extra-config=apiserver.Authentication.OIDC.GroupsClaim=groups \
 --extra-config=apiserver.Authentication.OIDC.CAFile="/minikube-host/ssl/ca.pem"
Les certificats sont récupérés automatiquement grâce au point de montage « /minikube-host ». Il est cependant nécessaire de modifier le fichier « /etc/hosts » pour pointer vers notre Dex local.

Modification du fichier « /etc/hosts » :
minikube ssh
sudo -i
echo "192.168.99.1  dex.example.com" >> /etc/hosts
Ajout des RBAC pour notre groupe « admins » :
cat <<EOF > rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ldap_cluster_admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: admins
EOF

kubectl apply -f rbac.yaml
 Test de connexion :
Récupérez les informations de connexion depuis l’application de login, et copier/coller le contenu dans la partie users du fichier ~/.kube/config.

Puis, connectez-vous avec votre utilisateur « janedoe » :

kubectl --user=janedoe get po -n kube-system
Et en production ?
Ce tutoriel vous permettra de tester les fonctionnalités de Dex + Kubernetes en local, de manière non-sécurisée et peu stable. Quelques pistes pour la mise en production du service :

Modifier la configuration Dex pour accéder au LDAP en LDAPS/Start TLS
# config-dex.yml
connectors:
- type: ldap
  config:
    startTLS: true
    rootCA: /etc/dex/ssl/ldap-ca.pem
[...]
Passer l’application cliente et Dex en HTTPS
Mise en haute disponibilité des services :
L’application cliente est nativement sans état.
Dex nécessite un stockage externalisé, plusieurs méthodes sont aujourd’hui fonctionnelles : Etcd, Kubernetes (CRD & PTR) et Postgres.
L’accès aux applications peut ensuite être load balancé.

Pour les curieux : un exemple d’intégration de la stack {Application Cliente / Dex / Letsencrypt / Kubernetes} est disponible sur ce dépôt GitHub.
https://github.com/ObjectifLibre/k8s-ldap

Liens utiles
Documentation Dex : https://github.com/coreos/dex/tree/master/Documentation
https://github.com/dexidp/dex/tree/master/Documentation

Documentation OIDC/Kubernetes : https://kubernetes.io/docs/admin/authentication/#option-1—oidc-authenticator
https://kubernetes.io/docs/reference/access-authn-authz/authentication/#option-1---oidc-authenticator

Ressources & documentation Docker LDAP/osixia : https://github.com/osixia/docker-openldap
https://kubernetes.io/docs/reference/access-authn-authz/authentication/#option-1---oidc-authenticator

