=== notes microk8S ===


- ajouter dans notre path les binairesde snap :

export PATH="$PATH:${HOME}/bin:/usr/local/custom-go/go/bin:/snap/bin"


- install :

on aura la version stable de kube portée dans microk8s
snap install microk8s --classic

on pourra choisir un version précise avec :
snap install microk8s --classic --channel=1.14/stable

on peut voir les différentes versions avec : 
snap info microk8s

- status /start /stop 

microk8s.status
microk8s.start
microk8s.stop

Attention les binaires sont dans /snap/bin -> il faudra donc les ajouter à notre path :

# add microk8s bin in our path
export PATH="$PATH:/snap/bin"


Attention : il pouvoir etre tres utile d'avoir l'ip de notre host renseignée dans le fichier hosts ...sous peine d'avoir des soucis pour se connecter a nos pods ...
ex :
192.168.0.77 boogie-host

- reset : 
en cas de souci on va pouvoir cleaner totalement notre cluster 
microk8s.reset
puis si besoin desinstaller 
snap remove microk8s

de base un snapshot est conservé on peut le delete si on veut  :

snap remove microk8s
Save data of snap "microk8s" in automatic snapshot set #3                                                                                                           |Save data of snap "microk8s" in automatic snapshot set #3

snap forget 3      
Snapshot #3 forgotten.


/!\ Attention il peut être compliquer de supprimer microk8s des points de montage pouvant toujours être présents 

On va devoir supprimer des reps :
sudo rm -rf /var/snap/microk8s/common/


- cmd kube : 
microk8s.kubectl get nodes
microk8s.kubectl get services

Nb : les binaires sont dans /snap/bin 

- on peut créer un alias pour kubectl ( si on a pas deja le binaire sur notre machine )
snap alias microk8s.kubectl kubectl

on peut supprimer l'alias sans souci : 
snap unalias kubectl


- integration de microk8s dans notre conf globale : si on a deja acces a des cluster kube : on va pour voir definir les infos a saisir dans notre .kube/config pour ajouter les infos de microk8s nécéssaires .

On recupere les infos avec : 
microk8s.kubectl config view --raw 

si on a que le cluster microk8s a gérer alors on peut direct injecter la conf dans le fichier de conf dédié de kubectl :

microk8s.kubectl config view --raw > $HOME/.kube/config


- add ons :

on peut activer / desactiver des plugins mirok8s facilement :
microk8s.enable dns dashboard
microk8s.disable dashboard dns



- activation dashboard : 

microk8s.enable  dashboard
On va pouvoir par exemple consulter notre dashboard : plusieurs etapes a faire :

1/ recupérer le point d'entrée que l'on utilisera dans notre browser :

microk8s.kubectl get all --all-namespaces |grep dashboard |grep service
..
kube-system   service/kubernetes-dashboard   ClusterIP   10.152.183.123   <none>        443/TCP                  32m

2/ recupérer le nom du token qui nous servira à la connexion 
on utilise le default token :

microk8s.kubectl -n kube-system get secret |grep default        
default-token-t6b45                kubernetes.io/service-account-token   3      72m

3/ recupérer la valeur du default token :

microk8s.kubectl -n kube-system describe secret default-token-t6b45   [☸ boogie-k:default]
Name:         default-token-t6b45
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: default
              kubernetes.io/service-account.uid: 7c59ad37-8774-4619-a74c-d48e5fc0387b

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1115 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLXQ2YjQ1Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI3YzU5YWQzNy04Nzc0LTQ2MTktYTc0Yy1kNDhlNWZjMDM4N2IiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.mvBecmwSRaYCofqKUPLEVGCOxjWk-ysZdzvpMdOAW15Zz-lv0bIPwuOba6-5IJ2hA6YkHrrYoqht9KQ_9nUXjkj27J1H1o92yD-jpFpfm7a6o9vDllrtjiZ8uSt0xd2-vXfVB06nj1_11jNMwGzMlUXIiGfZNLJzHfyIWMtvmgSvslLk7QKuNuQg3KC--A_urR0KlOmOcw5Y1He2pEwzaMbvT0e3I9ELptZJSDiH6WsVr51o4GKPv8r7U4UPZSKgnhLsIqpIBOXLXbQrIij2vFBUkiLkVNBsp-Cn1c3CyXJvllrxJixln0liPgEr3YUwi_Xs3J5lWcoo-SpTbYzlhw


4/ on va pouvoir maintenant se connecter :

https://10.152.183.123/#!/login

> on pourra donc saisir dans le champ token l'info qu'on a récupérer ..et avoir acces à notre dashboard 


- NB : l'activation du dashboard install aussi grafana et influx db 

on pourra se connecter aux ressources en recupérant les points d'entrées avec :
microk8s.kubectl cluster-info                                       [☸ boogie-k:default]

Kubernetes master is running at https://127.0.0.1:16443
Heapster is running at https://127.0.0.1:16443/api/v1/namespaces/kube-system/services/heapster/proxy
CoreDNS is running at https://127.0.0.1:16443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Grafana is running at https://127.0.0.1:16443/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy
InfluxDB is running at https://127.0.0.1:16443/api/v1/namespaces/kube-system/services/monitoring-influxdb:http/proxy

Grafana pourra donc être utiliser dans un browser.Le compte et le mot de passe renseigné dans notre .kube/config nous permettent la connexion


- activation prometheus :

microk8s.enable prometheus
...
....
The Prometheus operator is enabled (user/pass: admin/admin)


 boogie@FRLDE01011  ~  microk8s.kubectl get all --all-namespaces |grep prometheus |grep service


monitoring    service/prometheus-adapter      ClusterIP   10.152.183.254   <none>        443/TCP                  9m19s
monitoring    service/prometheus-k8s          ClusterIP   10.152.183.78    <none>        9090/TCP                 9m19s
monitoring    service/prometheus-operated     ClusterIP   None             <none>        9090/TCP                 9m
monitoring    service/prometheus-operator     ClusterIP   None             <none>        8080/TCP                 9m20s

un browser sur http://10.152.183.78:9090 permet de consulter la pannel de base de prometheus
http://10.152.183.78:9090/


- activation de fluentd : ce "plugin" permet le déploiment de  la stack elasticsearch-kibana-fluentd 

 boogie@FRLDE01011  ~  microk8s.kubectl get all --all-namespaces |grep elastic               [☸ boogie-k:default]
kube-system   pod/elasticsearch-logging-0                           1/1     Running   0          4m44s

kube-system   service/elasticsearch-logging   ClusterIP   10.152.183.56    <none>        9200/TCP                 4m44s
kube-system   statefulset.apps/elasticsearch-logging   1/1     4m44s


 boogie@FRLDE01011  ~  microk8s.kubectl get all --all-namespaces |grep kibana                [☸ boogie-k:default]
kube-system   pod/kibana-logging-df8d4c8fd-f2krf                    1/1     Running   0          4m55s
kube-system   service/kibana-logging          ClusterIP   10.152.183.187   <none>        5601/TCP                 4m55s
kube-system   deployment.apps/kibana-logging                   1/1     1            1           4m55s
kube-system   replicaset.apps/kibana-logging-df8d4c8fd                    1         1         1       4m55s



- remove de microk8s :

microk8s.reset
snap remove microk8s

Attention : si on a activé  le storage  
microk8s.enable storage : le menage des data doit être fait manuellement avant la suppression de microk8s




- reseau :

quand on crée le premier pod : microk8s génére l'iface cbr0 : il peut etree nécéssaire d'authoriser le traffic dessus : 

sudo ufw allow in on cbr0 && sudo ufw allow out on cbr0

pour eviter d'avoir des pbs de flux  vers ou depuis les pods il peut etre nécéssaire de s'assurer que les flux sont ouverts :

on va installer le paquet iptables-persistent 
sudo iptables -P FORWARD ACCEPT
sudo apt-get install iptables-persistent
si on est sur ufw on accept le traffic : 
sudo ufw default allow routed


- registries :

on peut bosser avec les registries distantes ( ex dockerhub) , locales ....

ex: simple : install de docker, set up user puis login avec le user ayant les droits : 
sudo apt-get install docker.io
sudo usermod -aG docker ${USER}
su - ${USER}

ex: docker file simple, puis build d'image : 
cat Dockerfile 
FROM nginx:alpine

To build the image tagged with mynginx:local, navigate to the directory where Dockerfile is and run:
docker build . -t nginx-local

on va devoir s'authentifier chez docker hub pour pull l'image de base qui sert à la construction de la notre :
docker login 

maintenant cette image buildée est dans le cache local de docker et on doit pouvoir la voir :

 boogie@FRLDE01011  /tmp/temp  docker images  |grep nginx   
nginx-local                   latest              ea1193fd3dde        12 days ago         20.6MB
nginx                         alpine              ea1193fd3dde        12 days ago         20.6MB


L'image créee est connu par docker mais par  microk8s puisque le daemon docker n'est pas inclu dans le cluster kube de microk8s.
On va donc exporter l'image de notre docker local et l'injecter dans le cache de microk8s 

docker save nginx-local > nginx-local-image.tar
Noter qu'on importe l'image dans microk8s en utilisant le namespace k8s.io 
microk8s.ctr -n k8s.io image import nginx-local-image.tar

on voit maintenant que  notre image est bien vu dans le cluster kube : 

 microk8s.ctr -n k8s.io images ls |grep nginx   
docker.io/library/nginx-local:latest                                                                          application/vnd.oci.image.manifest.v1+json                sha256:30957479162ba6d7e558dbdd69289d08cfb27262e79ac825fd55c4de47e0408f 22.6 MiB  linux/amd64                                                 io.cri-containerd.image=managed 

on va maintenant pouvoir tester et déployer un manifest pour tester. on va referencer l'image nginx-local:1  : kube va se comporter comme si c'etait une image du docker hub , comme il a deja l'image dans sont cache il ne va pas chercher à la pull.
Attention containerd (ctr) ne cache pas les images qui ont un tag latest ! il faut donc toujours mettre un num de tag 

 ✘ boogie@FRLDE01011  /tmp/temp  cat deploy 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx-local:1
        ports:
        - containerPort: 80


on deploy notre manifest :
kubectl apply -f deploy 

et on le voit dans  notre cluster microk8s :

kubectl -n default get pods
NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-bd5df9459-cbf7x   1/1     Running   0          2m36s



Working with public registries
After building an image with docker build . -t mynginx:local, it can be pushed to one of the mainstream public registries. You will need to create an account and register a username. For this example we created an account with https://hub.docker.com/ and we log in as kjackal.

First we run the login command:

docker login
Docker will ask for a Docker ID and password to complete the login.

Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: kjackal
Password: *******
Pushing to the registry requires that the image is tagged with your-hub-username/image-name:tag. We can either add proper tagging during build:

docker build . -t kjackal/mynginx:public
Or tag an already existing image using the image ID. Obtain the ID by running:

docker images
The ID is listed in the output:

REPOSITORY          TAG                 IMAGE ID            SIZE
mynginx             local               1fe3d8f47868        16.1MB
....
Then use the tag command:

docker tag 1fe3d8f47868 kjackal/mynginx:public
Now that the image is tagged correctly, it can be pushed to the registry:

docker push kjackal/mynginx
At this point we are ready to microk8s.kubectl apply -f a deployment with our image:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: kjackal/mynginx:public
        ports:
        - containerPort: 80
We refer to the image as image: kjackal/mynginx:public. Kubernetes will search for the image in its default registry, docker.io.

Working with MicroK8s’ registry add-on
Having a private Docker registry can significantly improve your productivity by reducing the time spent in uploading and downloading Docker images. The registry shipped with MicroK8s is hosted within the Kubernetes cluster and is exposed as a NodePort service on port 32000 of the localhost. Note that this is an insecure registry and you may need to take extra steps to limit access to it.

You can install the registry with:

microk8s.enable registry
The add-on registry is backed up by a 20Gi persistent volume is claimed for storing images. To satisfy this claim the storage add-on is also enabled along with the registry.

The containerd daemon used by MicroK8s is configured to trust this insecure registry. To upload images we have to tag them with localhost:32000/your-image before pushing them:

We can either add proper tagging during build:

docker build . -t localhost:32000/mynginx:registry
Or tag an already existing image using the image ID. Obtain the ID by running:

docker images
The ID is listed in the output:

REPOSITORY          TAG                 IMAGE ID            SIZE
mynginx             local               1fe3d8f47868        16.1MB
....
Then use the tag command:

docker tag 1fe3d8f47868 localhost:32000/mynginx:registry
Now that the image is tagged correctly, it can be pushed to the registry:

docker push localhost:32000/mynginx
Pushing to this insecure registry may fail in some versions of Docker unless the daemon is explicitly configured to trust this registry. To address this we need to edit /etc/docker/daemon.json and add:

{
  "insecure-registries" : ["localhost:32000"]
}
The new configuration should be loaded with a Docker daemon restart:

sudo systemctl restart docker
At this point we are ready to microk8s.kubectl apply -f a deployment with our image:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: localhost:32000/mynginx:registry
        ports:
        - containerPort: 80
What if MicroK8s runs inside a VM?
Often MicroK8s is placed in a VM while the development process takes place on the host machine. In this setup pushing container images to the in-VM registry requires some extra configuration.

Let’s assume the IP of the VM running MicroK8s is 10.141.241.175. When we are on the host the Docker registry is not on localhost:32000 but on 10.141.241.175:32000. As a result the first thing we need to do is to tag the image we are building on the host with the right registry endpoint:

docker build . -t 10.141.241.175:32000/mynginx:registry
If we immediately try to push the mynginx image we will fail because the local Docker does not trust the in-VM registry. Here is what happens if we try a push:

docker push  10.141.241.175:32000/mynginx
The push refers to repository [10.141.241.175:32000/mynginx]
Get https://10.141.241.175:32000/v2/: http: server gave HTTP response to HTTPS client
We need to be explicit and configure the Docker daemon running on the host to trust the in-VM insecure registry. Add the registry endpoint in /etc/docker/daemon.json:

{
  "insecure-registries" : ["10.141.241.175:32000"]
}
Then restart the docker daemon on the host to load the new configuration:

sudo systemctl restart docker
We can now docker push  10.141.241.175:32000/mynginx and see the image getting uploaded. During the push our Docker client instructs the in-host Docker daemon to upload the newly built image to the 10.141.241.175:32000 endpoint as marked by the tag on the image. The Docker daemon sees (on /etc/docker/daemon.json) that it trusts the registry and proceeds with uploading the image.

Consuming the image from inside the VM involves no changes:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: localhost:32000/mynginx:registry
        ports:
        - containerPort: 80
Reference the image with localhost:32000/mynginx:registry since the registry runs inside the VM so it is on localhost:32000.

Working with a private registry
Often organisations have their own private registry to assist collaboration and accelerate development. Kubernetes (and thus MicroK8s) need to be aware of the registry endpoints before being able to pull container images.

Insecure registry
Let’s assume the private insecure registry is at 10.141.241.175 on port 32000. The images we build need to be tagged with the registry endpoint:

docker build . -t 10.141.241.175:32000/mynginx:registry
Pushing the mynginx image at this point will fail because the local Docker does not trust the private insecure registry. The docker daemon used for building images should be configured to trust the private insecure registry. This is done by marking the registry endpoint in /etc/docker/daemon.json:

{
  "insecure-registries" : ["10.141.241.175:32000"]
}
Restart the Docker daemon on the host to load the new configuration:

sudo systemctl restart docker
Now running

docker push  10.141.241.175:32000/mynginx
…should succeed in uploading the image to the registry.

Attempting to pull an image in MicroK8s at this point will result in an error like this:

  Warning  Failed             1s (x2 over 16s)  kubelet, jackal-vgn-fz11m  Failed to pull image "10.141.241.175:32000/mynginx:registry": rpc error: code = Unknown desc = failed to resolve image "10.141.241.175:32000/mynginx:registry": no available registry endpoint: failed to do request: Head https://10.141.241.175:32000/v2/mynginx/manifests/registry: http: server gave HTTP response to HTTPS client
We need to edit /var/snap/microk8s/current/args/containerd-template.toml and add the following under [plugins] -> [plugins.cri.registry] -> [plugins.cri.registry.mirrors]:

        [plugins.cri.registry.mirrors."10.141.241.175:32000"]
          endpoint = ["http://10.141.241.175:32000"]
See the full file here.

Restart MicroK8s to have the new configuration loaded:

microk8s.stop
Allow a few seconds for the service to close fully before starting again:

microk8s.start
The image can now be deployed with:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: 10.141.241.175:32000/mynginx:registry
        ports:
        - containerPort: 80
Note that the image is referenced with 10.141.241.175:32000/mynginx:registry.

Secure registry
There are a lot of ways to setup a private secure registry that may slightly change the way you interact with it. Instead of diving into the specifics of each setup we provide here two pointers on how you can approach the integration with Kubernetes.

In the official Kubernetes documentation a method is described for creating a secret from the Docker login credentials and using this to access the secure registry. To achieve this, imagePullSecrets is used as part of the container spec.

MicroK8s v1.14 and onwards uses containerd. As described here to be aware of the secure registry and the credentials needed to access it. As shown above, configuring containerd involves editing  /var/snap/microk8s/current/args/containerd-template.toml and reloading the new configuration via a microk8s.stop, microk8s.start cycle.


