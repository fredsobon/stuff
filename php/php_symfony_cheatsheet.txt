= symfony app =

- il est possible de tester via quelques commandes la console symfony :
localiser le binaire php (en fonction des env des paths peuvent être utilisées : )

on peut de maniere "empirique" tabuler pour voir des infos potentielles : 
 
/usr/bin/php console --env=NOTRE_ENV router:debug
/opt/rh/rh-php56/root/usr/bin/php console --env=NOTRE_ENV router:debug


Attention en fonction des version de symfony les binaires peuvent être placés à différents endroits :

ex : 

/var/www/apli/current/app/console 
ou 
/var/www/apli/current/bin/console 

on va lancer  notre commande 

[php /var/www/appli/current/bin] $ ./console --env=prod 
Symfony 3.4.11 (kernel: app, env: prod, debug: false)

Usage:
  command [options] [arguments]

Options:
  -h, --help            Display this help message
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi            Force ANSI output
      --no-ansi         Disable ANSI output
  -n, --no-interaction  Do not ask any interactive question
  -e, --env=ENV         The Environment name. [default: "prod"]
      --no-debug        Switches off debug mode.
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  about                                     Displays information about the current project
  help                                      Displays help for a command
  list                                      Lists commands
 assets
  assets:install                            Installs bundles web assets under a public directory
 cache
  cache:clear                               Clears the cache
  cache:pool:clear                          Clears cache pools
  cache:pool:prune                          Prunes cache pools
  cache:warmup                              Warms up an empty cache
 config
  config:dump-reference                     Dumps the default configuration for an extension
 debug
  debug:autowiring                          Lists classes/interfaces you can use for autowiring
  debug:config                              Dumps the current configuration for an extension
  debug:container                           Displays current services for an application
  debug:event-dispatcher                    Displays configured listeners for an application
  debug:form                                Displays form type information
  debug:router                              Displays current routes for an application
  debug:translation                         Displays translation messages information
 doctrine
  doctrine:cache:contains                   Check if a cache entry exists
  doctrine:cache:delete                     Delete a cache entry
  doctrine:cache:flush                      [doctrine:cache:clear] Flush a given cache
  doctrine:cache:stats                      Get stats on a given cache provider
  doctrine:database:create                  Creates the configured database
  doctrine:database:drop                    Drops the configured database
  doctrine:generate:entities                [generate:doctrine:entities] Generates entity classes and method stubs from your mapping information
  doctrine:mapping:import                   Imports mapping information from an existing database
  ilius:refresh-significant-location        Create new kafka messages who will calculate members daily locations
 lint
  lint:xliff                                Lints a XLIFF file and outputs encountered errors
  lint:yaml                                 Lints a file and outputs encountered errors
 monitor
  monitor:health                            Runs Health Checks
  monitor:list                              Lists Health Checks
 router
  router:match                              Helps debug routes by simulating a path info match
 security
  security:encode-password                  Encodes a password.
 translation
  translation:update                        Updates the translation file




En fonction des verrsions de symfony le binaire "console" peut être situé a différents endroits 

ex : clear de cache à faire en user php  :

current/app] $ ./console --env=uat cache:clear




==== logging symfony : ===

en fonction de la version symfony on va pouvoir avoir des paths pour les logs différents :
ex : 
/var/www/monapp/current/var/logs/   -> symfony2
/var/www/monapp/current/app/logs/   -> symfony3


le path des logs peut se faire avec le setting de : '%kernel.logs_dir%/%kernel.environment%.monapp.log'




