=== ruby notes from code academie : ===


== intro : 

Ruby est simple et proche du language naturel.
C'est un language interpreté qui est utilsable avec un shell facilement installable sur un pc :
Tout est objet sous ruby.
Data types - intro :
on s'interre d'abord aux types simples  numbers, strings et booleens.
Attention aux booleens  : ne pas  les entourer par des " ou des ( : ruby les interprettra comme des strings.
Ruby est case sensitive.
On declare les variables avec des lowercases et par conventions on ajoute un "_" pour separer les mots :
ex : declaration de variable :

my_num = 25    # Add your code here!

my_boolean = true     # And here!

my_string = "Ruby"     # Also here.

= Opérateurs mathematiques :

Addition (+)
Subtraction (-)
Multiplication (*)
Division (/)
Exponentiation (**)
Modulo (%)


sum = 13 + 379
product = 923 * 15
quotient = 13209 / 17


= instructions d'affichage print et puts :

print : permet d'afficher litteralement ce qui est saisi
puts : rajoute une nouvelle ligne vide
rb(main):002:0> print "hugh!"
hugh!=> nil
irb(main):003:0> puts "bounga!"
bounga!
=> nil

= intro object :
Ruby embarque des builts in qui vont servir de methodes pour les differents type ( ex : methode pour modifier du texte )
on peut donc saisir un objet puis invoquer une methode valable sur cet objet en la separant de l'objet via un "." :

- methodes sur strings :

length :
utile pour s'assurer par exemple du nombre de caractères saisis :

irb(main):008:0> "hello".length
=> 5
irb(main):009:0> "lapin 32".length
=> 8  ## ici on compte l'espace entre lapin et 32

reverse :

irb(main):010:0> "lapin 32".reverse
=> "23 nipal"
irb(main):011:0> "1 2 3 4 5".reverse
=> "5 4 3 2 1"

upcase - downcase :
convertit respectivement en maj et en minuscule notre texte :

irb(main):019:0> "lapin".upcase
=> "LAPIN"
irb(main):020:0> "LAPIN".downcase
=> "lapin"


On  peut cumuler les methodes :
irb(main):021:0> "LAPIN".downcase.reverse
=> "nipal"

irb(main):025:0> name = "FrEd"
=> "FrEd"
irb(main):026:0> name.downcase.reverse.upcase
=> "DERF"

commentaires :
Les commentaires en ruby sont les # 
irb(main):024:0> puts "hello jack " # you mean nicholson ?
hello jack 
=> nil
On peut faire du commentaire multiligne en encadrant notre texte par les balises =begin et =end

=begin
aloa
bla
blablabla
=end



