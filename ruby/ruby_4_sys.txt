=== notes from ruby for system administrator : ===

== introduction : 

execution de l'interpreteur ruby et de commande à la suite : ici puts affiche avec un retour à la ligne.
ruby -e 'puts "hello world!"'
 
- dans un fichier :
#!/usr/bin/env ruby
puts "hello world"

- dans un shell : 
boogie@x61-boogie:~/lab/ruby$ irb
irb(main):001:0> word = "lapin"
=> "lapin"
irb(main):002:0> word.reverse
=> "nipal"
" poo : 
Ruby has a cute method resolution mechanism, which means that puts is semantically the
same as self.puts or, if that method doesn’t exist, Kernel.puts. self is an OO convention for
referring to the current object of context. In the case of our Hello World example, self would
refer to an object called main (which is provided implicitly by the interpreter) because we are in
the context of the main program flow and not (for example) in a specific class or module definition.
This object does not implement the method puts, so we fall back to Kernel’s puts method.
The other object in the example was "hello world" itself, which was naturally of class
String. To demonstrate this, we can use a method call to give each word a capital letter at the
beginning:

puts "hello world".capitalize

Kernel’s puts is a convenience method that assumes we want to dump our string to standard
out. What if we wanted to dump the string to standard error instead? It turns out that the actual
puts method is provided by the IO class, and there are global objects of this class defined for
each of the normal UNIX file-handles: $stdin, $stdout, and $stderr."

