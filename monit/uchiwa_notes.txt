=== notes uchiwa : from https://docs.uchiwa.io/ =

= concepts basiques : =

-> Datacenter : représentation logique d'un cluster sensu. on peut utiliser cette conf pour hierarchiser nos env dc.

-> High Availibilty 

on peut definir plusieurs api sensu pour fournir un failover et un loaddbalancing rudimentaire entre ces aps

on peut assez facilement mettre en place cette fonction.  Dans l'exemple suivant on peut donc definir deux objects sensu avec le même nom  : ici on a un dc us-east-1 qui a deux api : uchiwa va load balancer les requetes 

{
  "sensu": [
    {
      "name": "us-east-1",
      "host": "10.0.0.1",
      "port": 4567
    },
    {
      "name": "us-east-1",
      "host": "10.0.0.2",
      "port": 4567
    }
  ]  
}

Attention pour utiliser cette configuration on va devoir ajuster un param de secutité et modifier la conf . En effet notmalement au demarrage de l'appli uchiwa génere  une clé temporaire qui sera par la suite détruite : cette clé est utilisée pour générer et valider les signatures des tokens json ( JWT : json web ticket )
  
il faut donc générer  une clé et l'ajouter à la conf :

1 /generation de la clé :
openssl genrsa -out uchiwa.rsa 2048

2/extraction de la clé pub :
openssl rsa -in uchiwa.rsa -pubout > uchiwa.rsa.pub

puis ajouter les paths des clé dans la conf :

{
  "uchiwa": {
    "auth": {
      "privatekey": "/path/to/uchiwa.rsa",
      "publickey": "/path/to/uchiwa.rsa.pub"
    }
  }
}

on redémmare sensu et ç'a doit être pri en compte.
"message":"Provided RSA keys successfully loaded"
 
 


= Requêtes : =



Queries
#

The most basic query is composed of a value but can also contains a field and its value, in the form of field:value. When only specifying the value, all fields are tested against it.

A query can use any field, visible or not, to match a value, such as:

    us-west-1
    dc:us-west-1
    subscriber:rabbitmq
    subscription:linux
    team:webops

Regular Expressions
#

Javascript’s RegExp object is used to retrieve the matches, thus the following special characters are available to use exclusively in the values of a query.

. - Matches any single character. For example, dc:a.stria matches the datacenter austria.

* - Matches the preceding character 0 or more times. For example, dc:can* matches the datacenters canada and vatican, but not cameroon.

+ - Matches the preceding character 1 or more times. For example, dc:ira+ matches the datacenters iran and iraq, but not ireland.

? - Matches the preceding character 0 or 1 time. For example, dc:oc?o matches the datacenter cameroon, but not morocco.

^ - Matches beginning of input. For example, dc:^por matches the datacenter portgual, but not singapore.

$ - Matches end of input. For example, dc:nea$ matches the datacenter guinea, but not guinea-bissau.

See the RegExp Object documentation for possible quantifiers



= Securité : =

Encrypted Passwords
#

You can place hashed passwords in the password attributes, but only within the uchiwa object, in order to obfuscate users passwords in your configuration files.

Please note that you must absolutely use the {crypt} prefix when using an encrypted password. For example:

"password": "{crypt}$1$MteWnoFT$yhEi8KMxO794K0TIriZcI0"

The following algorithms are supported (along the commands to create the hashes):
Algorithm 	Command
APR1 	openssl passwd -apr1 MY_PASSWORD
MD5 	mkpasswd --method=MD5 MY_PASSWORD
SHA-256 	mkpasswd --method=SHA-256 MY_PASSWORD
SHA-512 	mkpasswd --method=SHA-512 MY_PASSWORD
HTTPS Encryption
#

You can serve all content over HTTPS, using Uchiwa, without the need of a reverse proxy. To get started, follow these few steps:

Optional - Generate a private key:

openssl genrsa -out uchiwa.key 2048

Optional - Generate a self-signed certificate:

openssl req -new -x509 -key uchiwa.key -out uchiwa.pem -days 365

Adjust the uchiwa object in your configuration file in order to specify the path of the keys you just generated:

{
  "uchiwa": {
    "ssl": {
      "certfile": "/path/to/uchiwa.pem",
      "keyfile": "/path/to/uchiwa.key"
    }
  }
}

Finally, restart Uchiwa and access your dashboard over HTTPS.


= Troubleshooting = 


Authentication
#
How do I disable Uchiwa built-in authentication?
#

In order to remove Uchiwa authentication, you simply need to remove or leave empty the user, pass and users attributes from the Uchiwa Configuration on your configuration file.
Checks
#
My standalone check does not appear in the checks view
#

Uchiwa uses the /checks Sensu API endpoint to build the checks list. This endpoint only provides the checks that are defined and known by the Sensu server itself, therefore standalone checks that are only defined on some particular clients can’t be shown. They will, however, appear in the client view since they are part of the client history.
Why can’t I see the details of a standalone check?
#

Unless an event is created for this particular check, the details of a standalone check, such as the command executed, are not available. See the previous question for more details.
Errors
#
I see the error message 401 Unauthorized
#

If you configured a user/pass authentication on your Sensu API, you need to add these details to your Uchiwa configuration by adding the user and pass attributes in the proper datacenter object within the sensu array, as shown on the Datacenters Configuration.
I see the error message x509: certificate signed by unknown authority
#

By default, Uchiwa will refuse to make any connection to an API with an invalid SSL certificate, therefore it needs to be explicitly allowed. See the insecure attribute in the Datacenters Configuration.
Installation
#
Which platforms are supported by Uchiwa?
#

Uchiwa binaries are compiled for linux, on 386 and amd64 architectures, and packaged into DEB and RPM packages. If you wish to compile the binary for an another operating system and compilation architecture, refer yourself to the Installation documentation.


== Reference : = 


-> Aggregates
#

To understand aggregates in Sensu, please refer yourself to the Sensu documentation.
List All Aggregates
#

To view all aggregates, head over to the aggregates view.
View An Aggregate
#

To see the detail of a specific aggregate, click on it from the aggregates view. From there, you can see the check and client members, in addition to the results of every check members.
Delete An Aggregate
#

It’s currently impossible to delete an aggregate from Uchiwa, but we would love to have you contribute to Uchiwa by implementing this feature!


-> Checks

Checks
#

To understand checks in Sensu, please refer yourself to the Sensu documentation.
List All Checks
#

To view all checks, head over to the checks view. Please note that standalone checks that are not installed on the Sensu Server will not be displayed.
Issue A Check Request
#

You can force a check request across a datacenter by selecting one or multiple checks on the checks view and clicking on the Issue Check Request action within the Bulk Actions dropdown menu.
Silence/Unsilence A Check
#

You can silence a check across all clients within a datacenter by selecting one or multiple checks on the checks view and clicking on the Silence/Unsilence action within the Bulk Actions dropdown menu. 



-> Clients :

#

To understand clients in Sensu, please refer yourself to the Sensu documentation.
List All Clients
#

To view all clients, including Sensu proxy clients (formerly known as “Just-in-time” or “JIT” clients), head over to the clients view.
View A Client
#

To see the detail of a specific client, click on it from the clients view. From there, you can see the client data of the left panel and the check results data on the right one.
View A Check Result Data
#

To see the detail of a check result, click on it from the client view.
Request To Delete Check Result Data
#

Once you see the detail of a check result, you can delete the check result data by clicking on the Delete Result icon.



-> Events :

Events
#

To understand events in Sensu, please refer yourself to the Sensu documentation.
List All Events
#

To view all events, head over to the events view.
View An Event
#

To see the detail of a specific event, click on it from the events view.
Resolve An Event
#

You can resolve an event by selecting one or multiple events on the events view and clicking on the Resolve action within the Bulk Actions dropdown menu.


-> Silencing :

Silencing
#

Follow these instructions to silence or unsilence an element.
Silence a check
#
Across a datacenter
#

You can silence a check for a given datacenter by selecting one or multiple checks on the checks view and clicking on the Silence/Unsilence action within the Bulk Actions dropdown menu.
For a particular client
#

Access the client view for this client and click on the silence icon corresponding to the check on the right panel.
Silence a client
#

You can silence a client from the client view, clients view and events view.
Silence an event
#

You can silence an event from the events view or the client view.
Silence a subscription
#

You can silence a subscription for a given datacenter by clicking on the Add button in the table header, within the silenced view.


-> Api 


Health API
#
/health (GET)
#

Returns both Uchiwa and Sensu API status
Response Example (Status 200)
#

{
  "uchiwa": "ok",
  "sensu": {
    "us-east-1": {
      "output": "ok"
    },
    "us-west-1":{
      "output": "ok"
    }
  }
}

Response Codes
#
HTTP Status Code 	Reason
200 	All the services are working
503 	One of the service is unavailable
/health/{service}
#

Returns status of Sensu API or Uchiwa service.
Response Example (Status 200)
#

"us-east-1": {
  "output": "ok"
},
"us-west-1":{
  "output": "ok"
}

Parameters
#
Parameter 	Description
service 	name of the service; either sensu or uchiwa
Response Codes
#
HTTP Status Code 	Reason
200 	The service is working
503 	The service is unavailable


-> Contribution :


Contributing
#
Installation
#
Backend
#

Follow these instructions for the Go backend.
Frontend
#

Optional. If you wish to modify the frontend components, you’ll need to follow these additional instructions:

Clone the uchiwa-web repository:

git clone https://github.com/sensu/uchiwa.git
git clone https://github.com/sensu/uchiwa-web.git

git clone git@github.com:sensu/uchiwa-web.git && cd uchiwa-web

Install third-party libraries:

npm install # Standard user
npm install --unsafe-perm # Root user

Create a global link for uchiwa-web:

bower link

Move to your uchiwa repository directory:

cd $GOPATH/src/github.com/sensu/uchiwa

Uninstall the uchiwa-web bower component if previously installed:

bower uninstall uchiwa-web

Point the bower component uchiwa-web to the previously created link

bower link uchiwa-web

Development
#
Backend
#

Run the program:

go run uchiwa.go

N.B.: You’ll need to relaunch this command if you modify the source code to apply changes.
Frontend
#

Generate CSS files from Sass templates:

grunt sass

Testing
#
Backend
#

Run the unit tests:

go test -v ./...

Frontend
#

Run linting and unit tests:

grunt







