=== ajout de sonde au prometheus exporter : ==

on va pourvoir ajouter des metrics non dispo de base apres l'install de prometheus node exporter

on va pour cela pouvoir ecrire dans un repertoire precis un fichier contenant le resulat de l'execution d'une commande, d'un script  exécuté en cron formatté au format prometheus.

cette fonctionnalité s'appuie sur la methode textfile
/var/lib/prometheus/node-exporter/README.textfile
Textfile Collector

The textfile collector is similar to the Pushgateway, in that it allows
exporting of statistics from batch jobs. It can also be used to export static
metrics, such as what role a machine has. The Pushgateway should be used for
service-level metrics. The textfile module is for metrics that are tied to a
machine.

To use it, create files in this directory that are readable by the prometheus
user.  The collector will parse all files in matching the glob *.prom using the
text format.

To atomically push completion time for a cron job:

echo my_batch_job_completion_time $(date +%s) > \
    /var/lib/prometheus/node-exporter/my_batch_job.prom.$$
mv /var/lib/prometheus/node-exporter/my_batch_job.prom.$$ \
    /var/lib/prometheus/node-exporter/my_batch_job.prom

To statically set roles for a machine using labels:

echo 'role{role="application_server"} 1' > \
    /var/lib/prometheus/node-exporter/role.prom.$$
mv /var/lib/prometheus/node-exporter/role.prom.$$ \
    /var/lib/prometheus/node-exporter/role.prom

la localisation du rep textfile est défini dans la conf prometheus :
ex: 
 grep textfile /etc/default/prometheus-node-exporter
#  --collector.textfile.directory="/var/lib/prometheus/node-exporter"
#  --collector.textfile      Enable the textfile collector (default:


Les fichiers contenant nos métriques doivent contenir l'extention ".prom"

et utiliser les bonne pratiques prometheus : non de sonde / valeur /help etc ..



exemple fichier test :

ajouter  un point de mesure sur l'espace occupé des vg de lvm-thin provisionning proxmox 

on peut récupérer l'info de la maniere suivante : 
root@virt01b:~# lvs |grep "<"
  data          pve       twi-a-tz-- <76.20g                  0.00   1.60                            
  data1   vmdata17a twi-aotz--  <1.72t                  37.49  2.21      <<<< 37.49% espace occupé                        
  datab    vmdata17b twi-aotz--  <1.72t                  29.38  1.76  

- on génere un script : 

qui va nous permettre de forger les champ et valeur qu'on retrouve dans prometheus 

cat /usr/bin/vg_used_pct_size.sh
#!/bin/bash

## vars :
vg_size_file=$(mktemp /tmp/vgsize.XXXX)
prometheus_file_tmp="/var/lib/prometheus/node-exporter/lvm_thin_used_pct.prom.$$"
prometheus_file="/var/lib/prometheus/node-exporter/lvm_thin_used_pct.prom"

#clean prom file
> $prometheus_file

# retrieve pct free on vgs :
/usr/sbin/lvs |grep "<" |awk '{print $2, $5}' > $vg_size_file

echo "# HELP node_vg_size_pct_used Volumegroup size in pct."  >> $prometheus_file_tmp
echo "# TYPE node_vg_size_pct_used gauge" >> $prometheus_file_tmp
while read vg pct
do
  echo "node_vg_size_pct_used{vgname=\""$vg"\",nodename=\""$(hostname)"\"} $pct" >> $prometheus_file_tmp
done < $vg_size_file

# cleanup tmp file and rename the temp prom file too :
rm $vg_size_file
mv $prometheus_file_tmp $prometheus_file


- on met le script en cron :

root@virtrc01:~# cat /etc/cron.d/lvm-thin-used-size

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# run batch to retrieve  lvm-thin pool free size
* * * * * root /usr/bin/vg_used_pct_size.sh 2&>1 /dev/null

on aura en résultat :

root@virtrc01:~# cat /var/lib/prometheus/node-exporter/lvm_thin_used_pct.prom
# HELP node_vg_size_pct_used Volumegroup size in pct.
# TYPE node_vg_size_pct_used gauge
node_vg_size_pct_used{vgname="pve",nodename="virtrc01"} 0.00
node_vg_size_pct_used{vgname="data1",nodename="virtrc01"} 30.92
node_vg_size_pct_used{vgname="datab",nodename="virtr01"} 37.71


on pourra donc filtrer dans grafana par exemple sur les vgname et nodename 
