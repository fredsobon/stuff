== munin notes from munin starter kit : =


Munin a 3 composants : 
server -> client -> plugin

Le server appelle le client toutes les 5 minutes et celui-ci interroge le plugin pour renvoyer le status désiré.
L'installation, l'administration , l'ajout et la création de plugins est simple.

1/ installation :
L'installation ne va pas charger beaucoup le server , les nodes executent les plugins en local et ne seront eux chargés que si beaucoup de plugins gourmants tournent dessus ( ex : parser des fichiers de logs ).

apt-get install munin-node |yum install munin-node
apt-get install apache2 ; ln -s /etc/munin/apache.conf /etc/apache2/sites-available/munin : creation du lien symbolique de l'install de munin et conf apache vers le repertoire d'install apache.

Modifier le Allow from en renseignant notre ip dans la conf apache.
reload apache et c'est bon : http://server/munin


Munin master configuration :

/etc/munin/munin.conf
on a plusieurs directives importantes. NB : noter que munin va stocker les data dans un dbdir et les html dans un autre repertoire (htmldir).Munin-graph va être utiliser pour reproduire les db dans le repertoire des html.
De base les graphs sont updates via une cron : sur les systems plus importants on va generer les graphs à la demande via cgi
Il est possible de faire notifier par mail munin et même de passer ses résultats à nagios.

On va pouvoir configurer notre "host tree" et nous fabriquer un dashboard.
On peut combiner les graphs de de servers sur un seul etc ...

Munin node  :

/etc/munin/munin-node.conf
host_name : le fqdn de notre server
allow : l'ip / plage d'ip de notre master qui va interroger le node sur le port 4949


Plugins :

tous les plugins sont dans /etc/munin/plugins.
En principe les plugins appartiennent à nobody:munin mais en fonction des droits nécéssaires à la bonne execution du plugin il est necessaire de changer les droits et ou les users .ex avec le plugin dhcpd3 qui doit avoir des access particuliers :

"[dhcpd3]
user root
env.leasefile /var/lib/dhcp3/dhcpd.leases
env.configfile /etc/dhcp3/dhcpd.conf
The dhcpd3 plugin should be run as root because, otherwise, it cannot read the information it
needs. The lease and conig iles are passed as environment variables to the plugin as they can
be diferent per distribution.

It is also possible to use wildcards in the section description. If you scroll further down, you will
see a section labeled [if_*] . This matches interface plugins such as if_eth0 and if_eth1"


Monitoring d'autre servers :

apt-get install munin-node
on va ensuite indiquer la section allow avec une ip ou la section cidr_allow : 10.0.0.0/24 ( nb il faut que le module perl net:cidr soit installé)

on reload ensuite le munin-node

On peut interroger le node en local ou depuis le server :

telnet node 4949
list
version
quit

Pour checker que munin fonctionne correctement : /var/log/munin/munin.log

Il est possible de lancer des scripts d'autodetection lorsque de nouveaux composants ont ete mis a jour sur notre system avec :

munin-node-configure --suggest
munin-node-configure --shell ( nb : tous les plugins ne prennent pas en compte ces options de configuration.)

Ajout de node dans notre munin server :

il faut d'abord s'assurer que notre master concacte bien le node ( telnet node 4949 ) : si ce n'est pas le cas s'assurer que le munin-node est bien démarré et qu'aucune regle de firewall ne bloque le flux.

Une fois ok nous pouvons editer le fichier de conf : /etc/munin/munin.conf, aller dans la section et ajouter notre node dans la section "node tree" ex :

# the host tree of our local network
[localhost.localdomain]
address 127.0.0.1
use_node_name yes
[muninnode.localdomain]  < exemple de node que nous rajoutons.
address 10.0.0.200
use_node_name yes

Au bout d'un certain temps nous devons avoir les graphs qui apparaissent dans l'interface graphique.
en cas de souci : il est utile de verifier les fichiers de log (/var/log/munin.log etc ...) ; les règles de fw , la syntaxe du fichier de conf ...


= Monitoring de devices additionels : =

Tout nos equipements ne peuvent pas heberger un service munin-node ( ex : router, swich , printer etc ..) on doit dans ce cas configurer un munin-node qui va le faire pour nous.

Les devices biensur doivent disposer d'interface réseau et par exemple être configurable via snmp.
On va pour notre exemple configurer un routeur via snmp :

Munin-node embarque un plugin pratique qui permet de monitorer le traffic via snmp.ex :
On active le plugin en creant les liens symboliques ( iface et errreur iface : )
ln -s /usr/share/munin/plugins/snmp__if_      /etc/munin/plugins/snmp_OURrouter_if_1
ln -s /usr/share/munin/plugins/snmp__if_err_  /etc/munin/plugins/snmp_OURrouter_if_err_1

On teste ensuite nos plugin en nous placant dans le repertoire et en invoquant un munin-run de notre plugin :

"cd /etc/munin/plugins
munin-run snmp_router_if_1
This should give you the following output:
recv.value 2928754283
send.value 562680241

If you get recv.value noSuchObject , your switch isn't supported by this SNMP plugin and
you will have to look for a speciic one for your switch or router (see the People and places you
should get to know section)."

On peut nous connecter en telnet sur le munin-node et recupérer des infos pour verifir nos configs via des commandes :

nodes
list
fetch snmp_OURrouter_if_1
quit

On va maintenant renseigner notre router dans la conf de notre munin-master en rajoutant dans notre  section node notre router.Nb de base le munin-master va chercher dans sa base interne le hostname de notre router : ce qui ne va pas fonctionner : il faut donc bypasser comportement en settant à no cette conf :

[router]
use_node_name no   <<<<< on by pass la resolution du munin-master
address 127.0.0.1


Il est possible de tester la config de notre plugin snmp sur un equipement en lancant la commande : 
munin-node-configure --shell --snmp hostname


= Config de sondes / sensors : =

Les sondes telles que temperature, ventilateurs, voltage sont configurables via munin.

Un des plugin embarqué va utiliser le package "lm-sensor" lui même utilisé par le kernel (cf doc)
La plupart des equipement expose leur données via ipmi cependant maintenant.


Installation de lm-sensors 

ssh username@muninnode
sudo apt-get install lm-sensors
sudo sensors-detect
on repond ensuite au differentes questions via le prompt : "yes" par defaut est un bon choix.
Le fichier /etc/modules doit être renseigné automatiquement par cette commande.

un coup d'oeil dans le fichier doit nous permettre de voir de la conf chargée via lm-sensors. Ex :

/etc/modules .
#
#
#
#
#
/etc/modules: kernel modules to load at boot time.
This file contains the names of kernel modules that should be
loaded at boot time, one per line. Lines beginning with "#" are
ignored.
loop
lp
# Generated by sensors-detect
# Chip drivers
it87
k8temp

Si on a rien alors c'est que notre systeme ne supporte pas ce mode ( nous verrons plus loin comment monitorer via ipmi.)
Nous allons maintenant devoir activer un plugin qui va permettre de pouvoir recupérer les infos de lm-sensors et les faire comprendre par munin afin de génerer des graphs.

$ ssh username@muninnode
username@muninnode:~$ cd /usr/share/munin/plugins
username@muninnode:/usr/share/munin/plugins$ ./sensors_ suggest
fan
volt
temp

Dans notre exemple les trois mesures fan, volt et temp vont nous servir.
On va donc  creer un lien symbolique du module sensor et de nos trois sondes :
ssh username@muninnode
$ cd /etc/munin/plugins
$ sudo ln –s /usr/share/munin/plugins/sensors_  /etc/munin/plugins/sensors_fan
$ munin-run sensors_fan
fan1.value 2678

Notre plugin fonctionne on va donc redémmarer le munin-node et retester :
username@muninnode:~$ telnet localhost 4949
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
# munin node at muninnode
fetch sensors_fan
fan1.value 2689
.
quit


Monitoring des sondes via ipmi : nous devons installer le package  freeipmi-tools  puisque le plugin freeipmi en depend.

ssh username@muninnode
sudo apt-get install freeipmi-tools
sudo ipmi-sensors

On va maintenant download le plugin munin depuis github :

username@muninnode:~$ cd /etc/munin/plugins
username@muninnode:/etc/munin/plugins$ wget 'https://raw.github.com/
munin-monitoring/contrib/master/plugins/sensors/freeipmi'
username@muninnode:/etc/munin/plugins$ chmod +x freeipmi

On va setter les droits corrects à notre plugin qui doit être executer en root : pour ce faire nous editons et modifiions la conf du fichier :
/etc/munin/plugin-conf.d/munin-node :


[freeipmi]
user root

On teste maintenant notre plugin :

username@muninnode:~$ cd /etc/munin/plugins
username@muninnode:/etc/munin/plugins$ munin-run freeipmi
You should get output similar to the following:
multigraph freeipmi_voltage
ipmi58.value 228.00
ipmi59.value 228.00
multigraph freeipmi_fan
ipmi24.value 5040.00
ipmi25.value 3480.00

...


== Ecriture d'un plugin simple : =

De base un plugin est un executable qui est capable de correspondre avec l'api munin.
Un plugin doit au minimum faire deux choses :
- fournir la description du graph que le munin master devra dessiner.
- fournir une liste de labels et de mesures sur l'execution de ce plugin.

On peut examiner rapidement la config du plugin load pour exemple :

/etc/munin/plugins$ munin-run load config
graph_title Load average
graph_vlabel load
graph_scale no
graph_category system
load.label load
graph_info The load average of the machine describes how many
processes are in the run-queue (scheduled to run "immediately").
load.info 5 minute load average
/etc/munin/plugins$ sudo munin-run load
load.value 1.44

On voit que le node a une charge de 1.44

La commande config permet de voir le label vertical : load 
Il n'y a pas de mise à l'echelle scale - > "no"
Le graph est classé dans la catégorie system.
 
Graph_info permet de voir les infos que l'on distingue en passant la souris sur le graph dans le navigateur.

Ex : ecriture d'un plugin rammenant l'espace disk 
1/ collecter les infos nécéssaires :

$ du -s –b /home/testuser
1323302912 /home/testuser
on recupère juste notre valeur : 
du -s –b /home/testuser | awk '{print $1}'
1323302912

/!\ Attention munin doit récupérer les données de graphs avant 5 minutes sinon il considere qu'il y a un problème et plante ( c'est en fait la cron de munin-update qui de base s'execute toutes les 5 minutes)

2/ design du graph 


Les unites de mesure des disques est faite en bloc de 1024 bits pour le reseau on prend 1000 

On ne peut pas avoir de valeur negative .
On peut setter un warning quand le disque est a 2Gb d'occupé et un critical à 5gb d'occupé.

graph_title Diskusage of testuser
graph_args --base 1024 --lower-limit 0
graph_vlabel bytes
graph_category system
userdiskusage.label Average disk usage the last five minutes.
userdiskusage.warning 2147483648
userdiskusage.critical 5368709120
graph_info The disk usage of testuser in bytes.


Ces arguments sont passés directement au moteur de graph de munin : rrdgraph (cf rrdtools )


3/ ecriture du plugin :

#!/bin/bash
case $1 in
config)
echo "graph_title Diskusage of testuser"
echo "graph_args --base 1024 --lower-limit 0"
echo "graph_vlabel bytes"
echo "graph_category system"
echo "testuserdiskusage.label Average disk usage."
echo "testuserdiskusage.warning 2147483648"
echo "testuserdiskusage.critical 5368709120"
echo "graph_info The disk usage of testuser in bytes."
exit 0;
esac
echo -n "testuserdiskusage.value "
du -s -b /home/testuser | awk '{print $1}' 
