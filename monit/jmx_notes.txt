=== notes from mooc ===


 - intro - 

the JMX architecture is, by default, composed of : 
An agent framework
An instrumentation Layer

the JMX Instrumentation Layer is composed of:
A set of managed objects

the standard JMX instrumentation allows to:
Monitor the CPU usage of a Java Virtual Machine 
Invoke a garbage collector

JMX is built in: 
Standard Edition Java Virtual Machines

An MBean becomes manageable when it is: 
Registered within the Agent


to enable a JMX agent to survive/manage the lifetime of a remote virtual machine hosting an application, the deployment model to be used is  Daemon

3 layers compose the JMX architecture

the default JMX agent level includes : 
connectors
mbeanserver
mbean

to conform to the JMX standard, each MBean must follow a given design pattern


- theorie -

The Management Interface of a Standard MBean is extracted by the Agent through INTROSPECTION
At registration time, the agent checks the name of the class of the object to be registered and if it is sufixed by MBean, searches for methods to define the attributes and operations. All this is done through INTROSPECTION.

the Standard MBean Management Operations are defined at:
Compile time ￼ In a Java interface 
Standard MBean interfaces are defined in a Java interface definition through operations. THeyr are thus defined at compile time.

The Different MBean Types are dynamic, standart, model
JMX offers three types of MBeans: Standard, Dynamic and Model. Additional MBeans which are subclasses of the above three types are defined through attributes and operations parameters types restrictions.


the following statements define a "logCount" management attribute exposed through JMX in an MBean: 
int getlogCount(); 
void setlogCount(int x); 
Both get and set operations define one operation on the logCount attribute following the JMX imposed Standard design patterns.


Let the following names refer to MBeans in a JMX agent.
eu.telecomnancy.jmx: p="2", a="5", t="interface"
eu.telecomnancy.jmx: a="5", t="interface", p="2" 
JMX follows a lexicographic order in the names. Thus the two lines up normalized refer to the same Mbean.

Once the GetMeanInfo (i.e. the creation of the management interface) is done at registration time. Therefore, it should not be changed afterwards.

the types of MBeans available within JMX differ in :
the level of dynamicity ￼the scope of possible types for attributes and parameters 
The different MBeanTypes impact the dynamics of the Mbean, especially the time of / and freedom of change of the Management Interface and the types of attributes and parameters.

In the ModelMBean principle
 the application object delegates the creation of the MBean to the MBeanServer
The entire creation of the management interface is delegated to the MbeanServer by the application object which does not "see" or deal with a MBean.

In JMX one can implement any Standard Mbean using
a Dynamic Mbean 
a ModelMbean 
A dynamic Mbean can build any management interface (but at registration time), so does the ModelMbean. Other MBeans are restricted by the type and thus cannot representany StandardMBean.

The more dynamic the Bean is :
the more code is needed by the developer the more code is needed by the developer 


- service monitoring : -

JMX offers the following built-in services:

monitoring, MBean coupling, remote Mbean loading
JMX offers 5 services among which: monitoring, relations management and remote Mbean loading in an agent.

JMX notifications follow the Observer Pattern.

To receive Notifications, an object must: 
subscribe to the emitter, implement a notification processing interface, - correct
Within an MBean Server, a consumer must subscribe to the emitter of the interested notifications. Within a JVM, there is no need to be registered as an MBean to subscribe to MBean notifications, only the Notification Listener interface has to be implemented by the listener.

The Timer Service can: (NA=2)
generate user specific notifications, manage the life-cycle of timers, - correct
The user can give its own notifications to be emitted by the timer service.
The basic service offered by the Timer Service is to manage the life-cycle of Timers (instanciation, start, stop, resume, ...).

The Gauge Monitor Service: 
issues two notification types issues two notification types - correct
The gauge monitor launches alarms on low and high threshold crossing. Those alarms are different.

String monitoring issues a notification (NA=1)
when the monitored string is identical to the reference one when the monitored string is identical to the reference one 
The string monitoring service only supporte exact matching.

The relations service: 
monitors relations cardinality consistency 
The relations service monitors the consistency of the relations. It does not enforce the values of the attributes.

The Timer service granularity is in millisecond

The Query service requires a filter and a name pattern to select objects 

Filters are composed of
logical expressions on Mbean attribute values 
logical expressions on MBean metadata 


- short resume : -

the JMX Agent Services include: (NA=2)
A MBean Server, A Naming Service, - correct
Versioning and Persistance are not provided by a JMX Agent. If such services are required, they have to be implemented by the management solution designer.

in the JMX Notification Model, the filtering is done by The Emitter 
The consumer (listener) specifies the filter but the filtering itself is done at the Emitter which implements the NotificationBroadcaster interface.

which of the following deployment models enable application life cycle management?
Driver, Daemon,
Only the Driver and Daemon deployment models ease the life-cycle management of Java-based applications instrumented in JMX.


MX has built-in: 
Mbeans attributes monitoring, At runtime management interface building, - correct
A simple monitoring service for attributes is provided and Dynamic + Model Mbeans allow to build the management interface of a managed resource at runtime.

let MbeanA and MBeanB be two standard MBeans with defined Management interfaces A and B. Assume MBeanA is a subclass of MbeanB. Select the statements which are true, given this configuration: (NA=2)

MBeanA always exposes the attributes and operations from MBeanA 
MBeanA￼ MbeanA exposes the attributes and operations of MBeanA and MbeanB if the management interface of B is defined as a subinterface from A 
See lesson 2, slide 23 describing the inheritance rules.

the Dynamic MBean Management Operations are defined: (NA=2)
at runtime , in an MBeanInfo object, - correct
The MBeanServer delegates the build of the management interface to the Mbean itself through the creation of an MBeanInfo object at runtime, more precisely at the MBean registration time.

Remote Monitoring in JMX is by default: (NA=2)
provided through a standard Java connector ￼  Available through an HTML adaptor 

the JMX Default Agent supports:
A notification subscription service Remote management

One JVM can host several MBeanServers: True 

the instruction ManagementFactory.getPlatformMBeanServer() returns: An instance of the platform MBean server An instance of the platform MBean server

a standard MBean should implement the JMX class StandardMBean: no

a standard MBean is composed of an MBean interface and a class :true

by convention, the class name of a MBean interface, takes the name of the class that implements it, with the suffix MBean added. Yes

the following declaration defines a readable attribute of a standard MBean interface : public int getNumberOfCities() public int getNumberOfCities() 

the following  declaration defines a writable attribute of a standard MBean interface  public void setSizeOfThreadsPool(int size) 

a dynamic MBean does not require an MBean interface

which exception is generated when an attribute is not found in a dynamic MBean :
MBeanException 
ReflectionException 
AttributeNotFoundException 

to generate a notification, the MBean should extend NotificationBroadcasterSupport

to send a notification, you need to construct an instance of the class :
javax.management.Notification 
 javax.management.Notification or a subclass (such as AttributeChangedNotification) 






