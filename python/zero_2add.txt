Pour accéder à la valeur associée à une clé, on utilise la notation à base de crochets []
In [ ]: print('la valeur pour marc est', annuaire['marc'])
Cette forme d’accès ne fonctionne que si la clé est effectivement présente dans le dictionnaire.
parcours de dictionnaire suite à insérer : 

On peut recupérer donc les items, clés et valeurs. Si une clé n'existe pas : une exception KeyError est levée. Aussi si vous n’êtes pas sûr que la clé soit
présente, vous pouvez utiliser la méthode get qui accepte une valeur par défaut:
ex : 
>>> a = {"web": 3 , "db": 5}
>>> print(a)
{'web': 3, 'db': 5}
on set une valeur par défaut a une clé qui n'existe pas dans notre dico :
>>> print(a.get('fw', 5))
5

On peut modifier un dico avec le contenu d'un autre dico avec la methode update :

>>> print(a)
{'web': 3, 'db': 5}
>>> print(a)
{'web': 3, 'db': 5}
>>> a.update({"fw": 5})
>>> print(a)
{'web': 3, 'fw': 5, 'db': 5}

Le dictionnaire est non ordonné : pour assurer la fiabilité d'un dico ordonné on peut utiliser des modules comme : collections qui possede une classe OrderDict :

>>> from collections import OrderedDict
>>> d = OrderedDict()
>>> for i in ['a', 7, 3, 'x']:
...     d[i] = i

