==== notes sur eleform python3 ====

== intro :

language interpreté tres complet et polyvalent (tres nombreuses utilisations et modules ..)
shell python invoqué par python3 
boogie@x61-boogie:~/lab/python$ python3
Python 3.5.2 (default, Jul  5 2016, 12:43:10) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 2 + 4
6
>>> 4 / 3
1.3333333333333333
>>> print("lapin")
lapin

Tout ce qui est de la forme  nom(quelque_chose) est une fonction.
On peut connaitre le type de notre objet grace à la fonction type :

>>> type(3)
<class 'int'>
>>> type(6.7)
<class 'float'>
>>> type("lapin")
<class 'str'>
>>> type(True)
<class 'bool'>
>>> type("2")
<class 'str'>

On remarque que dans le dernier exemple le fait d"entourer notre chiffre par des "" est de fait considéré comme du texte par python.

 Declaration de variable se fait très simplement : 
>>> a = "lapin"
>>> type(a)
<class 'str'>
On peut supprimer une variable avec l'instruction del :
>>> del a
>>> a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined

Tout est objet en python : on va utiliser les objets comme container pour manipuler les données.

= caractères :
On peut saisir le texte entre : " ' et même """ :
le triple guillemet permet de s'affranchir des caractères à protéger et permet le multiligne :

>>> "lapin"
'lapin'
>>> "l'appel du lapin"
"l'appel du lapin"
>>> """lulu dit : "l'appel du lapin" """
'lulu dit : "l\'appel du lapin" '
>>> """ hello
... darling 
... hoho ! """
' hello\ndarling \nhoho ! '
>>> a= """ hello
... darling 
... hoho ! """
>>> a
' hello\ndarling \nhoho ! '

On peut ajouter des sauts de ligne nous même 

>>> print("lapin\n nain")
lapin
 nain
On peut faire des opérations uniquement sur des données de même type ..sinon erreur .

>>> "Lapin" + 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly

= operateurs arithmetiques : 
On peut par contre traiter du texte avec des opérateurs arithmetiques :
>>> "Lapin" + "1"
'Lapin1'
>>> "lapin" * 2
'lapinlapin'
>>> a = "lapin"
>>> b = 3
>>> a * b
'lapinlapinlapin'
Le type Node est utilisé pour définir "rien" :
>>> None
>>> a = None
>>> a
>>> type(a)
<class 'NoneType'>


== controle de flux et structures conditionnelles :

= input :

Pour interragir avec le user on va utiliser la fonction  input. 
La fonction  input s'utilise toujours avec une variable ou un autre appel de  fonction :
on va donc  definir une variable qui va recupérer le resultat de la commande input :

>>> ans = input("how are you ? ")
how are you ? cool
>>> ans
'cool'
>>> type(ans)
<class 'str'>

= convertion de type : 
On peut convertir un type en un autre . Quand un user via la fonction input saisit un nombre celui ci est vu comme une string : il faut donc le convertir si on veut faire des opérations dessus . ex : 
>>> number = input("how old are U ? ")
how old are U ? 44
>>> type(number)
<class 'str'>
>>> number + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly
>>> number = int(number)
>>> number + 2
46
= operateurs logiques : 

On va pouvoir utiliser des operateurs logiques pour tester nos valeurs :
>>> number > 43
True
>>> number < 32
False
>>> number >= 44
True
>>> number <= 44
True
>>> number == 44
True
>>> number == 43
False
>>> number != 44
False
>>> number == 43
False
>>> number != 43
True

Le resultat est un booleen.
 = number < 45
>>> res
True
>>> type(res)
<class 'bool'>

= operateur in : 
On peut utiliser l'operateur special "in" qui va permettre de tester  plus largement 

>>> animal = input("what is your favorite animal ? ")
what is your favorite animal ? a little cat
>>> "cat" in animal
True
>>> "lion" in animal
False
Ici on test la presence d'une chaine de caractere parmi plusieurs (la reponse du user utilise 3 mots )

On peut combiner plusieurs conditions et utiliser la logique booleenne pour prendre des décisions : 
-> condition "ou" :
>>>True or False
True
>>> True or True
True
>>> False or True
True
>>> False or False
False

-> condition "et" tout doit être vrai 
>>> True and True
True
>>> True and False
False
>>> False and True
False
>>> False and False
False

= tests conditionnels : "if else" :
il est imperatif de respecter l'indentation de 4 espaces 

>>> if True:
...     print("okey !!")
... 
okey !!
On peut chainer les fonctions entre elles :
>>> prix = 30
>>> money = int(input("how many dollards have you got ? "))
how many dollards have you got ? 30
On voit donc que la donnee saisi par le user est directement converti en entier grace à  int.

>>> money = int(input("how many dollards have you got ? "))
how many dollards have you got ? 40
>>> if money > prix:
...     print("hey you can buy this stuff")
... 
hey you can buy this stuff

Cette fois ci avec "if" et "else" 

>>> prix = 30
>>> money = int(input("how many dollards have you got ? "))
how many dollards have you got ? 15
>>> if money > prix:
...     print("hey you can buy this stuff")
... else:
...     print("no way u got to work harder!")
... 
no way u got to work harder!

On peut augmenter le nombre de conditions ex ici on peut acheter si on a assez d'argent et si il reste des articles à vendre :
>>> stock = 10
>>> if money > prix and stock > 0:
...     print("hey you can buy this stuff")
...     stock = stock - 1
... else:
...     print("no way u got to work harder or choose another shop !")
... 
no way u got to work harder or choose another shop !
= if elif else : 
la construction se fait basiquement comme ceci : (l'exemple est nul puisqur vrai ou faux et pas de condition sup pour else ..) 

>>>if False:
...     print("ko!")
... elif True:
...     print("choix intermediaire")
... else:
...     print("ben pas de condition du tout") 
... 
choix intermediaire

/!\ syntaxe de code a respecter pep8 voir sur le net :
4 espaces d'indentation et un ":" sans espace apres les keywords de type else: ..., pas d'espace entre les fonctions et les parentheses.
on essaye d'aerer le code : espace entre les assignations de variables 
Le python a été créer pour de la lisibilité puisqu'on lit plus souvent du code que l'on en ecrit.

exercice 1 : "etes vous majeur ?"

ok = 18
>>> age = int(input("how old are you ?"))
how old are you ?17
>>> if age >= ok:
...     print("no problemo welcome!")
... else:
...     print("sorry but got to eat soup!")
... 
sorry but got to eat soup!


=stop v83

