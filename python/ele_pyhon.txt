=== notes sur eleform python3 ===

= intro :
language interpreté tres complet et polyvalent (tres nombreuses utilisations et modules ..)
shell python invoqué par python3 
boogie@x61-boogie:~/lab/python$ python3
Python 3.5.2 (default, Jul  5 2016, 12:43:10) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 2 + 4
6
>>> 4 / 3
1.3333333333333333
>>> print("lapin")
lapin

Tout ce qui est de la forme  nom(quelque_chose) est une fonction.
On peut connaitre le type de notre objet grace à la fonction type :

>>> type(3)
<class 'int'>
>>> type(6.7)
<class 'float'>
>>> type("lapin")
<class 'str'>
>>> type(True)
<class 'bool'>
>>> type("2")
<class 'str'>

On remarque que dans le dernier exemple le fait d"entourer notre chiffre par des "" est de fait considéré comme du texte par python.
= Declaration de variable se fait très simplement : 
>>> a = "lapin"
>>> type(a)
<class 'str'>
On peut supprimer une variable avec l'instruction del :
>>> del a
>>> a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined

Tout est objet en python : on va utiliser les objets comme container pour manipuler les données.

= caractères :

On peut saisir le texte entre : " ' et même """ :
le triple guillemet permet de s'affranchir des caractères à protéger et permet le multiligne :
>>> "lapin"
'lapin'
>>> "l'appel du lapin"
"l'appel du lapin"
>>> """lulu dit : "l'appel du lapin" """
'lulu dit : "l\'appel du lapin" '
>>> """ hello
... darling 
... hoho ! """
' hello\ndarling \nhoho ! '
>>> a= """ hello
... darling 
... hoho ! """
>>> a
' hello\ndarling \nhoho ! '

On peut ajouter des sauts de ligne nous même 
>>> print("lapin\n nain")
lapin
 nain

On peut faire des opérations uniquement sur des données de même type ..sinon erreur .

>>> "Lapin" + 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly

On peut par contre traiter du texte avec des opérateurs arithmetiques :
>>> "Lapin" + "1"
'Lapin1'
>>> "lapin" * 2
'lapinlapin'
>>> a = "lapin"
>>> b = 3
>>> a * b
'lapinlapinlapin'









