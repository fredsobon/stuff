==== raw cheat python ====
==  types :
- type fonction :
connaitre un type de donnée : type(donnée)
>>> type("lapin")
<class 'str'>
>>> type(True)
<class 'bool'>
>>> type("2")
<class 'str'>
>>> a = "lapin"
>>> type(a)
<class 'str'>

caracteres : des fonctions dediées à la classe str aident beaucoup.
pour saisir du texte le mettre entre '' , "" ou """ """ (ici on peut saisir du texte en multiligne.). On protege par un \ les ' " que l'ont considere comme caracteres dans notre texte

les operations arthmetiques sont possible sur les types de même classe :
>>> "Lapin" + "1"
'Lapin1'
>>> "lapin" * 2
'lapinlapin'
>>> a = "lapin"
>>> b = 3
>>> a * b
'lapinlapinlapin'

-fonction len : va nous servir a compter le nombre d'élements

>>> a = "blablabla"
>>> len(a)
9

- Le type Node est utilisé pour définir "rien" :
>>> None
>>> a = None
>>> a
>>> type(a)
<class 'NoneType'>
Ce qui nous permet d'initialiser un objet / variable qui sera traitée apres 
- concatenation :
>>> "Lapin" + "1"
'Lapin1'

- conversion de type :
>>> a = int("3")
>>> type(a)
<class 'int'>
>>> a = float("3.2")
>>> type(a)
<class 'float'>
>>> a = str(3)
>>> type(a)
<class 'str'>

= input : interraction avec le user :
Attention s'utilise toujours avec une variable :
>>> ans = input("how are you ? ")
how are you ? cool
>>> ans
'cool'
>>> type(ans)
<class 'str'>

= operateurs logiques : vont nous servir a tester : le resultat est un booleen : True ou False
>>> number = 44
>>> number > 43
True
>>> number < 32
False
>>> number >= 44
True
>>> number <= 44
True
>>> number == 44
True
>>> number == 43
False

-> condition "ou" : un des deux membres doit être a vrai 
>>>True or False
True
>>> True or True
True
>>> False or True
True
>>> False or False
False

-> condition "et" tout doit être vrai
>>> True and True
True
>>> True and False
False
>>> False and True
False
>>> False and False

= tests conditionels :
il est imperatif d'indenter de 4 espaces chaques portion de bloc de code : cf doc python pep8
if / else : 

>>> prix = 30
>>> money = int(input("how many dollards have you got ? ")) #
ici on demande au user de saisir un nombre : celui ci est vu par python comme une chaine de caractere : on convertie immediatement le nombre pour pouvoir comparer avec le nombre de prix
how many dollards have you got ? 15
>>> if money > prix:
...     print("hey you can buy this stuff")
... else:
...     print("no way u got to work harder!")
...
no way u got to work harder!

if /elif /else :
>>> sister = 14 
>>> brother = 12
>>> if sister >  brother:
...     print("girl is older")
... elif sister == brother:
...     print("same age!")
... else:
...     print("boy is older")
... 
girl is older


= boucle while :
= while : est comme un if : une condition va être testée et u
ne action réalisée ou non . La difference est qu'en fonction
du resultat de l'evaluation on retourne dans la boucle while.
Il faut donc que des elements modifient les param de la condi
tions sinon on est dans une boucle infinie :

>>> sister = 5
>>> brother = 2
>>> while sister > brother:
...     print("girl is older!")
...     brother = brother + 1 # ou plus simple brother += 1
...
girl is older!
girl is older!
girl is older!

= commentaire en python :
le commentaire est le "#" 

== liste /tuple ==

= liste : collection d'element ordonnée :

>>> fruit = []
>>> type(fruit)
<class 'list'>
- append : ajoute un element a une liste :
>>> fruit.append("banane")
>>> fruit
['banane']
>>> fruit.append("ananas")
>>> fruit
['banane', 'ananas']
pour acceder a un element on  utilise l'index. on commence à compter à partir de 0
>>> fruit[0]
'banane'
>>> fruit[2]
'citron'
on peut modifier l'element d'une liste :
>>> fruit[2] = "pomme"
>>> fruit[2]
'pomme'
- pop : va nous servir a supprimer le dernier element d'une liste :
>>> fruit.pop()
'pomme'
>>> fruit
['banane', 'ananas']

- insert : va nous permettre de rajouter un element parmi ceu
x existant dans notre list :
>>> couleur.insert(1, 'jaune')
>>> couleur
['vert', 'jaune', 'rouge']

- slice 
>>> couleur
['vert', 'jaune', 'rouge', 'purple']
>>> len(couleur)
4
slice intervale : premier element d'index inclu, dernier exclu
>>> couleur[1:3]
['jaune', 'rouge']

on peut utiliser des bornes :
>>> couleur[:3]
['vert', 'jaune', 'rouge']
>>> couleur[1:]
['jaune', 'rouge', 'purple']
>>> couleur
['vert', 'jaune', 'rouge', 'purple']
>>> couleur[1:-1]
['jaune', 'rouge']

n peut setter un "pas" pour extraire les elements.
ex  tous les deux elements dans l'intervalle 1 à 6 :
>>> couleur
['vert', 'jaune', 'rouge', 'purple', 'pink', 'grey']
>>> couleur[1:6:2]
['jaune', 'purple', 'grey']

n peut donc inverser notre liste :
>>> couleur
['vert', 'jaune', 'rouge', 'purple', 'pink', 'grey']
>>> couleur[::-1]
['grey', 'pink', 'purple', 'rouge', 'jaune', 'vert']
ceci est valable pour les chaine de caracteres ( slicables mais non mutables) :
>>> "hello world!"[::-1]
'!dlrow olleh'
- tuple : ressemble aux listes (slicable etc ..) : il n'est p
as mutable.
ce qui est utile quand on veut s'assurer qu'aucune modif ne s
era faite sur nos entrées. le tuple est un peu plus rapide eg
alement.
>>> fix = ("lapin", "coincoin")
>>> type(fix)
<class 'tuple'>
>>> fix[1]
'coincoin'
>>> fix[1] = "loup"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

== boucle for : ==

caracteres, list et tuples sont iterables
>>> lang = "python"
>>> for lettre in lang:
...     print(lettre)
...
p
y
t
h
o
n
>>> couleur
['vert', 'jaune', 'rouge', 'purple', 'pink', 'grey']
>>> fix
('lapin', 'coincoin')
liste et tuple sont iterables :
>>> for c in couleur:
...     print(c)
...
vert
jaune
rouge
purple
pink
grey
>>> for animal in fix:
...     print(animal)
...
lapin
coincoin



======= modules / fonctions =======


== commandes unix / linux via python ==

on  peut executer les commandes unix dans notre shell / script python 
des modules sont dédiés ex : os / subprocess 

ex : 
import os 
>>> os.system("free")
              total        used        free      shared  buff/cache   available
Mem:        7843684     2548396     2393444      513904     2901844     4474652
>>> os.system("uname -a")
Linux boogie-stuff 4.8.0-2-amd64 #1 SMP Debian 4.8.15-2 (2017-01-04) x86_64 GNU/Linux
0

import subprocess

>>> subprocess.call(["ls", "-l", "/home/boogie/Bureau"])
total 37904
drwxr-xr-x 8 boogie boogie     4096 sept. 22 19:06 actual
-rw-r--r-- 1 boogie boogie  2058457 sept. 14 13:35 all-info.txt
-rw-r--r-- 1 boogie boogie   417941 févr. 28  2014 F5-2048-bit-ssl-processing.pdf
-rw-r--r-- 1 boogie boogie       19 oct.  20 11:06 gros
-rw-r--r-- 1 boogie boogie    92639 oct.  30 10:29 ilo_pb.png
drwxr-xr-x 3 boogie boogie     4096 sept. 12 16:43 misc
-rw-r--r-- 1 boogie boogie 36213907 oct.   2  2015 Quarterly R&D Meeting - October 15.pptx
-rw-r--r-- 1 boogie boogie     1738 sept. 13 18:21 raid_building.txt
0


==== argparse : passage d'argument a la ligne de commande : === 

ex : on veut calculer un nombre de fibonacci ( nb_fibo = nb_fibo - 1  + nb_fibo -2 : ex : 8 = 5  + 3 , 5 = 3 + 2 ) en le passant directement en argument de igne de commande
on veut donc de fait pouvoir invoquer notre script en fournisssant en argumant le nombre que l'on veut associé a son equivalent fibo : ex python3 fibo.py 12

#!/usr/local/bin python3
#-*- coding: utf-8 -*-

# on importe la fonction ArgumentParser de notre module argparse
from argparse import ArgumentParser

def fibo(n):
    """ receive an arg (int) and return the fibonacci number : aka : fibo -1 + fibo -2 ex : fibo(4) 3 + 2 """
    # on defini les valeurs des nombre de base de la suite fibo nombre fibo 1 et nombre fibo 2 :
    f2 , f1 = 1, 1
    # on va boucler sur les elements de la suite dont on va c
    for i in range(2, n +1):
        f2 ,f1 = f1 ,f1 + f2 
        print("this time i is ", i , "this time  f2 is ", f2, "this time  f1 is" , f1)
    return f1
# on va ici definir que l'on attend un argument uniquement en entrée et que celui ci doit être un entier : 
parser = ArgumentParser()
parser.add_argument(dest="entier", type=int,help="entier d'entrée")
input_args = parser.parse_args()
entier = input_args.entier
print("entier is ", entier)
print("ok we find the fibo number for arg", entier,  fibo(entier))
ce qui nous donne en executant le script :

 /tmp  $  python3 -d fibo.py 4
entier is 4
this time i is  2 this time  f2 is  1 this time  f1 is 2
this time i is  3 this time  f2 is  2 this time  f1 is 3
this time i is  4 this time  f2 is  3 this time  f1 is 5
ok we find the fibo number for arg 4 5
 /tmp  $  python3 -d fibo.py 5
entier is 5
this time i is  2 this time  f2 is  1 this time  f1 is 2
this time i is  3 this time  f2 is  2 this time  f1 is 3
this time i is  4 this time  f2 is  3 this time  f1 is 5
this time i is  5 this time  f2 is  5 this time  f1 is 8
ok we find the fibo number for arg 5 8
 /tmp  $  python3 -d fibo.py 6
entier is 6
this time i is  2 this time  f2 is  1 this time  f1 is 2
this time i is  3 this time  f2 is  2 this time  f1 is 3
this time i is  4 this time  f2 is  3 this time  f1 is 5
this time i is  5 this time  f2 is  5 this time  f1 is 8
this time i is  6 this time  f2 is  8 this time  f1 is 13
ok we find the fibo number for arg 6 13
....

