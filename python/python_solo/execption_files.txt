== Exceptions

You have already seen exceptions in previous code. They occur when something goes wrong, due to incorrect code or input. When an exception occurs, the program immediately stops.
The following code produces the ZeroDivisionError exception by trying to divide 7 by 0.
num1 = 7
num2 = 0
print(num1/num2)
Try It Yourself

Result:
>>>
ZeroDivisionError: division by zero
>>>

Different exceptions are raised for different reasons. 
Common exceptions:
ImportError: an import fails;
IndexError: a list is indexed with an out-of-range number;
NameError: an unknown variable is used;
SyntaxError: the code can't be parsed properly; 
TypeError: a function is called on a value of an inappropriate type;
ValueError: a function is called on a value of the correct type, but with an inappropriate value.
Python has several other built-in exceptions, such as ZeroDivisionError and OSError. Third-party libraries also often define their own exceptions.


= Exception Handling

try /except 

To handle exceptions, and to call code when an exception occurs, you can use a try/except statement.
The try block contains code that might throw an exception. If that exception occurs, the code in the try block stops being executed, and the code in the except block is run. If no error occurs, the code in the except block doesn't run.
For example:
try:
   num1 = 7
   num2 = 0
   print (num1 / num2)
   print("Done calculation")
except ZeroDivisionError:
   print("An error occurred")
   print("due to zero division")
Try It Yourself

Result:
>>>
An error occurred
due to zero division
>>>

A try statement can have multiple different except blocks to handle different exceptions.
Multiple exceptions can also be put into a single except block using parentheses, to have the except block handle all of them.
try:
   variable = 10
   print(variable + "hello")
   print(variable / 2)
except ZeroDivisionError:
   print("Divided by zero")
except (ValueError, TypeError):
   print("Error occurred")
Try It Yourself

Result:
>>>
Error occurred
>>>

An except statement without any exception specified will catch all errors. These should be used sparingly, as they can catch unexpected errors and hide programming mistakes.
For example:
try:
   word = "spam"
   print(word / 0)
except:
   print("An error occurred")
Try It Yourself

Result:
>>>
An error occurred
>>>

Exception handling is particularly useful when dealing with user input.

= finally

To ensure some code runs no matter what errors occur, you can use a finally statement. The finally statement is placed at the bottom of a try/except statement. Code within a finally statement always runs after execution of the code in the try, and possibly in the except, blocks.
try:
   print("Hello")
   print(1 / 0)
except ZeroDivisionError:
   print("Divided by zero")
finally:
   print("This code will run no matter what")
Try It Yourself

Result:
>>>
Hello
Divided by zero
This code will run no matter what
>>>

Code in a finally statement even runs if an uncaught exception occurs in one of the preceding blocks.
try:
   print(1)
   print(10 / 0)
except ZeroDivisionError:
   print(unknown_var)
finally:
   print("This is executed last")
Try It Yourself

Result:
>>>
1
This is executed last

ZeroDivisionError: division by zero
During handling of the above exception, another exception occurred:
NameError: name 'unknown_var' is not defined
>>>

= Raising Exceptions

You can raise exceptions by using the raise statement.
print(1)
raise ValueError
print(2)
Try It Yourself

Result:
>>>
1
ValueError
>>>

You need to specify the type of the exception raised.

Exceptions can be raised with arguments that give detail about them.
For example:
name = "123"
raise NameError("Invalid name!")
Try It Yourself

Result:
>>>
NameError: Invalid name!
>>>


In except blocks, the raise statement can be used without arguments to re-raise whatever exception occurred.
For example:
try:
   num = 5 / 0
except:
   print("An error occurred")
   raise
Try It Yourself

Result:
>>>
An error occurred

ZeroDivisionError: division by zero
>>>

= assertion :

An assertion is a sanity-check that you can turn on or turn off when you have finished testing the program.
An expression is tested, and if the result comes up false, an exception is raised.
Assertions are carried out through use of the assert statement.
print(1)
assert 2 + 2 == 4
print(2)
assert 1 + 1 == 3
print(3)
Try It Yourself

Result:
>>>
1
2
AssertionError
>>>

Programmers often place assertions at the start of a function to check for valid input, and after a function call to check for valid output.

The assert can take a second argument that is passed to the AssertionError raised if the assertion fails.
temp = -10
assert (temp >= 0), "Colder than absolute zero!"
Try It Yourself

Result:
>>>
AssertionError: Colder than absolute zero!
>>>

AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, this type of exception will terminate the program.

= Opening Files

You can use Python to read and write the contents of files.
Text files are the easiest to manipulate. Before a file can be edited, it must be opened, using the open function.
myfile = open("filename.txt")

The argument of the open function is the path to the file. If the file is in the current working directory of the program, you can specify only its name.

You can specify the mode used to open a file by applying a second argument to the open function.
Sending "r" means open in read mode, which is the default. 
Sending "w" means write mode, for rewriting the contents of a file.
Sending "a" means append mode, for adding new content to the end of the file.

Adding "b" to a mode opens it in binary mode, which is used for non-text files (such as image and sound files).
For example:
# write mode
open("filename.txt", "w")

# read mode
open("filename.txt", "r")
open("filename.txt")

# binary write mode
open("filename.txt", "wb")

Once a file has been opened and used, you should close it.
This is done with the close method of the file object.
file = open("filename.txt", "w")
# do stuff to the file
file.close()

We will read/write content to files in the upcoming lessons.

= Reading Files

The contents of a file that has been opened in text mode can be read using the read method.
file = open("filename.txt", "r")
cont = file.read()
print(cont)
file.close()

This will print all of the contents of the file "filename.txt

To read only a certain amount of a file, you can provide a number as an argument to the read function. This determines the number of bytes that should be read. 
You can make more calls to read on the same file object to read more of the file byte by byte. With no argument, read returns the rest of the file.
file = open("filename.txt", "r")
print(file.read(16))
print(file.read(4))
print(file.read(4))
print(file.read())
file.close()

After all contents in a file have been read, any attempts to read further from that file will return an empty string, because you are trying to read from the end of the file.
file = open("filename.txt", "r")
file.read()
print("Re-reading")
print(file.read())
print("Finished")
file.close()

Result:
>>>
Re-reading

Finished
>>>
To retrieve each line in a file, you can use the readlines method to return a list in which each element is a line in the file.
For example:
file = open("filename.txt", "r")
print(file.readlines())
file.close()

Result:
>>>
['Line 1 text \n', 'Line 2 text \n', 'Line 3 text']
>>>

You can also use a for loop to iterate through the lines in the file:
file = open("filename.txt", "r")

for line in file:
    print(line)

file.close() 

Result:
>>>
Line 1 text

Line 2 text

Line 3 text
>>>

In the output, the lines are separated by blank lines, as the print function automatically adds a new line at the end of its output.

= Writing Files

To write to files you use the write method, which writes a string to the file.
For example:
file = open("newfile.txt", "w")
file.write("This has been written to a file")
file.close()

file = open("newfile.txt", "r")
print(file.read())
file.close()
Try It Yourself

Result:
>>>
This has been written to a file
>>>

The "w" mode will create a file, if it does not already exist.

When a file is opened in write mode, the file's existing content is deleted.
file = open("newfile.txt", "r")
print("Reading initial contents")
print(file.read())
print("Finished")
file.close()

file = open("newfile.txt", "w")
file.write("Some new text")
file.close()

file = open("newfile.txt", "r")
print("Reading new contents")
print(file.read())
print("Finished")
file.close()
Try It Yourself

Result:
>>>
Reading initial contents
some initial text
Finished
Reading new contents
Some new text
Finished
>>>

As you can see, the content of the file has been overwritten.

The write method returns the number of bytes written to a file, if successful.
msg = "Hello world!"
file = open("newfile.txt", "w")
amount_written = file.write(msg)
print(amount_written)
file.close()
Try It Yourself

Result:
>>>
12
>>>


= Working with Files

It is good practice to avoid wasting resources by making sure that files are always closed after they have been used. One way of doing this is to use try and finally.
try:
   f = open("filename.txt")
   print(f.read())
finally:
   f.close()

This ensures that the file is always closed, even if an error occurs.

An alternative way of doing this is using with statements. This creates a temporary variable (often called f), which is only accessible in the indented block of the with statement.
with open("filename.txt") as f:
   print(f.read())

The file is automatically closed at the end of the with statement, even if exceptions occur within it.






