=== notes flask : ===

sudo apt install pip3
pip3 install flask

Installing collected packages: Jinja2, Werkzeug, itsdangerous, click, flask
  WARNING: The script flask is installed in '/home/boogie/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
Successfully installed Jinja2-2.11.2 Werkzeug-1.0.1 click-7.1.2 flask-1.1.2 itsdangerous-1.1.0

on ajoute le path de flask dans notre path system :
exemple : vi ~/.zshrc :

export PATH=/home/boogie/.local/bin:$PATH

== bases : ==

1/ creation de projet :

mkdir ~/Documents/lab/flask/weatherapp
cd ~/Documents/lab/flask/weatherapp
mkdir templates : ATTENTION nom utilisé par flask bien s'assurer de le créer sans faute.
on creer un fichier index.html dans notre rep templates
cd templates ; touch index.html  
on crée un fichier index.py à la racine de notre projet :
cd ..
touch index.py 
on va créer notre code flask 

#!/usr/bin/env python3

# on importe les modules nécéssaires :
from flask import Flask
import os

# on initialise  notre appli :
app = Flask(__name__)

# on ajoute une methode sur la route "/" qui va retourner hello world ! lors de l'appel 
@app.route("/")
def index():
    return "hello world !"

if __name__ == '__main__':
    # on defini le port par default de notre appli sur le port 5000
    port = int(os.environ.get('PORT',5000))
    # on va definir que notre serveur va ecouter sur toutes les interfaces sur le port défini ligne précédente :
    app.run(host='0.0.0.0', port=port, debug=True)

on rend notre fichier python executable et on lance notre appli :

./index.py                                                            
 * Serving Flask app "index" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 121-049-855

dans un autre terminal on peut recup la valeur de notre fichier :

curl http://localhost:5000                                         
hello world !

on voit à chaque hit notre serveur récupérer les requettes :
..
127.0.0.1 - - [07/Jun/2020 17:11:40] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [07/Jun/2020 17:13:57] "GET / HTTP/1.1" 200 -

2 / routing :

on va voir comment router notre traffic en fonction des urls ( routage dynamic et static )

on va ajouter un nouveau decorateur dans notre code qui va nous renvoyer "good bye!" quand l'url /goodbye sera saisie :

#!/usr/bin/env python3

from flask import Flask
import os

app = Flask(__name__)
@app.route("/")
def index():
    return "hello world !"

# nouvelle route :
@app.route("/goodbye")
def goodbye():
    return "good bye !"

if __name__ == '__main__':
    port = int(os.environ.get('PORT',5000))
    app.run(host='0.0.0.0', port=port, debug=True)


on relance l'appli et on test :
dans un terminal on appelle nos routes :

curl http://localhost:5000                                           
hello world !%                                                                                                                                        

curl http://localhost:5000/goodbye                                     
good bye !%

coté serveur on a bien les requettes :

./index.py                                                             (⎈ minikube:default)
 * Serving Flask app "index" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 121-049-855
127.0.0.1 - - [07/Jun/2020 17:28:30] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [07/Jun/2020 17:28:35] "GET /goodbye HTTP/1.1" 200 -

on peut donc créer autant de fonctions que de pages que l'on veut servir.

On va maintenant faire du routage dynamique.
On créer une nouvelle fonction qui va utiliser des parametres :
on va ajouter un param "name" qui sera concaténer à "hello," 
on va entourer la param name de notre url par des "<" et ">" : ce qui indique à flask que le contenu sera dynamique.

@app.route("/hello/<name>")
def hello_name(name):
    return "hello, {}".format(name)

on relance et on test :

curl http://localhost:5000/hello/bob                        
hello, bob

coté serveur :

   Use a production WSGI server instead.
 * Debug mode: on
 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 121-049-855
127.0.0.1 - - [07/Jun/2020 17:37:03] "GET /hello/bob HTTP/1.1" 200 -

on peut ajouter plein de fonction :

ex : retourner l'age du user :
..

@app.route("/hello/<name>/<int:age>")
def hello_name_age(name,age):
    return "hello, {} you are {} years old !!".format(name, age)
..
on test coté client et on examine coté serveur : 
curl http://localhost:5000/hello/bob/22                                
hello, bob you are 22 years old !!

..
 * Debugger is active!
 * Debugger PIN: 121-049-855
127.0.0.1 - - [07/Jun/2020 17:43:15] "GET /hello/bob/22 HTTP/1.1" 200 -

Biensur si on saisi une mauvaise url on a une erreur :
curl http://localhost:5000/hello/bob/vingt                             (⎈ minikube:default)
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

coté serveur :
 * Debugger is active!
 * Debugger PIN: 121-049-855
127.0.0.1 - - [07/Jun/2020 17:46:00] "GET /hello/bob/vingt HTTP/1.1" 404 -


== client /server : interraction / templates : ==


on va pouvoir interragir avec les données recues et formatter nos sorties : 


ex: on recupere les données méteo via une api : 

#!/usr/bin/env python3

from flask import Flask
from flask import render_template
import os
import json
import time
import urllib.request

app = Flask(__name__)

def get_weather():
    # apikey jazz :
    #url = "http://api.openweathermap.org/data/2.5/forecast/daily?q=London,uk&appid=7232b41e0fe99a5ec1e05b53a748ddf4"
    # free api key for test :
    url = "https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=439d4b804bc8187953eb36d2a8c26a02"
    response = urllib.request.urlopen(url).read()
    return response

@app.route("/")
def index():
    return get_weather()

if __name__ == '__main__':
    port = int(os.environ.get('PORT',5000))
    app.run(host='0.0.0.0', port=port, debug=True)

un appel à notre ressource nous renvoie le contenu : 

curl http://localhost:5000                                                                      
{"coord":{"lon":-0.13,"lat":51.51},"weather":[{"id":300,"main":"Drizzle","description":"light intensity drizzle","icon":"09d"}],"base":"stations","main":{"temp":280.32,"pressure":1012,"humidity":81,"temp_min":279.15,"temp_max":281.15},"visibility":10000,"wind":{"speed":4.1,"deg":80},"clouds":{"all":90},"dt":1485789600,"sys":{"type":1,"id":5091,"message":0.0103,"country":"GB","sunrise":1485762037,"sunset":1485794875},"id":2643743,"name":"London","cod":200}


