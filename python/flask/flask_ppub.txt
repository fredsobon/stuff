== notes flask complete ppublishing ==

- pre requi :

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04-fr
setup postgresql :

sudo apt update
sudo apt install postgresql postgresql-contrib
# on se loggue en user postgres : qui est installé de base et qui permet d'avoir un role postgresql permettant d'interragir avec la bdd :
sudo -i -u postgres
# on lance le prompt postgres 
psql
# pour quitter le prompt :
postgres=# \q
# on peut créer un role : ex : ajouter un user qui aura le role superadmin postgres :
sudo -u postgres createuser --interactive                     (⎈ b-k:monitoring)
Enter name of role to add: boogie
Shall the new role be a superuser? (y/n) y
# avec ce user on peut se connecter à une base de donnée qui porte le nom du user : on va la creer :
sudo -u postgres  createdb boogie
psql                                                          (⎈ b-k:monitoring)
psql (12.2 (Ubuntu 12.2-4))
Type "help" for help.

boogie=#
# on peut se connecter à une base de données particulière avec le flag -d :
psql -d postgres                                            (⎈ b-k:monitoring)
psql (12.2 (Ubuntu 12.2-4))
Type "help" for help.
# on peut avoir les infos de connections avec la commande \conninfo :
postgres=# \conninfo
You are connected to database "postgres" as user "boogie" via socket in "/var/run/postgresql" at port "5432".
postgres=#
# creation d'une table test :postgres=# CREATE TABLE playground (
postgres(#     equip_id serial PRIMARY KEY,
postgres(#     type varchar (50) NOT NULL,
postgres(#     color varchar (25) NOT NULL,
postgres(#     location varchar(25) check (location in ('north', 'south', 'west', 'east', 'northeast', 'southeast', 'southwest', 'northwest')),
postgres(#     install_date date
postgres(# );
CREATE TABLE
# on peut examiner la table avec \d :
postgres=# \d
                  List of relations
 Schema |          Name           |   Type   | Owner
--------+-------------------------+----------+--------
 public | playground              | table    | boogie
 public | playground_equip_id_seq | sequence | boogie
(2 rows)
Votre table « playground » est là, mais il y a aussi un élément nommé playground_equip_id_seq qui est du type sequence. Il s'agit d'une représentation du type serial que vous avez donné à votre colonne equip_id. Ceci permet de garder une trace du prochain numéro de la séquence et est créé automatiquement pour les colonnes de ce type.

Si vous voulez voir uniquement la table sans la séquence, vous pouvez taper :

\dt
Output
          List of relations
 Schema |    Name    | Type  | Owner
--------+------------+-------+-------
 public | playground | table | sammy
(1 row)
# Ajout, requête et suppression de données dans une table
Maintenant que vous avez une table, vous pouvez y insérer quelques données.

À titre d'exemple, ajoutez un toboggan (« slide ») et une balançoire (« swing ») en appelant la table à laquelle vous voulez les ajouter, en nommant les colonnes et en fournissant ensuite des données pour chaque colonne, comme ceci :

INSERT INTO playground (type, color, location, install_date) VALUES ('slide', 'blue', 'south', '2017-04-28');
INSERT INTO playground (type, color, location, install_date) VALUES ('swing', 'yellow', 'northwest', '2018-08-16');
Vous devez faire attention lors de la saisie des données afin d'éviter quelques problèmes courants. Pour commencer, les noms des colonnes ne doivent pas être mis entre guillemets, mais les valeurs des colonnes que vous saisissez doivent l'être.

Une autre chose à garder à l'esprit est que vous n'entrez pas de valeur pour la colonne equip_id. Cette dernière est en effet générée automatiquement à chaque fois qu'une nouvelle ligne est créée dans la table.

Récupérez les informations que vous avez ajoutées en tapant :

SELECT * FROM playground;
Output
 equip_id | type  | color  | location  | install_date
----------+-------+--------+-----------+--------------
        1 | slide | blue   | south     | 2017-04-28
        2 | swing | yellow | northwest | 2018-08-16
(2 rows)
Ici, vous pouvez voir que votre equip_id a bien été renseigné et que toutes vos autres données ont été organisées correctement.

Si le toboggan de l'aire de jeu se casse et que vous devez l'enlever, vous pouvez également enlever la ligne de votre table en tapant :

DELETE FROM playground WHERE type = 'slide';
Interrogez à nouveau la table :

SELECT * FROM playground;
Output
 equip_id | type  | color  | location  | install_date
----------+-------+--------+-----------+--------------
        2 | swing | yellow | northwest | 2018-08-16
(1 row)
Vous pouvez constater que votre toboggan ne fait plus partie de la table.

# Ajout et suppression de colonnes dans une table
Après avoir créé une table, vous pouvez la modifier pour ajouter ou supprimer des colonnes relativement facilement. Ajoutez une colonne pour indiquer la dernière visite de maintenance pour chaque équipement en tapant :

ALTER TABLE playground ADD last_maint date;
Si vous affichez à nouveau les informations de votre table, vous verrez que la nouvelle colonne a été ajoutée (mais qu'aucune donnée n'a été saisie) :

SELECT * FROM playground;
Output
 equip_id | type  | color  | location  | install_date | last_maint
----------+-------+--------+-----------+--------------+------------
        2 | swing | yellow | northwest | 2018-08-16   |
(1 row)
La suppression d'une colonne est tout aussi simple. Si vous constatez que vos collègues utilisent un outil distinct pour suivre l'historique de la maintenance, vous pouvez supprimer la colonne en tapant :

ALTER TABLE playground DROP last_maint;
Cela supprime la colonne last_maint et toutes les valeurs qui s'y trouvent, mais laisse toutes les autres données intactes.

# Mise à jour des données dans une table
Jusqu'à présent, vous avez appris comment ajouter des enregistrements à une table et comment les supprimer, mais ce tutoriel n'a pas encore évoqué comment modifier des entrées existantes.

Vous pouvez mettre à jour les valeurs d'une entrée existante en interrogeant l'enregistrement que vous souhaitez et en paramétrant la colonne sur la valeur que vous souhaitez utiliser. Vous pouvez effectuer une requête pour l'enregistrement « swing » (cela correspondra à* chaque* balançoire de votre table) et changer sa couleur en « red » (rouge). Cela pourrait être utile si vous donniez un coup de peinture à votre balançoire :

UPDATE playground SET color = 'red' WHERE type = 'swing';
Vous pouvez vérifier que l'opération a réussi en effectuant une nouvelle requête :

SELECT * FROM playground;
Output
 equip_id | type  | color | location  | install_date
----------+-------+-------+-----------+--------------
        2 | swing | red   | northwest | 2010-08-16
(1 row)
Comme vous pouvez le voir, votre balançoire est maintenant enregistrée comme étant rouge.

Conclusion
Vous avez maintenant configuré PostgreSQL sur votre serveur Ubuntu . Cependant, il y a encore beaucoup de choses à découvrir sur Postgres. Voici d'autres guides sur l'utilisation de Postgres :

Une comparaison des systèmes de gestion de bases de données relationnelles
https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems

Découvrir comment créer et gérer des tables avec Postgres
https://www.digitalocean.com/community/tutorials/how-to-create-remove-manage-tables-in-postgresql-on-a-cloud-server

Apprendre à mieux gérer les rôles et les autorisations
https://www.digitalocean.com/community/tutorials/how-to-use-roles-and-manage-grant-permissions-in-postgresql-on-a-vps--2

Créer des requêtes dans Postgres avec Select
https://www.digitalocean.com/community/tutorials/how-to-create-data-queries-in-postgresql-by-using-the-select-command

Découvrir comment sécuriser PostgreSQL
https://www.digitalocean.com/community/tutorials/how-to-secure-postgresql-on-an-ubuntu-vps

Découvrir comment sauvegarder une base de données Postgres
https://www.digitalocean.com/community/tutorials/how-to-backup-postgresql-databases-on-an-ubuntu-vps


# creation de la db learningflask; 
boogie=# create database learningflask;
CREATE DATABASE

= setup flask :

on va utiliser un virtualenv : pas de dépendances avec notre system pour tester des lib etc ..

python3 -m pip install --user virtualenv

mkdir learning_flask ; cd learning_flask
virtualenv venv
created virtual environment CPython3.8.2.final.0-64 in 256ms
  creator CPython3Posix(dest=/home/boogie/Documents/lab/flask/learning_flask/venv, clear=False, global=False)
  seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=/home/boogie/.local/share/virtualenv/seed-app-data/v1.0.1)
  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator
  

on peut lancer l'interpreteur python de notre choix dans un venv : comme on voit ici c'est un python2.7 :
virtualenv -p /usr/bin/python2.7 venv                                (⎈ b-k:monitoring)
created virtual environment CPython2.7.18.candidate.1-64 in 340ms
  creator CPython2Posix(dest=/home/boogie/Documents/lab/flask/learning_flask/venv, clear=False, global=False)
  seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=/home/boogie/.local/share/virtualenv/seed-app-data/v1.0.1)
  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator

= pour utiliser un venv il doit etre activé :
source venv/bin/activate                                             (⎈ b-k:monitoring)

(venv)

on voit le nom du venv dans notre prompt 

A partir du moment ou on a notre venv d'activer on peut lancer et installer des pacquets qui ne seront gérés que dans notre venv :
on va installer flask dans notre venv :
pip install flask                                             (⎈ b-k:monitoring)
Collecting flask
  Using cached Flask-1.1.2-py2.py3-none-any.whl (94 kB)
Collecting Werkzeug>=0.15
  Using cached Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
Collecting click>=5.1
  Using cached click-7.1.2-py2.py3-none-any.whl (82 kB)
Collecting itsdangerous>=0.24
  Using cached itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting Jinja2>=2.10.1
  Using cached Jinja2-2.11.2-py2.py3-none-any.whl (125 kB)
Collecting MarkupSafe>=0.23
  Downloading MarkupSafe-1.1.1-cp38-cp38-manylinux1_x86_64.whl (32 kB)
Installing collected packages: Werkzeug, click, itsdangerous, MarkupSafe, Jinja2, flask
Successfully installed Jinja2-2.11.2 MarkupSafe-1.1.1 Werkzeug-1.0.1 click-7.1.2 flask-1.1.2 itsdangerous-1.1.0


= Flask intro : =

organisation de notre projet :
dans notre venv activé on cree pun rep static qui va contenir differents sous rep : css js images , un rep templates et un fichier vide routes.py
tree -d static                                                (⎈ b-k:monitoring)
static
├── csss
├── images
└── js

ls templates -ld                                              (⎈ b-k:monitoring)
drwxrwxr-x 2 boogie boogie 4096 juin  21 18:01 templates
(venv)  boogie@boogie-stuff  ~/Documents/lab/flask/learning_flask  ll routes.py                                                  (⎈ b-k:monitoring)
-rw-rw-r-- 1 boogie boogie 0 juin  21 18:02 routes.py

on ajoute un readme aussi : touch README.txt

le client fait la requette : elle est recue par routes.py qui contient le code et fonction python , c'est envoyé au template et au rep static. le contenu est généré et renvoyé au client.

= creation d'une homepage :

on va creer un fichier index.html dans le rep templates : c'est une page simple qu'on devra modifier à chaque fois qu'on aura une petite modif.
on va pouvoir utiliser les templates pour factoriser le code. 

on va donc creer une page qui contiendra les éléments invariants de la page html :

cat layout.html

<html>
  <head>
          <link href='http://fonts.googleapis.com/css?family=Open+Sans:300,400,600' rel='stylesheet'>
          <link href='static/css/main.css' rel='stylesheet'>
  </head>
  <body>
          <header>
                  <div class="container">
                          <h1 class="title"><Learning Flask></h1>
                  </div>
          </header>

          {% block content %}
          {% endblock %}
  </body>
</html>

on creer donc une page index.html qui contiendra le contenu des balises bloc content :

cat index.html                                      (⎈ b-k:monitoring)
{% extends "layout.html" %}

{% block content %}
 < main class="hero-section" >
   <div class="container">

   <div class="section-content">
           <h2> Discover places near you! </h2>
           <a href="#" class="btn-primary">Sign up </a>
           <a href="#" class="btn-secondary">learn more </a>
   </div>

   <div class="section-device">
     <img src="static/img/device.png">
   </div>

   <div class="clearfix">

   </div>
   </main>

{% endblock %}




on crée maintenant notre fichier route.py : qui va contenir notre code python et le chargement de flask et du moteur de templating :


cat routes.py                                                        (⎈ b-k:monitoring)
from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

if __name__== "__main__":
    app.run(debug=True)

on va lancer l'application 

chmod +x routes.py
python3 routes.py


dans une autre fenetre on curl notre url sur localhost port 5000 et on a bien une reponse.
Il nous manque le fichier static mais c'est ok :

curl -I http://localhost:5000/                                       (⎈ b-k:monitoring)
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 867
Server: Werkzeug/1.0.1 Python/3.8.2
Date: Sun, 21 Jun 2020 17:51:16 GMT

