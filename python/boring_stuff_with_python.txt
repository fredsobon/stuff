=== notes automate_the_boring_stuff_with_python ===


1/ bases :type de données : 
- caracteres à entourer avec "ou ' ou """ pour la gestion multiligne.
>> print("hello world!")
hello world!
>>> 2 + 2
4
>>> 2.4 * 4
9.6
Concatenation : 
>>> "alice" + "bob"
'alicebob'
attention toujours associer les même type de données pour des calculs ..ex sur les chaines de caractères :
>>> "alice" + 3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly
>>> "alice" * 2
'alicealice'
- enregistrement de variable :
elles sont comme une boite que l'on met dans la mémoire de l'ordinateur.On va procéder à l'assignation d'une variable avec :
un nom et le signe "=" :
>>> spam = 42
>>> spam + 3
45
>>> egg = 2
>>> spam + egg 
44
>>> spam + spam + egg
86
Quand une nouvelle valeur est saisie pour une variable : l'ancienne est effacée.
elles peuvent comporter des lettres maj, min , des chiffres, des "_" mais ne peuvent pas commencer par un chiffre et doivent ne former qu'un mot.
On peut se référrer à pep8 qui declare les bonnes pratiques de nommage des variables python.
Premier programme :

# This program says hello and asks for my name.
print('Hello world!')
print('What is your name?')
# ask for their name
myName = input()
print('It is good to meet you, ' + myName)
print('The length of your name is:')
print(len(myName)
print('What is your age?')
# ask for their age
myAge = input()
print('You will be ' + str(int(myAge) + 1) + ' in a year.')

après avoir rendu executable le fichier on le lance et on obtient donc :
boogie=/home/boogie/Documents/lab/python/boring==> ./00001.py 
Hello world!
What is your name?
bob
It is good to meet you, bob
The length of your name is:
3
What is your age?
40
You will be 41 in a year.


on peut afficher des notes en tant que commentaire il suffit de commencer les lignes avec un # 
pour afficher une ligne vide on peut facilement écrire :
print()
print va nous permettre d'afficher du texte (on encadre ce texte de caractères de type " ' ou """ 

input cette fonction va nous permettre de récupérer les données saisies par le user.
on assigne le tout dans une variable qui se nomme myName 
len est une fonction qui va retourner le nombre de caractères saisis dans le fonction ou le nombre de caracteres referant la valeur d'une variable.
on peut utiliser les fonctions str() , float() et str() pour convertir des types de données en d'autres car il est obligatoire de toujours utiliser des variables de mêmes type pour faire des opérations entre elles.

round() : la fonction round nous permet d'arrondir les nombres passés en paramètres :
>>> round(3.43)
3
>>> round(3.78)
4
>>> round(3.50)
4
>>> round(3.5)
4
>>> round(3.49)
3
par défaut la fonction arrondi au supérieur.

2/ flow control :
on va pouvoir prendre des décisions , ceci va pouvoir se faire en partie grâce à un nouveau type de données les Booléens : True et False (casse à respecter scrupuleusement)
>>> a= True
>>> a
True
>>> a == False
False
>>> a != False
True
On va biensur utiliser les opérateurs de comparaison :

== Equal to
!= Not equal to
< Less than
> Greater than
<= Less than or equal to
>= Greater than or equal to
on va également utiliser les tables de vérité :

"ET" 
The and Operator’s Truth Table
Expression Evaluates to...
True and True True
True and False False
False and True False
False and False False

"OU"
Table 2-3: The or Operator’s Truth Table
Expression Evaluates to...
True or True True
True or False True
False or True True
False or False False

"NON" 
The not Operator
Unlike and and or , the not operator operates on only one Boolean value (or
expression). The not operator simply evaluates to the opposite Boolean value.
>>> not True
False
>>> not not not not True
True
The not Operator’s Truth Table
Expression Evaluates to...
not True False
not False True

On peut biensur mixer test booleen et comparaisons :

>>> (4 < 5) and (5 < 6)
True
>>> (4 < 5) and (9 < 6)
False
>>> (1 == 2) or (2 == 2)
True


Test conditionnel : 
les tests conditionnels vont toujours utiliser les booleens : True et False.
on va utiliser l'indentation et la création de blocks de code :

On indente de quatre espaces le bloc de code puis on place un ":" à la fin de notre condition. On imbrique les blocks sans soucis : il faut forcement juste respecter l'indentation nécéssaire lors du déroulement de notre script: 
exemples : 
if name == 'Mary':
    print('Hello Mary')
    if password == 'swordfish':
        print('Access granted.')
    else:
        print('Wrong password.')

if name == 'Alice':
    print('Hi, Alice.')
elif age < 12:
    print('You are not Alice, kiddo.')


if name == 'Alice':
    print('Hi, Alice.')
elif age < 12:
    print('You are not Alice, kiddo.')
elif age > 2000:
    print('Unlike you, Alice is not an undead, immortal vampire.')
elif age > 100:
    print('You are not Alice, grannie.')


if name == 'Alice':
    print('Hi, Alice.')
elif age < 12:
    print('You are not Alice, kiddo.')
elif age > 100:
    print('You are not Alice, grannie.')
elif age > 2000:
    print('Unlike you, Alice is not an undead, immortal vampire.')
on utilise fréquemment la clause else à la fin d'un test egalement :

if name == 'Alice':
    print('Hi, Alice.')
elif age < 12:
    print('You are not Alice, kiddo.')
else:
    print('You are neither Alice nor a little kid.')

-while :
on peut voir le while comme un if sauf qu'à la fin du test on recommence l'action tant que le test effectué est True / vrai :
on va donc toujours mettre un compteur : un point de départ et une fin ( une action qui va modifier le corps de la boucle) pour evidemment ne pas tomber dans une boucle infinie :

avec un if on a ce type de tests :

spam = 0
if spam < 5:
    print('Hello, world.')
    spam = spam + 1
ce qui nous donne à l'execution :

python3 test.py 
Hello, world.
..le pattern n'est affiché qu'une seule fois.

avec while on a : 

#!/usr/bin/env python3

spam = 0
while spam < 3:
    print("hello world !")
    spam = spam + 1

notre pattern est donc affiché tant que notre test est vrai ( ici spam inferrieur à 3)
boogie=/home/boogie/Documents/lab/python/boring==> ./00002.py 
hello world !
hello world !
hello world !

On peut faire une boucle anonyme : ex demander à un user de saisir son prenom et tant que celui ci n'ecrit pas ce qu'on veut ..recommencer à lui poser la question :

name = ''
    while name != 'your name':
    print('Please type your name.')
    name = input()
print('Thank you!')

ce qui nous donne : 

python3 00003.py 
Please type your name.
bob
Please type your name.
your name
Thank you!

- break : l'utilisation de cette clause va nous permettre de sortir d'une boucle par exemple :
Dès que l'execution du code rencontre le keyword break : on sort de la boucle :
 on reprend notre exemple précédent que l'on a un peu modifier la condition est différente mais on a donc le même comportement en l'executant : 

while True:
    print('Please type your name.')
    name = input()
    # ici on met une condition qui si elle est vrai va nous faire sortir de la boucle dès le passage à break :
    if name == 'your name':
    break
print('Thank you!')


boogie=/home/boogie/Documents/lab/python/boring==> python3 00004.py 
Please type your name.
bob
Please type your name.
your name
Thank you!

- continue : comme break son utilisation se fait dans la boucle. Cette fois tant que la condition ne sera pas vrai on continue à boucler : on sort du deroulement de notre programme et on retourne immediatement au debut de la boucle :

while True:
    print('Who are you?')
    name = input()
    # ici on specifie notre condition : tant qu'elle n'est pas vrai on recommence la boucle au départ 
    if name != 'Joe':
        continue
    print('Hello, Joe. What is the password? (It is a fish.)')
    password = input()
    # ici on refixe une condition qui nous fera sortir de la boucle tant qu'elle n'est pas vrai
    if password == 'swordfish':
        break
print('Access granted.')

/!\ A noter que certaines valeurs seront considérées comme vrai dans certains cas : 
exemple ici si on saisit '' en nom et 0 ou 0.0 en nombre on a le résulat du test qui est vrai !
name = ''
while not name: 
    # ici on voit qu'en saisissant un nom vide : '' le programme continu 
    print('Enter your name:')
    name = input()
print('How many guests will you have?')
numOfGuests = int(input())
if numOfGuests: 
    # ici en saisissant un nombre de chmbre à 0 on continue et on a pas le message d'avertissement envoyé au user
    print('Be sure to have enough room for all your guests.') 
print('Done')
on pourra donc utiliser par securité des tests de type : 

not name != ''
et / ou :
numOfGuests != 0


- for 
on va pouvoir executer grace à for un nombre de boucle déterminé on peut egalement itiliser la fonction range()
sybntaxe : 
for i in range(5):

>>> for i in range(5):
...     print("yup!!")
... 
yup!!
yup!!
yup!!
yup!!
yup!!

>>> for i in range(5):
...     print('Jimmy Five Times (' + str(i) + ')')
... 
Jimmy Five Times (0)
Jimmy Five Times (1)
Jimmy Five Times (2)
Jimmy Five Times (3)
Jimmy Five Times (4)

Il est tout a fait possible d'utiliser break et continue dans une boucle for.

- debut, fin et pas d'arguments avec la fonction range() :
certaines fonctions comme range() peuvent prendre plusieurs arguments :
ex : on peut setter un intervalle : on a toujours premiere valeur , derniere valeur moins valeur du pas . Par defaut le pas est de 1 : 

for i in range(14, 17):
...     print(i)
... 
14
15
16

on peut egalement definir un pas 
ex : ici on va afficher tous les nombres de 10 a 18 exclu par pas de 2 : 
>>> for i in range(10, 18, 2):
...     print(i)
... 
10
12
14
16
on peut egalement agir avec un pas négatif 
>>> for i in range(5, -1, -1):
...     print(i)
... 
5
4
3
2
1
0


- modules :
python de base vient avec  des fonctions buildin , on peut biensur utiliser celles de la librairie standart. Il est possbile d'en importer d'autre 
on utilise le keyword import pour importer notre module
on peut utiliser une methode de notre module en invoquant le module.nom_methode.
ex : afficher 5 nombre aléatoire compris entre 1 et 10 :

>>> import random
>>> for i in range(5):
...     print(random.randint(1, 10))
... 
4
4
9
6
7
on peut importer plusieurs modules à la suite :
import os, sys, math, random

le keyword from peut egalement être utiliser pour ne charger que le fonction / methode qui nous interesse :
on peut aussi dans ce cas se passer d'invoquer le module appellé avant notre méthode : mais ceci est une mauvaise habitude de lecture :

>>> from random import randint
## on peut donc saisir directement randint + arguments plutot que passer par random.randint ..
>>> print(randint(2,8))
6

- Fin de programm avec exit() 

On peut classiquement fermer proprement un programme en invoquant la commande exit() du module sys :

#!/usr/bin/env python3

import sys
while True:
    print('Type exit to exit.')
    response = input()
    if response == 'exit':
        sys.exit()
    print('You typed ' + response + '.')



