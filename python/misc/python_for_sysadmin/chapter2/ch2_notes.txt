### Ipython###

interpreteur python multifonction permettant une haute configuration .

- on peut utiliser l'historique des appels
- on peut completer avec "tab" les fonctions d'un module


# Interraction avec Ipython :

- on a un comportement d'affichage different  pour la sortie écran d'une variable et pour l'évaluation et l'interpretation de la variable . Ex :
In [1]: a=1

In [2]: b=2

In [3]: print(a)
1

In [4]: print(b)
2

In [5]: a
Out[5]: 1

In [6]: b
Out[6]: 2

On voit ici que la sortie est simple quand on affiche la valeur de la variable a et b . Quand on appelle directement la variable : on l'interprete et donc on a un code de sortie "[Out]" : ce système est très pratique pour le debug. 
Dans un shell classique on a pas cette notion.
L'affichage avec "print" utilise la version "unofficial"de la représentation des chaines de caractères tandis que l'appel direct de la variable permet l'affichage "official" de cette representation de chaine de caracteres.

Cette distinction est bien plus importante quand on utilise nos propres classes que quand on utilise les "builts in".  Ex :

In [8]: class DoubleRep(object):
   ...:     def __str__(self):
   ...:         return "Hi, I'm a __str__"
   ...:     def __repr__(self):
   ...:         return "Hi, I'm a __repr__"
   ...:     

In [9]: dr = DoubleRep()

In [10]: print dr
Hi, I'm a __str__

In [11]: dr
Out[11]: Hi, I'm a __repr__

On a defini une classe comportant deux methodes (ces deux methodes existent dans le builtin de python cf help(str) et help(repr) : une __str__ et une __repr__ pour montrer la difference entre l'affichage d'un objet et la representation "officielle" de cet objet.
La methode __str__ sur un objet sera appellée quand la representation "unofficial" sera nécéssaire.
La méthode __rep__ sur un objet sera elle appellée quand on aura besoin de la methode officielle.

Après avoir instancié notre objet DoubleRep et assigné sa valeur à la variable dr ; on affiche la valeur de dr et la méthode __str__ est appellée. On rentre juste le nom de notre variable par la suite et là c'est la méthode __rep__ qui est appellée.

Dans python en général __str__ est appellée a chaque fois que l'on fait un appel str(obj) sur un objet ou quand on utilise une représentation formattée de type "%s" % obj
__rep__ est appellée quand on utilise la forme rep(obj) ou la représentation "%r" % obj


On peut dans Ipython recupérer les infos d'entrées et de sorties :


object?   -> Details about 'object', use 'object??' for extra details.

In [1]: a=1

In [2]: b="lapin"

In [3]: print In
['', u'a=1', u'b="lapin"', u'print In']

In [4]: a
Out[4]: 1

In [5]: b
Out[5]: 'lapin'

In [6]: print Out
{4: 1, 5: 'lapin'}

Si ce qui est saisi dans l'interpreteur ipython est evalué à quelque chose différent de None alors il est affiché dans le promt [Out]

Ces differences entre l'affichage du shell python et de ipython ne sont pas que cosmétiques et font de ipython un "shell" beaucoup plus avancé que le shell python standart.

Deux built-in sont utilisées : pour In on a une liste et pour Out on a un dctionnaire :

In [8]: type(In)
Out[8]: list

In [9]: type(Out)
Out[9]: dict


In [11]: print(In)
['', u'main', u'help(main)', u'help', u'help()', u"get_ipython().magic(u'clear ')", u'help(str)', u'help(repr)', u'type(In)', u'type(Out)', u'print(in)', u'print(In)']

In [12]: print(Out)
{8: <type 'list'>, 9: <type 'dict'>, 3: Type help() for interactive help, or help(object) for help about object.}


On voit ici le recapitulatif des appels à In et Out qui n'ont pas été évalués à None par l'interpreteur.



# Completion avec tab :

Le shell classique python peut avoir la completion si il a été activé avec le module realine mais il faut egalement saisir dans le shell :

>>> import rlcompleter, readline
>>> readline.parse_and_bind('tab: complete')

On peut ensuite avoir la completion auto activée Ex :
>>> import os
>>> os.<TAB> : nous sort toutes les fonctions disponibles du module.

Dans Ipython la feature est de base et on peut en plus compléter sur le nom du module :

In [6]: import o
octavemagic  opcode       operator     optparse     os           os2emxpath   ossaudiodev  


# "Magic Edit" :
L'edition "magic" de ipython permet d'avoir à la fois un shell interractif et un éditeur de texte puissant : c'est un compromis qui peut être très performant.

# Configuration de Ipython :
Au premier lancement de ipython , si on a pas défini de "path" particulier : un répertoire ".ipython" a été crée dans le $HOMEDIR de notre user.
Toute la config et la personnalisation de notre éditeur ipython se fait dans ce repertoire.

# "Help" with "Magic functions" :
Ipython comporte de base pas mal de "magics" fonctions en built-in.
Toutes les lignes commencant par le caractère "%" sera automatiquement associée à une "magic function".
Ceci nous permet de controller le comportement de ipython et plus encore. Les arguments passés après le % n'ont pas besoin d'être entourés de " ' .

- commandes utiles :

lsmagic : 

La commande  lsmagic nous permet d'avoir une liste des "magic functions" dispos.

In [1]: %lsmagic
Out[1]: 
Available line magics:
%alias  %alias_magic  %autocall  %autoindent  %automagic  %bookmark  %cat  %cd  %clear  %colors  %config  %cp  %cpaste  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %install_default_config  %install_ext  %install_profiles  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %paste  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode

Available cell magics:
%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%latex  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile

Automagic is ON, % prefix IS NOT needed for line magics.

completion auto des magic fonctions :

In [2]: %
Display all 122 possibilities? (y or n)
%%!                      %cat                     %logstart                %pwd
%%HTML                   %cd                      %logstate                %pycat
%%SVG                    %clear                   %logstop                 %pylab
%%bash                   %colors                  %ls                      %quickref
%%capture                %config                  %lsmagic                 %recall
%%debug                  %cp                      %lx                      %rehashx
%%file                   %cpaste                  %macro                   %reload_ext
%%html                   %debug                   %magic                   %rep
%%javascript             %dhist                   %man                     %rerun
%%latex                  %dirs                    %matplotlib              %reset
%%perl                   %doctest_mode            %mkdir                   %reset_selective
%%prun                   %ed                      %more                    %rm
%%pypy                   %edit                    %mv                      %rmdir
%%python                 %env                     %notebook                %run
%%python2                %gui                     %page                    %save
%%python3                %hist                    %paste                   %sc
%%ruby                   %history                 %pastebin                %store
%%script                 %install_default_config  %pdb                     %sx
%%sh                     %install_ext             %pdef                    %system
%%svg                    %install_profiles        %pdoc                    %tb
%%sx                     %killbgscripts           %pfile                   %time
%%system                 %ldir                    %pinfo                   %timeit
%%time                   %less                    %pinfo2                  %unalias
%%timeit                 %lf                      %popd                    %unload_ext
%%writefile              %lk                      %pprint                  %who
%alias                   %ll                      %precision               %who_ls
%alias_magic             %load                    %profile                 %whos
%autocall                %load_ext                %prun                    %xdel
%autoindent              %loadpy                  %psearch                 %xmode
%automagic               %logoff                  %psource                 
%bookmark                %logon                   %pushd                   







