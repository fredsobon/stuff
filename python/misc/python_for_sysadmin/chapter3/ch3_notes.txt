### Text ###
La librairie "standard" de python embarque des utilitaires permettant nativement de traiter des flux de textes.
-str : une chaine string est une liste de chaine de caractères.Le type str est extrèmement puissant pour la manipulation de data
In [1]: string1="this is a string"

In [2]: string2='also another strings definition'

In [3]: string3='''another one'''

In [4]: string4="""gess what ..yey another string"""

In [6]: type(string1) , type(string2) , type(string3), type(string4)
Out[6]: (str, str, str, str)
On peut donc creer des chaines de caractères avec des ' " """ : les simples permettent de protéger un caractère special comme en shell . Les doubles comportement normal et les triples vont servir à ecrire sur plusieurs lignes (ex commentaires de code).
In [7]: s="this is a str with 'quotes' in it"

In [8]: s
Out[8]: "this is a str with 'quotes' in it"

In [9]: t='this is a str with \'quotes\' in it.'

In [10]: t
Out[10]: "this is a str with 'quotes' in it."

# Multiline ex :
-> echec sans les ''' In [11]: s='this is 
  File "<ipython-input-11-1ce52cc934bd>", line 1
    s='this is
              ^
SyntaxError: EOL while scanning string literal

->Ok In [12]: s='''this is 
   ....: a multiline str'''
# On remarque lors de l'appel à la variable multiline : l'ajout du \n :
In [13]: s
Out[13]: 'this is \na multiline str'

On a egalement ce que l'on nomme en python des raw strings qui ne vont pas interpretter les sequences d'echapement.
Pour creer une raw string on place un "r" juste avant le premier caractère d'echappement .

Ex sur une tabulation : 
-normal 
In [14]: s='\t'

In [15]: s
Out[15]: '\t'

-raw str :
In [16]: s=r'\t'

In [17]: s
Out[17]: '\\t'


On  observe donc que les raw strings sont representées par un double \ precedant la lettre : on supprime le caractère d'echappement usuel pour le transformer en littéral.

Sequences d'echappement en python :

Python escape sequences
Sequence Interpreted as
\newline Ignored
\\ Backslash
\' Single quote
\” Double quote
\a ASCII Bell
\b ASCII backspace
\f ASCII form feed
\n ASCII line feed
\N{name} Named character in Unicode database (Unicode strings only)
\r ASCII carriage return
\t ASCII horizontal tab
\uxxxx Character with 16-bit hex value xxxx (Unicode only)
\Uxxxxxxxx Character with 32-bit hex value xxxx (Unicode only)
\v ASCII vertical tab
\ooo Character with octal value oo
\xhh Character with hex value hh

Il est utile des les connaitre notamment lors de l'utilisation de reg exp.

# Methode d'extraction de données sur les "str" :

Les "str" sont des objets et permettent donc d'utiliser des methodes dédiées au traitement.

On peut donc egalement utiliser les tests d'appartenance 'in' 'not in'

In [18]: import subprocess

In [20]: res = subprocess.Popen(['uname', '-sv'], stdout=subprocess.PIPE)

In [21]: uname = res.stdout.read().strip()

In [22]: uname
Out[22]: 'Linux #1 SMP Debian 4.0.8-1 (2015-07-11)'

In [23]: 'Linux' in uname
Out[23]: True

In [24]: 'Darwin' in uname
Out[24]: False

In [25]: 'Linux' not in uname
Out[25]: False

In [26]: 'Darwin' not in uname
Out[26]: True



