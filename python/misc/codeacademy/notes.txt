

=== Boolean : 


This and That (or This, But Not That!)

Boolean operators aren't just evaluated from left to right. Just like with arithmetic operators, there's an order of operations for boolean operators:

    not is evaluated first;
    and is evaluated next;
    or is evaluated last.

For example, True or not False and False returns True. If this isn't clear, look at the Hint.

Parentheses () ensure your expressions are evaluated in the order you want. Anything in parentheses is evaluated as its own unit.
Instructions

Assign True or False as appropriate for bool_one through bool_five.

    Set bool_one equal to the result of False or not True and True
    Set bool_two equal to the result of False and not True or True
    Set bool_three equal to the result of True and not (False or False)
    Set bool_four equal to the result of not not True or False and not True
    Set bool_five equal to the result of False or not (True and True)




Mix 'n' Match

Great work! We're almost done with boolean operators.

# Make me false
bool_one = (2 <= 2) and "Alpha" == "Bravo"


Instructions

This time we'll give the expected result, and you'll use some combination of boolean operators to achieve that result.

Remember, the boolean operators are and, or, and not. Use each one at least once!

=== Conditional Statement Syntax : 

if is a conditional statement that executes some specified code after checking if its expression is True.

Here's an example of if statement syntax:

if 8 < 9:
    print "Eight is less than nine!"

In this example, 8 < 9 is the checked expression and print "Eight is less than nine!" is the specified code.
Instructions

If you think the print statement will print to the console, set response equal to 'Y'; otherwise, set response equal to 'N'.


If You're Having...

Let's get some practice with if statements. Remember, the syntax looks like this:

if some_function():
    # block line one
    # block line two
    # et cetera

Looking at the example above, in the event that some_function() returns True, then the indented block of code after it will be executed. In the event that it returns False, then the indented block will be skipped.

Also, make sure you notice the colons at the end of the if statement. We've added them for you, but they're important.
Instructions

In the editor you'll see two functions. Don't worry about anything unfamiliar. We'll explain soon enough.

    Replace the underline on line 2 with an expression that returns True.
    Replace the underline on line 6 with an expression that returns True.

If you do it successfully, then both "Success #1" and "Success #2" are printed.

#Else Problems, I Feel Bad for You, Son...

The else statement complements the if statement. An if/else pair says: "If this expression is true, run this indented code block; otherwise, run this code after the else statement."

Unlike if, else doesn't depend on an expression. For example:

if 8 > 9:
    print "I don't printed!"
else:
    print "I get printed!"

Instructions

Complete the else statements to the right. Note the indentation for each line!



#Else Problems, I Feel Bad for You, Son...

The else statement complements the if statement. An if/else pair says: "If this expression is true, run this indented code block; otherwise, run this code after the else statement."

Unlike if, else doesn't depend on an expression. For example:

if 8 > 9:
    print "I don't printed!"
else:
    print "I get printed!"

Instructions

Complete the else statements to the right. Note the indentation for each line!

#I Got 99 Problems, But a Switch Ain't One

"Elif" is short for "else if." It means exactly what it sounds like: "otherwise, if the following expression is true, do this!"

if 8 > 9:
    print "I don't get printed!"
elif 8 < 9:
    print "I get printed!"
else:
    print "I also don't get printed!"

In the example above, the elif statement is only checked if the original if statement if False.
Instructions

    On line 2, fill in the if statement to check if answer is greater than 5.
    On line 4, fill in the elif so that the function outputs -1 if answer is less than 5.


#The Big If

Really great work! Here's what you've learned in this unit:

Comparators

3 < 4
5 >= 5
10 == 10
12 != 13

Boolean operators

True or False 
(3 < 4) and (5 >= 5)
this() and not that()

Conditional statements

if this_might_be_true():
    print "This really is true."
elif that_might_be_true():
    print "That is true."
else:
    print "None of the above."

Let's get to the grand finale.
Instructions

Write an if statement in the_flying_circus(). It must include:

    if, elif, and else statements;
    At least one of and, or, or not;
    A comparator (==, !=, <, <=, >, or >=);
    Finally, the_flying_circus() must return True when evaluated.

Don't forget to include a : after your if statements!


#Break It Down

Now let's take what we've learned so far and write a Pig Latin translator.

Pig Latin is a language game, where you move the first letter of the word to the end and add "ay." So "Python" becomes "ythonpay." To write a Pig Latin translator in Python, here are the steps we'll need to take:

    Ask the user to input a word in English.
    Make sure the user entered a valid word.
    Convert the word from English to Pig Latin.
    Display the translation result.

Instructions

When you're ready to get coding, click Save and Submit. Since we took the time to write out the steps for our solution, you'll know what's coming next!


#Ahoy! (or Should I Say Ahoyay!)

Let's warm up by printing a welcome message for our translator users.
Instructions

    Please print the phrase "Pig Latin".

#Input!

Next, we need to ask the user for input.

name = raw_input("What's your name?")
print name

In the above example, raw_input() accepts a string, prints it, and then waits for the user to type something and press Enter (or Return).

In the interpreter, Python will ask:

What's your name? >

Once you type in your name and hit Enter, it will be stored in name.
Instructions

    On line 4, use raw_input("Enter a word:") to ask the user to enter a word. Save the results of raw_input() in a variable called original.
    Click Save & Submit Code
    Type a word in the console window and press Enter (or Return).

#Check Yourself!

Next we need to ensure that the user actually typed something.

empty_string = ""
if len(empty_string) > 0:
    # Run this block.
    # Maybe print something?
else:
    # That string must have been empty.

We can check that the user's string actually has characters!
Instructions

Write an if statement that verifies that the string has characters.

    Add an if statement that checks that len(original) is greater than zero. Don't forget the : at the end of the if statement!
    If the string actually has some characters in it, print the user's word.
    Otherwise (i.e. an else: statement), please print "empty".

You'll want to run your code multiple times, testing an empty string and a string with characters. When you're confident your code works, continue to the next exercise.

#Check Yourself... Some More

Now we know we have a non-empty string. Let's be even more thorough.

x = "J123"
x.isalpha()  # False

In the first line, we create a string with letters and numbers.

The second line then runs the function isalpha() which returns False since the string contains non-letter characters.

Let's make sure the word the user enters contains only alphabetical characters. You can use isalpha() to check this! For example:
Instructions

Use and to add a second condition to your if statement. In addition to your existing check that the string contains characters, you should also use .isalpha() to make sure that it only contains letters.

Don't forget to keep the colon at the end of the if statement!


Code pour exemple utilisation isalpha() methode :
print 'Welcome to the Pig Latin Translator!'

# Start coding here!
original = raw_input("Enter a word:")
if len(original) > 0 and original.isalpha():
    print(original)
else:
    print("empty")

ex ok : (chaine de caractere alphabetique : yop )

Welcome to the Pig Latin Translator!
Enter a word: yop
yop
None

ex nok ( chaine de caractere non alphabettique : lapin123 )
Welcome to the Pig Latin Translator!
Enter a word: lapin123
empty
None

#Pop Quiz!

When you finish one part of your program, it's important to test it multiple times, using a variety of inputs.
Instructions

Take some time to test your current code. Try some inputs that should pass and some that should fail. Enter some strings that contain non-alphabetical characters and an empty string.

When you're convinced your code is ready to go, click Save & Submit to move forward!


#Ay B C

Now we can get ready to start translating to Pig Latin! Let's review the rules for translation:

You move the first letter of the word to the end and then append the suffix 'ay'.
Example: python -> ythonpay

Let's create a variable to hold our translation suffix.
Instructions

Create a variable named pyg and set it equal to the suffix 'ay'.


#Word Up

Let's simplify things by making the letters in our word lowercase.

the_string = "Hello"
the_string = the_string.lower()

The .lower() function does not modify the string itself, it simply returns a lowercase-version. In the example above, we store the result back into the same variable.

We also need to grab the first letter of the word.

first_letter  = the_string[0]
second_letter = the_string[1]
third_letter  = the_string[2]

Remember that we start counting from zero, not one, so we access the first letter by asking for [0].
Instructions

Inside your if statement:

    Create a new variable called word that holds the .lower()-case conversion of original.
    Create a new variable called first that holds word[0], the first letter of word.

ex code :

pyg = 'ay'

original = raw_input('Enter a word:')

if len(original) > 0 and original.isalpha():
    word = original.lower()
    first = word[0]
    print original
else:
    print 'empty'



#Move it on Back

Now that we have the first letter stored, we need to add both the letter and the string stored in pyg to the end of the original string.

Remember how to concatenate (i.e. add) strings together?

greeting = "Hello "
name = "D. Y."
welcome = greeting + name

Instructions

On a new line after where you created the first variable:

Create a new variable called new_word and set it equal to the concatenation of word, first, and pyg.


riginal = raw_input('Enter a word:')

if len(original) > 0 and original.isalpha():
    word = original.lower()
    first = word[0]
    new_word = word + first + pyg
    print original
else:
    print 'empty'



#Ending Up

Well done! However, now we have the first letter showing up both at the beginning and near the end.

s = "Charlie"

print s[0]
# will print "C"

print s[1:4]
# will print "har"

    First we create a variable s and give it the string "Charlie"
    Next we access the first letter of "Charlie" using s[0]. Remember letter positions start at 0.
    Then we access a slice of "Charlie" using s[1:4]. This returns everything from the letter at position 1 up till position 4.

We are going to slice the string just like in the 3rd example above.
Instructions

Set new_word equal to the slice from the 1st index all the way to the end of new_word. Use [1:len(new_word)] to do this.

ex code :

yg = 'ay'

original = raw_input('Enter a word:')

if len(original) > 0 and original.isalpha():
    word = original.lower()
    first = word[0]
    new_word = word + first + pyg
    new_word = new_word[1:len(new_word)]
    print original
else:
    print 'empty'


#Testing, Testing, is This Thing On?

Yay! You should have a fully functioning Pig Latin translator. Test your code thorougly to be sure everything is working smoothly.

You'll also want to take out any print statements you were using to help debug intermediate steps of your code. Now might be a good time to add some comments too! Making sure your code is clean, commented, and fully functional is just as important as writing it in the first place.
Instructions

When you're sure your translator is working just the way you want it, click Save & Submit Code to finish this project.

ex code final :

pyg = 'ay'

original = raw_input('Enter a word:')

if len(original) > 0 and original.isalpha():
    word = original.lower()
    first = word[0]
    new_word = word + first + pyg
    new_word = new_word[1:len(new_word)]
    print new_word
else:
    print 'empty'

ex de saisi :
Enter a word: Shake
hakesay
None


#What Good are Functions?

You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it's much cleaner to define a function, which can then be used repeatedly.
Instructions

Check out the code in the editor. If you completed the [Tip Calculator][1] project, you'll remember going through and calculating tax and tip in one chunk of program. Here you can see we've defined two functions: tax to calculate the tax on a bill, and tip to compute the tip.

See how much of the code you understand at first glance (we'll explain it all soon). When you're ready, click Save & Submit to continue.


def tax(bill):
    """Adds 8% tax to a restaurant bill."""
    bill *= 1.08
    print "With tax: %f" % bill
    return bill

def tip(bill):
    """Adds 15% tip to a restaurant bill."""
    bill *= 1.15
    print "With tip: %f" % bill
    return bill
    
meal_cost = 100
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)



def tax(bill):
    """Adds 8% tax to a restaurant bill."""
    bill *= 1.08
    print "With tax: %f" % bill
    return bill

def tip(bill):
    """Adds 15% tip to a restaurant bill."""
    bill *= 1.15
    print "With tip: %f" % bill
    return bill
    
meal_cost = 100
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)



#Function Junction

Functions are defined with three components:

    The header, which includes the def keyword, the name of the function, and any parameters the function requires. Here's an example:

    def hello_world(): // There are no parameters

    An optional comment that explains what the function does.

    """Prints 'Hello World!' to the console."""

    The body, which describes the procedures the function carries out. The body is indented, just like for conditional statements.

    print "Hello World!"

Here's the full function pieced together:

def hello_world():
    """Prints 'Hello World!' to the console."""
    print "Hello World!"

Instructions

Go ahead and create a function, spam, that prints the string "Eggs!" to the console. Don't forget to include a comment of your own choosing (enclose it in triple quotes!).


# Define your spam function starting on line 5. You
# can leave the code on line 11 alone for now--we'll
# explain it soon!
def spam():
    '''This function's gonna print the followig strings 'Eggs!'
    '''
    print "Eggs!"
# Define the spam function above this line.
spam()


Eggs!
None


#Call and Response

After defining a function, it must be called to be implemented. In the previous exercise, spam() in the last line told the program to look for the function called spam and execute the code inside it.
Instructions

We've set up a function, square. Call it on the number 10 (by putting 10 between the parentheses of square()) on line 9!

def square(n):
    """Returns the square of a number."""
    squared = n**2
    print "%d squared is %d." % (n, squared)
    return squared
    
# Call the square function on line 9! Make sure to
# include the number 10 between the parentheses.
square(10)


10 squared is 100.
None



#Parameters and Arguments

Let's reexamine the first line that defined square in the previous exercise:

def square(n):

n is a parameter of square. A parameter acts as a variable name for a passed in argument. With the previous example, we called square with the argument 10. In this instance the function was called, n holds the value 10.

A function can require as many parameters as you'd like, but when you call the function, you should generally pass in a matching number of arguments.
Instructions

Check out the function in the editor, power. It should take two arguments, a base and an exponent, and raise the first to the power of the second. It's currently broken, however, because its parameters are missing.

Replace the ___s with the parameters base and exponent and call power on a base of 37 and a power of 4.

Empty exercice :

def power(___, ___):  # Add your parameters here!
    result = base**exponent
    print "%d to the power of %d is %d." % (base, exponent, result)

power(__,__)  # Add your arguments here!

Result :

def power(base, exponent):  # Add your parameters here!
    result = base**exponent
    print "%d to the power of %d is %d." % (base, exponent, result)

power(37,4)  # Add your arguments here!

37 to the power of 4 is 1874161.
None 


#Functions Calling Functions

We've seen functions that can print text or do simple arithmetic, but functions can be much more powerful than that. For example, a function can call another function:

def fun_one(n):
    return n * 5

def fun_two(m):
    return fun_one(m) + 7

Instructions

Let's look at the two functions in the editor: one_good_turn (which adds 1 to the number it takes in as an argument) and deserves_another (which adds 2).

Change the body of deserves_another so that it always adds 2 to the output of one_good_turn.

Question :
def one_good_turn(n):
    return n + 1
    
def deserves_another(n):
    return n + 2

Reponse :
def one_good_turn(n):
    return n + 1
    
def deserves_another(n):
    return one_good_turn(n) + 2


#Practice Makes Perfect

Let's create a few more functions just for good measure.

def shout(phrase):
    if phrase == phrase.upper():
        return "YOU'RE SHOUTING!"
    else:
        return "Can you speak up?"

shout("I'M INTERESTED IN SHOUTING")

The example above is just there to help you remember how functions are structured.

Don't forget the colon at the end of your function definition!
Instructions

    First, def a function called cube that takes an argument called number. Don't forget the parentheses and the colon!
    Make that function return the cube of that number (i.e. that number multiplied by itself and multiplied by itself once again).
    Define a second function called by_three that takes an argument called number.
    if that number is divisible by 3, by_three should call cube(number) and return its result. Otherwise, by_three should return False.

Don't forget that if and else statements need a : at the end of that line!
Exercice answer :
def cube(number):
    return number * number * number
    
def by_three(number):
    if number % 3 == 0:
        return cube(number)
    else:
        return False

#I  Know Kung Fu

Remember import this from the first exercise in this course? That was an example of importing a module. A module is a file that contains definitions—including variables and functions—that you can use once it is imported.
Instructions

Before we try any fancy importing, let's see what Python already knows about square roots. On line 3 in the editor, ask Python to

print sqrt(25)

which we would expect to equal five.

 Ask Python to print sqrt(25) on line 3.

print sqrt(25)
Avec l'erreur suivante :
Traceback (most recent call last):
  File "python", line 3, in <module>
NameError: name 'sqrt' is not defined



#Generic Imports

Did you see that? Python said: "NameError: name 'sqrt' is not defined." Python doesn't know what square roots are—yet.

There is a Python module named math that includes a number of useful variables and functions, and sqrt() is one of those functions. In order to access math, all you need is the import keyword. When you simply import a module this way, it's called a generic import.
Instructions

You'll need to do two things here:

    Type import math on line 2 in the editor.
    Insert math. before sqrt() so that it has the form math.sqrt(). This tells Python not only to import math, but to get the sqrt() function from within math.

Then hit Save & Submit to see what Python now knows.

# Ask Python to print sqrt(25) on line 3.
import math
print math.sqrt(25)

5.0
None


#Function Imports

Nice work! Now Python knows how to take the square root of a number.

However, we only really needed the sqrt function, and it can be frustrating to have to keep typing math.sqrt().

It's possible to import only certain variables or functions from a given module. Pulling in just a single function from a module is called a function import, and it's done with the from keyword:

from module import function

Now you can just type sqrt() to get the square root of a number—no more math.sqrt()!
Instructions

Let's import only the sqrt function from math this time. (You don't need the () after sqrt in the from math import sqrt bit.)

# Import *just* the sqrt function from math on line 3!
from math import sqrt
sqrt(5)

None


#Universal Imports

Great! We've found a way to handpick the variables and functions we want from modules.

What if we still want all of the variables and functions in a module but don't want to have to constantly type math.?

Universal import can handle this for you. The syntax for this is:

from module import *

Instructions

Use the power of from module import * to import everything from the math module on line 3 of the editor.

# Import *everything* from the math module on line 3!
from math import *
sqrt(5)

None

#Here Be Dragons

Universal imports may look great on the surface, but they're not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from.

If you have a function of your very own named sqrt and you import math, your function is safe: there is your sqrt and there is math.sqrt. If you do from math import *, however, you have a problem: namely, two different functions with the exact same name.

Even if your own definitions don't directly conflict with names from imported modules, if you import * from several modules at once, you won't be able to figure out which variable or function came from where.

For these reasons, it's best to stick with either import module and type module.name or just import specific variables and functions from various modules as needed.
Instructions

The code in the editor will show you everything available in the math module.

Click Save & Submit Code to check it out (you'll see sqrt, along with some other useful things like pi, factorial, and trigonometric functions).

import math            # Imports the math module
everything = dir(math) # Sets everything to a list of things from math
print everything       # Prints 'em all!

['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
None


#On Beyond Strings

Now that you understand what functions are and how to import modules, let's look at some of the functions that are built in to Python (no modules required!).

You already know about some of the built-in functions we've used with strings, such as .upper(), .lower(), str(), and len(). These are great for doing work with strings, but what about something a little more analytic?
Instructions

What do you think the code in the editor will do? Click Save & Submit Code when you think you have an idea.

Question :
def biggest_number(*args):
    print max(args)
    return max(args)
    
def smallest_number(*args):
    print min(args)
    return min(args)

def distance_from_zero(arg):
    print abs(arg)
    return abs(arg)


biggest_number(-10, -5, 5, 10)
smallest_number(-10, -5, 5, 10)
distance_from_zero(-10)

Answer :

10
-10
10
None

#
max()

The max() function takes any number of arguments and returns the largest one. ("Largest" can have odd definitions here, so it's best to use max() on integers and floats, where the results are straightforward, and not on other objects, like strings.)

For example, max(1,2,3) will return 3 (the largest number in the set of arguments).
Instructions

Try out the max() function on line 3 of the editor. You can provide any number of integer or float arguments to max().

# Set maximum to the max value of any set of numbers on line 3!

maximum = 

print maximum

# Set maximum to the max value of any set of numbers on line 3!

maximum = max(5, 7.7, 0.2)

print maximum

7.7
None


#
min()

min() then returns the smallest of a given series of arguments.
Instructions

Go ahead and set minimum equal to the min() of any set of integers or floats you'd like.


# Set minimum to the min value of any set of numbers on line 3!

minimum = min(4, 543445566, 7777655887765)

print minimum

4
None

#
abs()

The abs() function returns the absolute value of the number it takes as an argument—that is, that number's distance from 0 on an imagined number line. For instance, 3 and -3 both have the same absolute value: 3. The abs() function always returns a positive value, and unlike max() and min(), it only takes a single number.
Instructions

Set absolute equal to the absolute value of -42 on line 2.

absolute = abs(-42)

print absolute

42
None

#
type()

Finally, the type() function returns the type of the data it receives as an argument. If you ask Python to do the following:

print type(42)
print type(4.2)
print type('spam')

Python will output:

<type 'int'>
<type 'float'>
<type 'str'>

Instructions

Have Python print out the type of an int, a float, and a str string in the editor. You can pick any values on which to call type(), so long as they produce one of each.


# Print out the types of an integer, a float,
# and a string on separate lines below.
print type(5)
print(type(4.4))
print(type("lapin"))

<type 'int'>
<type 'float'>
<type 'str'>
None

# 
Review: Functions

Okay! Let's review functions.

def speak(message):
    return message

if happy():
    speak("I'm happy!")
elif sad():
    speak("I'm sad.")
else:
    speak("I don't know what I'm feeling.")

Again, the example code above is just there for your reference!
Instructions

    First, def a function, shut_down, that takes one argument s. Don't forget the parentheses or the colon!
    Then, if the shut_down function receives an s equal to "yes", it should return "Shutting down"
    Alternatively, elif s is equal to "no", then the function should return "Shutdown aborted".
    Finally, if shut_down gets anything other than those inputs, the function should return "Sorry"

def shut_down(s):
    if s == "yes":
        return "Shutting down"
    elif s == "no" :
        return "Shutdown aborted"
    else :
        return "Sorry"

None

#Review: Modules

Good work! Now let's see what you remember about importing modules (and, specifically, what's available in the math module).
Instructions

Import the math module in whatever way you prefer. Call its sqrt function on the number 13689 and print that value to the console.

from math import sqrt
sqrt(13689)
print(sqrt(13689))

117.0
None

#
Review: Built-In Functions

Perfect! Last but not least, let's review the built-in functions you've learned about in this lesson.

def is_numeric(num):
    return type(num) == int or type(num) == float:

max(2, 3, 4) # 4
min(2, 3, 4) # 2

abs(2) # 2
abs(-2) # 2

Instructions

    First, def a function called distance_from_zero, with one argument (choose any argument name you like).
    If the type of the argument is either int or float, the function should return the absolute value of the function input.
    Otherwise, the function should return "Nope"

def distance_from_zero(number):
    if type(number) == int or type(number) == float:
        return abs(number)
    else:
        return "Nope"

None


# Planning Your Trip

When planning a vacation, it's very important to know exactly how much you're going to spend.

def wages(hours):
    # If I make $8.35/hour...
    return 8.35 * hours

The above example is just a refresher in how functions are defined.

Let's use functions to calculate your trip's costs.
Instructions

    Define a function called hotel_cost with one argument nights as input.
    The hotel costs $140 per night. So, the function hotel_cost should return 140 * nights.


def hotel_cost(nights):
    return 140 * nights
hotel_cost(20)



#Getting There

You're going to need to take a plane ride to get to your location.

def fruit_color(fruit):
    if fruit == "apple":
        return "red"
    elif fruit == "banana":
        return "yellow"
    elif fruit == "pear":
        return "green"

    The example above defines the function fruit_color that accepts a string as the argument fruit.
    The function returns a string if it knows the color of that fruit.

Instructions

    Below your existing code, define a function called plane_ride_cost that takes a string, city, as input.
    The function should return a different price depending on the location, similar to the code example above. Below are the valid destinations and their corresponding round-trip prices.

"Charlotte": 183
"Tampa": 220
"Pittsburgh": 222
"Los Angeles": 475


def hotel_cost(nights):
    return 140 * nights
hotel_cost(20)

def plane_ride_cost(city):
    if city == "Charlotte":
        return 183
    elif city == "Tampa":
        return 220
    elif city == "Pittsburgh":
        return 222
    elif city == "Los Angeles":
        return 475

# Transportation

You're also going to need a rental car in order for you to get around.

def finish_game(score):
    tickets = 10 * score
    if score >= 10:
        tickets += 50
    elif score >= 7:
        tickets += 20
    return tickets

In the above example, we first give the player 10 tickets for every point that the player scored. Then, we check the value of score multiple times.

    First, we check if score is greater than or equal to 10. If it is, we give the player 50 bonus tickets.
    If score is just greater than or equal to 7, we give the player 20 bonus tickets.
    At the end, we return the total number of tickets earned by the player.

Remember that an elif statement is only checked if all preceding if/elif statements fail.
Instructions

    Below your existing code, define a function called rental_car_cost with an argument called days.
    Calculate the cost of renting the car:
        Every day you rent the car costs $40.
        if you rent the car for 7 or more days, you get $50 off your total.
        Alternatively (elif), if you rent the car for 3 or more days, you get $20 off your total.
        You cannot get both of the above discounts.
    Return that cost.

Just like in the example above, this check becomes simpler if you make the 7-day check an if statement and the 3-day check an elif statement.


tel_cost(nights):
    return 140 * nights
hotel_cost(20)

def plane_ride_cost(city):
    if city == "Charlotte":
        return 183
    elif city == "Tampa":
        return 220
    elif city == "Pittsburgh":
        return 222
    elif city == "Los Angeles":
        return 475
        
def rental_car_cost(days):
    if days >= 7 :
        return (days * 40) - 50
    elif 3 <= days and days < 7 :
        return (days * 40) - 20
    else :
        return days * 40 

#  Pull it Together

Great! Now that you've got your 3 main costs figured out, let's put them together in order to find the total cost of your trip.

def double(n):
    return 2 * n
def triple(p):
    return 3 * p

def add(a, b):
    return double(a) + triple(b)

    We define two simple functions, double(n) and triple(p) that return 2 times or 3 times their input. Notice that they have n and p as their arguments.
    We define a third function, add(a, b) that returns the sum of the previous two functions when called with a and b, respectively.

Instructions

    Below your existing code, define a function called trip_cost that takes two arguments, city and days.
    Like the example above, have your function return the sum of calling the rental_car_cost(days), hotel_cost(days), and plane_ride_cost(city) functions.

It is completely valid to call the hotel_cost(nights) function with the variable days. Just like the example above where we call double(n) with the variable a, we pass the value of days to the new function in the argument nights.

def hotel_cost(nights):
    return 140 * nights
hotel_cost(20)

def plane_ride_cost(city):
    if city == "Charlotte":
        return 183
    elif city == "Tampa":
        return 220
    elif city == "Pittsburgh":
        return 222
    elif city == "Los Angeles":
        return 475
        
def rental_car_cost(days):
    if days >= 7 :
        return (days * 40) - 50
    elif 3 <= days and days < 7 :
        return (days * 40) - 20
    else :
        return days * 40 
        
def trip_cost(city, days):
    return hotel_cost(days) + plane_ride_cost(city) + rental_car_cost(days)


# Hey, You Never Know!

You can't expect to only spend money on the plane ride, hotel, and rental car when going on a vacation. There also needs to be room for additional costs like fancy food or souvenirs.
Instructions

    Modify your trip_cost function definition. Add a third argument, spending_money.
    Modify what the trip_cost function does. Add the variable spending_money to the sum that it returns.

def hotel_cost(nights):
    return 140 * nights
hotel_cost(20)

def plane_ride_cost(city):
    if city == "Charlotte":
        return 183
    elif city == "Tampa":
        return 220
    elif city == "Pittsburgh":
        return 222
    elif city == "Los Angeles":
        return 475
        
def rental_car_cost(days):
    if days >= 7 :
        return (days * 40) - 50
    elif 3 <= days and days < 7 :
        return (days * 40) - 20
    else :
        return days * 40 
        
def trip_cost(city, days, spending_money):
    
    return hotel_cost(days) + plane_ride_cost(city) + rental_car_cost(days) + spending_money


# Plan Your Trip!

Nice work! Now that you have it all together, let's take a trip.

What if we went to Los Angeles for 5 days and brought an extra 600 dollars of spending money?
Instructions

After your previous code, print out the trip_cost( to "Los Angeles" for 5 days with an extra 600 dollars of spending money.

Don't forget the closing ) after passing in the 3 previous values!

def hotel_cost(nights):
    return 140 * nights
hotel_cost(20)

def plane_ride_cost(city):
    if city == "Charlotte":
        return 183
    elif city == "Tampa":
        return 220
    elif city == "Pittsburgh":
        return 222
    elif city == "Los Angeles":
        return 475
        
def rental_car_cost(days):
    if days >= 7 :
        return (days * 40) - 50
    elif 3 <= days and days < 7 :
        return (days * 40) - 20
    else :
        return days * 40 
        
def trip_cost(city, days, spending_money):
    
    return hotel_cost(days) + plane_ride_cost(city) + rental_car_cost(days) + spending_money
    
print( trip_cost("Los Angeles", 5 , 600))

## Lists :

#Introduction to Lists

Lists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you've already learned about include strings, numbers, and booleans.)

You can assign items to a list with an expression of the form

list_name = [item_1, item_2]

with the items in between brackets. A list can also be empty: empty_list = [].

Lists are very similar to strings, but there are a few key differences.
Instructions

The list zoo_animals has three items (check them out on line 1). Go ahead and add a fourth! Just enter the name of your favorite animal (as a "string") on line 1, after the final comma but before the closing ].


zoo_animals = ["pangolin", "cassowary", "sloth", "tiger"];
# One animal is missing!

if len(zoo_animals) > 3:
    print "The first animal at the zoo is the " + zoo_animals[0]
    print "The second animal at the zoo is the " + zoo_animals[1]
    print "The third animal at the zoo is the " + zoo_animals[2]
    print "The fourth animal at the zoo is the " + zoo_animals[3]


The first animal at the zoo is the pangolin
The second animal at the zoo is the cassowary
The third animal at the zoo is the sloth
The fourth animal at the zoo is the tiger
None

#ccess by Index

You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index].

List indices begin with 0, not 1! You access the first item in a list like this: list_name[0]. The second item in a list is at index 1: list_name[1]. Computer scientists love to start counting from zero.
Instructions

Write a statement that prints the result of adding the second and fourth items of the list. Make sure to access the list by index!
numbers = [5, 6, 7, 8]

print "Adding the numbers at indices 0 and 2..."
print numbers[0] + numbers[2]
print "Adding the numbers at indices 1 and 3..."
# Your code here!
print numbers[1] + numbers[3] 

Adding the numbers at indices 0 and 2...
12
Adding the numbers at indices 1 and 3...
14
None

# New Neighbors

A list index behaves like any other variable name! It can be used to access as well as assign values.

You saw how to access a list index like this:

zoo_animals[0]
# Gets the value "pangolin"

You can see how assignment works on line 5:

zoo_animals[2] = "hyena"
# Changes "sloth" to "hyena"

Instructions

Write an assignment statement that will replace the item that currently holds the value "tiger" with another animal (as a string). It can be any animal you like.

zoo_animals = ["pangolin", "cassowary", "sloth", "tiger"]
# Last night our zoo's sloth brutally attacked 
#the poor tiger and ate it whole.

# The ferocious sloth has been replaced by a friendly hyena.
zoo_animals[2] = "hyena"

# What shall fill the void left by our dear departed tiger?
# Your code here!
zoo_animals[3] = "elephant"

# Late Arrivals & List Length

A list doesn't have to have a fixed length. You can add items to the end of a list any time you like!

letters = ['a', 'b', 'c']
letters.append('d')
print len(letters)
print letters

    In the above example, we first create a list called letters.
    Then, we add the string 'd' to the end of the letters list.
    Next, we print out 4, the length of the letters list.
    Finally, we print out ['a', 'b', 'c', 'd'].

Instructions

    On lines 5, 6, and 7, append three more items to the suitcase list, just like the second line of the example above. (Maybe bring a bathing suit?)
    Then, set list_length equal to the length of the suitcase list.
suitcase = [] 
suitcase.append("sunglasses")

# Your code here!
suitcase.append("bob")
suitcase.append("newspaper")
suitcase.append("ball")



list_length = len(suitcase) # Set this to the length of suitcase

print "There are %d items in the suitcase." % (list_length)
print suitcase

There are 4 items in the suitcase.
['sunglasses', 'bob', 'newspaper', 'ball']
None 

# List Slicing

Sometimes, you only want to access a portion of a list.

letters = ['a', 'b', 'c', 'd', 'e']
slice = letters[1:3]
print slice
print letters

    In the above example, we first create a list called letters.
    Then, we take a subsection and store it in the slice list. We start at the index before the colon and continue up to but not including the index after the colon.
    Next, we print out ['b', 'c']. Remember that we start counting indices from 0 and that we stopped before index 3.
    Finally, we print out ['a', 'b', 'c', 'd', 'e'], just to show that we did not modify the original letters list.

Instructions

    On line 4, create a list called middle containing only the two middle items from suitcase.
    On line 5, create a list called last made up only of the last two items from suitcase.
suitcase = ["sunglasses", "hat", "passport", "laptop", "suit", "shoes"]

first  = suitcase[0:2]  # The first and second items (index zero and one)
middle =  suitcase[2:4]              # Third and fourth items (index two and three)
last   =  suitcase[4:6]              # The last two items (index four and five)

# suitcase = ["sunglasses", "hat", "passport", "laptop", "suit", "shoes"]


# Slicing Lists and Strings

You can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0.

my_list[:2]
# Grabs the first two items
my_list[3:]
# Grabs the fourth through last items

If your list slice includes the very first or last item in a list (or a string), the index for that item doesn't have to be included.
Instructions

    Assign to dog a slice of animals from index 3 up until but not including index 6.
    Assign to frog a slice of animals from index 6 until the end of the string.
animals = "catdogfrog"
cat  = animals[:3]   # The first three characters of animals
dog  = animals[3:6]              # The fourth through sixth characters
frog = animals[6:]              # From the seventh character to the end


# Maintaining Order

Sometimes you need to search for an item in a list.

animals = ["ant", "bat", "cat"]
print animals.index("bat")

    First, we create a list called animals with three strings.
    Then, we print the first index that contains the string "bat", which will print 1.

We can also insert items into a list.

animals.insert(1, "dog")
print animals

    We insert "dog" at index 1, which moves everything down by 1.
    We print out ["ant", "dog", "bat", "cat"]

Instructions

    Use the .index(item) function to find the index of "duck". Assign that result to a variable called duck_index.
    Then .insert(index, item) the string "cobra" at that index.
animals = ["aardvark", "badger", "duck", "emu", "fennec fox"]
duck_index = animals.index("duck") # Use index() to find "duck"
print(duck_index)
# Your code here!
animals.insert(duck_index,"cobra")


print animals # Observe what prints after the insert operation

2
['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox']
None


### for loop : 
# For One and All

If you want to do something with every item in the list, you can use a for loop. If you've learned about for loops in JavaScript, pay close attention! They're different in Python.

for variable in list_name:
    # Do stuff!

A variable name follows the for keyword; it will be assigned the value of each list item in turn.

Then in list_name designates list_name as the list the loop will work on. The line ends with a colon (:) and the indented code that follows it will be executed once per item in the list.
Instructions

Write a statement in the indented part of the for-loop that prints a number equal to 2 * number for every list item.

st = [1,9,3,8,5,7]

for number in my_list:
    # Your code here
    print(2 * number)

2
18
6
16
10
14
None 

#
More with 'for'

If your list is a jumbled mess, you may need to sort() it.

animals = ["cat", "ant", "bat"]
animals.sort()

for animal in animals:
    print animal

    First, we create a list called animals with three strings. The strings are not in alphabetical order.
    Then, we sort animals into alphabetical order. Note that .sort() modifies the list rather than returning a new list.
    Then, for each item in animals, we print that item out as "ant", "bat", "cat" on their own line each.

Instructions

    Write a for-loop that iterates over start_list and .append()s each number squared (x ** 2) to square_list.
    Then sort square_list!

start_list = [5, 3, 1, 2, 4]
square_list = []

# Your code here!
for x in start_list:
    number = x ** 2
    square_list.append(number)
square_list.sort()
print square_list

[1, 4, 9, 16, 25]
None

## dictionaries :


This Next Part is Key

A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are enclosed in curly braces, like so:

d = {'key1' : 1, 'key2' : 2, 'key3' : 3}

This is a dictionary called d with three key-value pairs. The key 'key1' points to the value 1, 'key2' to 2, and so on.

Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more!
Instructions

Print the values stored under the 'Sloth' and 'Burmese Python' keys. Accessing dictionary values by key is just like accessing list values by index:

residents['Puffin']
# Gets the value 104

Check the Hint if you need help!

# Assigning a dictionary with three key-value pairs to residents:
residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}

print residents['Puffin'] # Prints Puffin's room number

# Your code here!
print residents['Sloth']
print residents['Burmese Python']


104
105
106
None

# New Entries

Like Lists, Dictionaries are "mutable". This means they can be changed after they are created. One advantage of this is that we can add new key/value pairs to the dictionary after it is created like so:

dict_name[new_key] = new_value

An empty pair of curly braces {} is an empty dictionary, just like an empty pair of [] is an empty list.

The length len() of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list. (That's right: you can put lists inside dictionaries!)
Instructions

Add at least three more key-value pairs to the menu variable, with the dish name (as a "string") for the key and the price (a float or integer) as the value. Here's an example:

menu['Spam'] = 2.50


menu = {} # Empty dictionary
menu['Chicken Alfredo'] = 14.50 # Adding new key-value pair
print menu['Chicken Alfredo']

# Your code here: Add some dish-price pairs to menu!
menu['Pasta Sicilian'] = 7.4
menu['Lasagna'] = 8.2
menu['Tortelini'] = 5.9


print "There are " + str(len(menu)) + " items on the menu."
print menu

14.5
There are 4 items on the menu.
{'Chicken Alfredo': 14.5, 'Tortelini': 5.9, 'Lasagna': 8.2, 'Pasta Sicilian': 7.4}
None 

# 
Changing Your Mind

Because dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the del command:

del dict_name[key_name]

will remove the key key_name and its associated value from the dictionary.

A new value can be associated with a key by assigning a value to the key, like so:

dict_name[key] = new_value

Instructions

Delete the 'Sloth' and 'Bengal Tiger' items from zoo_animals using del.

Set the value associated with 'Rockhopper Penguin' to anything other than 'Arctic Exhibit'.

# key - animal_name : value - location 
zoo_animals = { 'Unicorn' : 'Cotton Candy House',
'Sloth' : 'Rainforest Exhibit',
'Bengal Tiger' : 'Jungle House',
'Atlantic Puffin' : 'Arctic Exhibit',
'Rockhopper Penguin' : 'Arctic Exhibit'}
# A dictionary (or list) declaration may break across multiple lines

# Removing the 'Unicorn' entry. (Unicorns are incredibly expensive.)
del zoo_animals['Unicorn']

# Your code here!
del zoo_animals['Sloth']
del zoo_animals['Bengal Tiger']
zoo_animals['Rockhopper Penguin'] = 'Artic Exhibit'


print zoo_animals

{'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Artic Exhibit'}
None

# Remove a Few Things

Sometimes you need to remove something from a list.

beatles = ["john","paul","george","ringo","stuart"]
beatles.remove("stuart")
print beatles
>> ["john","paul","george","ringo"]

    We create a list called beatles with 5 strings.
    Then, we remove the first item from beatles that matches the string "stuart". Note that .remove(item) does not return anything.
    Finally, we print out that list just to see that "stuart" was actually removed.

Instructions

Remove 'dagger' from the list of items stored in the backpack variable.


backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']
backpack.remove('dagger')

None

#
It's Dangerous to Go Alone! Take This

Let's go over a few last notes about dictionaries

my_dict = {
    "fish": ["c", "a", "r", "p"],
    "cash": -4483,
    "luck": "good"
}
print my_dict["fish"][0]

    In the example above, we created a dictionary that holds many types of values.
    The key "fish" has a list, the key "cash" has an int, and the key "luck" has a string.
    Finally, we print the letter 'c'. When we access a value in the dictionary like my_dict["fish"], we have direct access to that value. So we can access the item at index '0' in the list stored by the key "fish"

Instructions

    Add a key to inventory called 'pocket'
    Set the value of 'pocket' to be a list consisting of the strings 'seashell', 'strange berry', and 'lint'
    .sort() the items in the list stored under the 'backpack' key
    Then .remove('dagger') from the list of items stored under the 'backpack' key
    Add 50 to the number stored under the 'gold' key

inventory = {
    'gold' : 500,
    'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key
    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']
}

# Adding a key 'burlap bag' and assigning a list to it
inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']

# Sorting the list found under the key 'pouch'
inventory['pouch'].sort() 

# Your code here
inventory['pocket'] = ['seashell', 'strange berry', 'lint']
inventory['backpack'].sort()
inventory['backpack'].remove('dagger')
inventory['gold'] = 550


#  We Begin

Before we begin our exercise, we should go over the Python for loop one more time. For now, we are only going to go over the for loop in terms of how it relates to lists and dictionaries. We'll explain more cool for loop uses in later courses.

for loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element. A sample loop would be structured as follows:

a = ["List of some sort”]
for x in a: 
    # Do something for every x

This loop will run all of the code in the indented block under the for x in a: statement. The item in the list that is currently being evaluated will be x. So running the following:

for item in [1, 3, 21]: 
    print item

would print 1, then 3, and then 21. The variable between for and in can be set to any variable name (currently item), but you should be careful to avoid using the word “list” as a variable, since that's a reserved word (that is, it means something special) in the Python language.
Instructions

Use a for loop to print out all of the elements in the list names.

names = ["Adam","Alex","Mariah","Martine","Columbus"]
for x in names:
    print(x)

Adam
Alex
Mariah
Martine
Columbus
None

# This is KEY!

You can also use a for loop on a dictionary to loop through its keys with the following:

# A simple dictionary
d = {"foo" : "bar"}

for key in d: 
    print d[key]  # prints "bar" 

Note that dictionaries are unordered, meaning that any time you loop through a dictionary, you will go through every key, but you are not guaranteed to get them in any particular order.
Instructions

Use a for loop to go through the webster dictionary and print out all of the definitions.

webster = {
    "Aardvark" : "A star of a popular children's cartoon show.",
    "Baa" : "The sound a goat makes.",
    "Carpet": "Goes on the floor.",
    "Dab": "A small amount."
}

# Add your code below!
ter = {
    "Aardvark" : "A star of a popular children's cartoon show.",
    "Baa" : "The sound a goat makes.",
    "Carpet": "Goes on the floor.",
    "Dab": "A small amount."
}

# Add your code below!
for x in webster:
    print webster[x]

A star of a popular children's cartoon show.
Goes on the floor.
A small amount.
The sound a goat makes.
None


#Control Flow and Looping

The blocks of code in a for loop can be as big or as small as they need to be.

While looping, you may want to perform different actions depending on the particular item in the list.

numbers = [1, 3, 4, 7]
for number in numbers: 
    if number > 6:
        print number
print "We printed 7."

    In the above example, we create a list with 4 numbers in it.
    Then we loop through the numbers list and store each item in the list in the variable number.
    On each loop, if number is greater than 6, we print it out. So, we print 7.
    Finally, we print out a sentence.

Make sure to keep track of your indentation or you may get confused!
Instructions

    Like step 2 above, loop through each item in the list called a.
    Like step 3 above, if the number is even, print it out. You can test if the item % 2 == 0 to help you out.

a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
for even in a:
    if even % 2 == 0:
        print(even)

0
2
4
6
8
10
12
None

# Lists + Functions

Functions can also take lists as inputs and perform various operations on those lists.

def count_small(numbers):
    total = 0
    for n in numbers:
        if n < 10:
            total = total + 1
    return total

lost = [4, 8, 15, 16, 23, 42]
small = count_small(lost)
print small

    In the above example, we define a function count_small that has one argument, numbers.
    We initialize a variable total that we can use in the for loop.
    For each item n in numbers, if n is less than 10, we increment total.
    After the for loop, we return total.
    After the function definition, we create an array of numbers called lost.
    We call the count_small function, pass in lost, and store the returned result in small.
    Finally, we print out the returned result, which is 2 since only 4 and 8 are less than 10.

Instructions

Write a function that counts how many times the string "fizz" appears in a list.

    Write a function called fizz_count that takes a list x as input.
    Create a variable count to hold the ongoing count. Initialize it to zero.
    for each item in x:, if that item is equal to the string "fizz" then increment the count variable.
    After the loop, please return the count variable.

For example, fizz_count(["fizz","cat","fizz"]) should return 2. 

# Write your function below!
def fizz_count(x):
    count = 0
    for item in x:
        if item == "fizz":
            count = count + 1
    return count
x = [ "fizz" , "lapin" , "tutu" , "fizz", "fizz" , "fizz" ]
ok = fizz_count(x)
print(ok)

4
None

#  String Looping

As we've mentioned, strings are like lists with characters as elements. You can loop through strings the same way you loop through lists! While we won't ask you to do that in this section, we've put an example in the editor of how looping through a string might work.
Instructions

Run the code to see string iteration in action!

for letter in "Codecademy":
    print letter
    
# Empty lines to make the output pretty
print
print

word = "Programming is fun!"

for letter in word:
    # Only print out the letter i
    if letter == "i":
        print letter

C
o
d
e
c
a
d
e
m
y


i
i
None


# Your Own Store!

Okay—on to the core of our project.

Congratulations! You are now the proud owner of your very own Codecademy brand supermarket.

animal_counts = {
    "ant": 3,
    "bear": 6,
    "crow": 2
}

In the example above, we create a new dictionary called animal_counts with three entries. One of the entries has the key "ant" and the value 3.
Instructions

    Create a new dictionary called prices using {} format like the example above.
    Put these values in your prices dictionary, in between the {}:

"banana": 4,
"apple": 2,
"orange": 1.5,
"pear": 3

Yeah, this place is really expensive. (Your supermarket subsidizes the zoo from the last course.)
prices = { 
    "banana": 4, 
    "apple": 2,
    "orange": 1.5, 
    "pear": 3
}

None

#
Investing in Stock

Good work! As a store manager, you’re also in charge of keeping track of your stock/inventory.
Instructions

Create a stock dictionary with the values below.

"banana": 6
"apple": 0
"orange": 32
"pear": 15

prices = { 
    "banana": 4, 
    "apple": 2,
    "orange": 1.5, 
    "pear": 3
}

stock = { 
    "banana": 6, 
    "apple": 0,
    "orange": 32, 
    "pear": 15
}

# 
Keeping Track of the Produce

Now that you have all of your product info, you should print out all of your inventory information.

once  = {'a': 1, 'b': 2}
twice = {'a': 2, 'b': 4}
for key in once:
    print "Once: %s" % once[key]
    print "Twice: %s" % twice[key]

    In the above example, we create two dictionaries, once and twice, that have the same keys.
    Because we know that they have the same keys, we can loop through one dictionary and print values from both once and twice.

Instructions

    Loop through each key in prices.
    Like the example above, for each key, print out the key along with its price and stock information. Print the answer in the following format:

apple
price: 2
stock: 0

Like the example above, because you know that the prices and stock dictionary have the same keys, you can access the stock dictionary while you are looping through prices.

When you're printing, you can use the syntax from the example above.
prices = { 
    "banana": 4, 
    "apple": 2,
    "orange": 1.5, 
    "pear": 3
}

stock = { 
    "banana": 6, 
    "apple": 0,
    "orange": 32, 
    "pear": 15
}

for fruit in prices:
    print fruit
    print "price: %s" % prices[fruit]
    print "stock: %s" % stock[fruit]

orange
price: 1.5
stock: 32
pear
price: 3
stock: 15
banana
price: 4
stock: 6
apple
price: 2
stock: 0
None

# 
Something of Value

For paperwork and accounting purposes, let's record the total value of your inventory. It's nice to know what we're worth!
Instructions

Let's determine how much money you would make if you sold all of your food.

    Create a variable called total and set it to zero.
    Loop through the prices dictionaries.
    For each key in prices, multiply the number in prices by the number in stock. Print that value into the console and then add it to total.
    Finally, outside your loop, print total.


prices = {
    "banana" : 4,
    "apple"  : 2,
    "orange" : 1.5,
    "pear"   : 3,
}
stock = {
    "banana" : 6,
    "apple"  : 0,
    "orange" : 32,
    "pear"   : 15,
}

for key in prices:
    print key
    print "price: %s" % prices[key]
    print "stock: %s" % stock[key]
    
total = 0
for key in prices:
    count = prices[key] * stock[key]
    print count
    total = total + count
    
print total

orange
price: 1.5
stock: 32
pear
price: 3
stock: 15
banana
price: 4
stock: 6
apple
price: 2
stock: 0
48.0
45
24
0
117.0
None

# 
Shopping at the Market

Great work! Now we're going to take a step back from the management side and take a look through the eyes of the shopper.

In order for customers to order online, we are going to have to make a consumer interface. Don't worry: it's easier than it sounds!
Instructions

First, make a list called groceries with the values "banana","orange", and "apple".

groceries = ["banana", "orange", "apple"]


Making a Purchase

Good! Now you're going to need to know how much you’re paying for all of the items on your grocery list.

def sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total
n = [1, 2, 5, 10, 13]
print sum(n)

    In the above example, we first define a function called sum with an argument numbers.
    We initialize the variable total that we will use as our running sum.
    For each number in the list, we add that number to the running sum total.
    At the end of the function, we return the running sum.
    After the function, we create, n, a list of numbers.
    Finally, we call the sum(numbers) function with the variable n and print the result.

Instructions

    Define a function compute_bill that takes one argument food as input.
    In the function, create a variable total with an initial value of zero.
    For each item in the food list, add the price of that item to total.
    Finally, return the total.

Ignore whether or not the item you're billing for is in stock.

Note that your function should work for any food list.

shopping_list = ["banana", "orange", "apple"]

stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}
    
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

# Write your code below!
def compute_bill(food):
    total = 0
    for item in food:
        print item
        total = total + prices[item]
    return total


# Stocking Out

Now you need your compute_bill function to take the stock/inventory of a particular item into account when computing the cost.

Ultimately, if an item isn't in stock, then it shouldn't be included in the total. You can't buy or sell what you don't have!
Instructions

Make the following changes to your compute_bill function:

    While you loop through each item of food, only add the price of the item to total if the item's stock count is greater than zero.
    If the item is in stock and after you add the price to the total, subtract one from the item's stock count.

   

shopping_list = ["banana", "orange", "apple"]

stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}
    
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

# Write your code below!

def compute_bill(shopping_list):
    total = 0
    for item in shopping_list:
        if stock[item] > 0:
            stock[item] -= 1
            print item
            total += prices[item]
    return total

#  Let's Check Out!
Perfect! You've done a great job with lists and dictionaries in this project. You've practiced:

    Using for loops with lists and dictionaries
    Writing functions with loops, lists, and dictionaries
    Updating data in response to changes in the environment (for instance, decreasing the number of bananas in stock by 1 when you sell one).

Thanks for shopping at the Codecademy supermarket!
Instructions

Click Save & Submit Code to finish this course.
shopping_list = ["banana", "orange", "apple"]

stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}
    
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

# Write your code below!

def compute_bill(shopping_list):
    total = 0
    for item in shopping_list:
        if stock[item] > 0:
            stock[item] -= 1
            print item
            total += prices[item]
    return total


# Lesson Number One

Welcome to this "Challenge Course". Until now we've been leading you by the hand and working on some short and relatively easy projects. This is a challenge so be ready. We have faith in you!

We’re going to switch it up a bit and allow you to be the teacher of your own class. Make a gradebook for all of your students.

animal_sounds = {
    "cat": ["meow", "purr"],
    "dog": ["woof", "bark"],
    "fox": [],
}
print animal_sounds["cat"]

The example above is just to remind you how to create a dictionary and then to access the item stored by the "cat" key.
Instructions

    Create three dictionaries: lloyd, alice, and tyler.
    Give each dictionary the keys "name", "homework", "quizzes", and "tests".
    Have the "name" key be the name of the student (that is, lloyd's name should be "Lloyd") and the other keys should be an empty list. (We'll fill in these lists soon!)


lloyd = { "name" : "Lloyd" , 
          "homework" : [],
          "quizzes" : [],
          "tests" : []
        }
alice = { "name" : "Alice", 
          "homework" : [],
          "quizzes" : [],
          "tests" : []
    }
tyler = { "name" : "Tyler",
          "homework" : [],
          "quizzes" : [],
          "tests" : []
    }

# What's the Score?

Great work!
Instructions

Now fill out your lloyd dictionary with the appropriate scores. To save you some time, we've filled out the rest for you.

Homework: 90.0, 97.0, 75.0, 92.0
Quizzes: 88.0, 40.0, 94.0
Test Scores: 75.0, 90.0

Make sure to include the decimal points so your grades are stored as floats! This will be important later.

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [ 88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]

# Put It Together

Now lets put the three dictionaries in a list together.

my_list = [1, 2, 3]

The above example is just a reminder on how to create a list. Afterwards, my_list contains 1, 2, and 3.
Instructions

Below your code, create a list called students that contains lloyd, alice, and tyler.


lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [ 88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

students = [ lloyd, alice, tyler ]


#  
For the Record

Excellent. Now you need a hard copy document with all of your students' grades.

animal_sounds = {
    "cat": ["meow", "purr"],
    "dog": ["woof", "bark"],
    "fox": [],
}
print animal_sounds["cat"]

The example above is just to remind you how to create a dictionary and then to access the item stored by the "cat" key.
Instructions

for each student in your students list, print out that student's data, as follows:

    print the student's name
    print the student's homework
    print the student's quizzes
    print the student's tests

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [ 88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

students = [ lloyd, alice, tyler ]

for student in students:
    print student["name"]
    print student["homework"]
    print student["quizzes"]
    print student["tests"]

Lloyd
[90.0, 97.0, 75.0, 92.0]
[88.0, 40.0, 94.0]
[75.0, 90.0]
Alice
[100.0, 92.0, 98.0, 100.0]
[82.0, 83.0, 91.0]
[89.0, 97.0]
Tyler
[0.0, 87.0, 75.0, 22.0]
[0.0, 75.0, 78.0]
[100.0, 100.0]
None

# It's Okay to be Average

When teaching a class, it's important to take the students' averages in order to assign grades.

5 / 2
# 2

5.0 / 2
# 2.5

float(5) / 2
# 2.5

The above example is a reminder of how division works in Python.

    When you divide an integer by another integer, the result is always an integer (rounded down, if needed).
    When you divide a float by an integer, the result is always a float.
    To divide two integers and end up with a float, you must first use float() to convert one of the integers to a float.

Instructions

Write a function average that takes a list of numbers and returns the average.

    Define a function called average that has one argument, numbers.
    Inside that function, call the built-in sum() function with the numbers list as a parameter. Store the result in a variable called total.
    Like the example above, use float() to convert total and store the result in total.
    Divide total by the length of the numbers list. Use the built-in len() function to calculate that.
    Return that result.

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

# Add your function below!
def average(numbers):
    total = float(sum(numbers))
    result = total / len(numbers)
    return result

# Just Weight and See

Great! Now we need to compute a student’s average using weighted averages.

cost = {
    "apples": [3.5, 2.4, 2.3],
    "bananas": [1.2, 1.8],
}

return 0.9 * average(cost["apples"]) + \
0.1 * average(cost["bananas"])

    In the above example, we create a dictionary called cost that contains the costs of some fruit.
    Then, we calculate the average cost of apples and the average cost of bananas. Since we like apples much more than we like bananas, we weight the average cost of apples by 90% and the average cost of bananas by 10%.

The \ character is a continuation character. The following line is considered a continuation of the current line.
Instructions

Write a function called get_average that takes a student dictionary (like lloyd, alice, or tyler) as input and returns his/her weighted average.

    Define a function called get_average that takes one argument called student.
    Make a variable homework that stores the average() of student["homework"].
    Repeat step 2 for "quizzes" and "tests".
    Multiply the 3 averages by their weights and return the sum of those three. Homework is 10%, quizzes are 30% and tests are 60%.

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

# Add your function below!
def average(numbers):
    total = float(sum(numbers))
    result = total / len(numbers)
    return result
    
def get_average(student):
    homework = average(student["homework"]) * 0.1
    quizzes = average(student["quizzes"]) * 0.3
    tests = average(student["tests"]) * 0.6

    return homework + quizzes + tests
# 
Sending a Letter

Great work!

Now let's write a get_letter_grade function that takes a number score as input and returns a string with the letter grade that that student should receive.
Instructions

    Define a new function called get_letter_grade that has one argument called score. Expect score to be a number.

    Inside your function, test score using a chain of if: / elif: / else: statements, like so:

    If score is 90 or above: return "A"
    Else if score is 80 or above: return "B"
    Else if score is 70 or above: return "C"
    Else if score is 60 or above: return "D"
    Otherwise: return "F"

    Finally, test your function! Call your get_letter_grade function with the result of get_average(lloyd). Print the resulting letter grade.

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

# Add your function below!
def average(numbers):
    total = float(sum(numbers))
    result = total / len(numbers)
    return result
    
def get_average(student):
    homework = average(student["homework"]) * 0.1
    quizzes = average(student["quizzes"]) * 0.3
    tests = average(student["tests"]) * 0.6

    return homework + quizzes + tests
    
def get_letter_grade(score):
    
    if score >= 90:
        return "A"
        print "A"
    elif score >= 80:
        return "B"
        print "B"
    elif score >= 70:
        return "C"
        print "C"
    elif score >= 60:
        return "D"
        print "D"
    else :
        return "F"
        print "F"

get_letter_grade(get_average(lloyd))
print(get_letter_grade(get_average(lloyd)))

B 
None

# Part of the Whole

Good! Now let's calculate the class average.

You need to get the average for each student and then calculate the average of those averages.
Instructions

    Define a function called get_class_average that has one argument students. You can expect students to be a list containing your three students.
    First, make an empty list called results.
    For each student item in the class list, calculate get_average(student) and then call results.append() with that result.
    Finally, return the result of calling average() with results.

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

# Add your function below!
def average(numbers):
    total = float(sum(numbers))
    result = total / len(numbers)
    return result
    
def get_average(student):
    homework = average(student["homework"]) * 0.1
    quizzes = average(student["quizzes"]) * 0.3
    tests = average(student["tests"]) * 0.6

    return homework + quizzes + tests
    
def get_letter_grade(score):
    
    if score >= 90:
        return "A"
        print "A"
    elif score >= 80:
        return "B"
        print "B"
    elif score >= 70:
        return "C"
        print "C"
    elif score >= 60:
        return "D"
        print "D"
    else :
        return "F"
        print "F"

get_letter_grade(get_average(lloyd))
#print(get_letter_grade(get_average(lloyd)))

students = [lloyd, alice, tyler]
def get_class_average(students):
    results=[]
    for student in students:
        get_average(student)
        print(get_average(student))
        results.append(get_average(student))
    print results    
    return average(results)

None

# How is Everybody Doing?

Awesome! You're doing great.
Instructions

    Finally, print out the result of calling get_class_average with your students list. Your students should be [lloyd, alice, tyler].
    Then, print the result of get_letter_grade for the class's average.

lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}

# Add your function below!
def average(numbers):
    total = float(sum(numbers))
    result = total / len(numbers)
    return result
    
def get_average(student):
    homework = average(student["homework"]) * 0.1
    quizzes = average(student["quizzes"]) * 0.3
    tests = average(student["tests"]) * 0.6

    return homework + quizzes + tests
    
def get_letter_grade(score):
    
    if score >= 90:
        return "A"
        print "A"
    elif score >= 80:
        return "B"
        print "B"
    elif score >= 70:
        return "C"
        print "C"
    elif score >= 60:
        return "D"
        print "D"
    else :
        return "F"
        print "F"

get_letter_grade(get_average(lloyd))
#print(get_letter_grade(get_average(lloyd)))

students = [lloyd, alice, tyler]
def get_class_average(students):
    results=[]
    for student in students:
        get_average(student)
        print(get_average(student))
        results.append(get_average(student))
    print results    
    return average(results)
    
print get_class_average(students)
print get_letter_grade(get_class_average(students))

80.55
91.15
79.9
[80.55, 91.14999999999999, 79.9]
83.8666666667
80.55
91.15
79.9
[80.55, 91.14999999999999, 79.9]
B
None


## List accessing :

List accessing

This exercise goes over just pulling information from a list, which we've covered in a previous section!
Instructions

Please add the code to print out the second element in the list.

n = [1, 3, 5]

# Add your code below
print(n[1])



# List element modification

You've already learned how to modify elements of a list in a previous section. This exercise is just a recap of that!
Instructions

    On line 3, multiply the second element of the n list by 5
    Overwrite the second element with that result.

Make sure to print the list when you are done!
 
n = [1, 3, 5]
# Do your multiplication here
n[1] = n[1] * 5
print n

[1, 15, 5]
None 


# Appending to a list

Here, we'll quickly recap how to .append() elements to the end of a list.
Instructions

Append the number 4 to the end of the list n.

n = [1, 3, 5]
# Append the number 4 here
n.append(4)
print n

[1, 3, 5, 4]
None

# Removing elements from lists

This exercise will expand on ways to remove items from a list. You actually have a few options. For a list called n:

    n.pop(index) will remove the item at index from the list and return it to you:

n = [1, 3, 5]
n.pop(1)
# Returns 3 (the item at index 1)
print n
# prints [1, 5]

    n.remove(item) will remove the actual item if it finds it:

n.remove(1)
# Removes 1 from the list,
# NOT the item at index 1
print n
# prints [3, 5]

    del(n[1]) is like .pop in that it will remove the item at the given index, but it won't return it:

del(n[1])
# Doesn't return anything
print n
# prints [1, 5]

Instructions

Remove the first item from the list n using either .pop(), .remove(), or del.

n = [1, 3, 5]
# Remove the first item in the list here
n.pop(0)  OU del(n[0]) OU n.remove(1) 
print n

[3, 5]
None


#  Changing the functionality of a function

In this exercise, you will just be making a minor change to a function to change what that function does.
Instructions

Change the function so the given argument is multiplied by 3 and returned.

number = 5

def my_function(x):
    return x * 3

print my_function(number)


15
None

# More than one argument

This exercise is to recap how to use more than one argument in a function.
Instructions

Define a function called add_function that has 2 parameters x and y and adds them together.

m = 5
n = 13
# Add add_function here!

def add_function(x,y):
    x + y
    return x + y
print add_function(m, n)

18
None

#  Strings in functions

This is a basic recap on using strings in functions.
Instructions

Write a function called string_function that takes in a string argument (s) and then returns that argument concatenated with the word 'world'. Don't add a space before world!

n = "Hello"
# Your function here!
def string_function(s):
    s = str(s)
    return s + 'world' 

print string_function(n)

Helloworld
None


# Passing a list to a function

You pass a list to a function the same way you pass any other argument to a function.
Instructions

Click Save & Submit Code to see that using a list as an argument in a function is essentially the same as using just a number or string!

def list_function(x):
    return x

n = [3, 5, 7]
print list_function(n)
[3, 5, 7]
None

# Using an element from a list in a function

Passing a list to a function will store it in the argument (just like with a string or a number!)

def first_item(items):
    print items[0]

numbers = [2, 7, 9]
first_item(numbers)

    In the example above, we define a function called first_item. It has one argument called items.
    Inside the function, we print out the item stored at index zero of items.
    After the function, we create a new list called numbers.
    Finally, we call the first_item function with numbers as its argument, which prints out 2.

Instructions

Change line 2 so that list_function returns only the item stored in index one of x, rather than the entire x list.
 

def list_function(x):
    return x[1]

n = [3, 5, 7]
print list_function(n)

5
None

# Modifying an element of a list in a function

Modifying an element in a list in a function is the same as if you were just modifying an element of a list outside a function.

def double_first(n):
    n[0] = n[0] * 2

numbers = [1, 2, 3, 4]
double_first(numbers)
print numbers

    We create a list called numbers.
    We use the double_first function to modify that list.
    Finally, we print out [2, 2, 3, 4]

When we pass a list to a function and modify that list, like in the double_first function above, we end up modifying the original list.
Instructions

Change list_function so that:

    Add 3 to the item at index one of the list.
    Store the result back into index one.
    Return the list.

def list_function(x):
    x[1] = x[1] + 3
    return x

n = [3, 5, 7]
print list_function(n)

[3, 8, 7]
None

#  List manipulation in functions

You can also append or delete items of a list inside a function just as if you were manipulating the list outside a function.

my_list = [1, 2, 3]
my_list.append(4)
print my_list
# prints [1, 2, 3, 4]

The example above is just a reminder of how to append items to a list.
Instructions

    Define a function called list_extender that has one parameter lst.
    Inside the function, append the number 9 to lst.
    Then return the modified list.

n = [3, 5, 7]
# Add your function here
def list_extender(lst):
    lst.append(9)
    return lst

print list_extender(n)

[3, 5, 7, 9]
None


#  Printing out a list item by item in a function

This exercise is to go over how to utilize every element in a list in a function. You can use the existing code to complete the exercise and see how running this operation inside a function isn't much different from running this operation outside a function.

Don't worry about the range function quite yet—we'll explain it later in this section.
Instructions

    Define a function called print_list that has one argument called x.
    Inside that function, print out each element one by one. Use the existing code as a scaffold.
    Then call your function with the argument n.

n = [3, 5, 7]
def print_list(x):
    for i in range(0, len(x)):
        print x[i]
print_list(n)

3
5
7
None

# Modifying each element in a list in a function

This exercise shows how to modify each element in a list. It is useful to do so in a function as you can easily put in a list of any length and get the same functionality. As you can see, len(n) is the length of the list.
Instructions

Create a function called double_list that takes a single argument x (which will be a list) and multiplies each element by 2 and returns that list. Use the existing code as a scaffold.

n = [3, 5, 7]
def double_list(x):
    for i in range(0, len(x)):
        x[i] = x[i] * 2
# Don't forget to return your new list!
    return x

print double_list(n)

[6,10,14]
None

#  Passing a range into a function

Okay! Range time. The Python range() function is just a shortcut for generating a list, so you can use ranges in all the same places you can use lists.

range(6) # => [0,1,2,3,4,5]
range(1,6) # => [1,2,3,4,5]
range(1,6,3) # => [1,4]

The range function has three different versions:

    range(stop)
    range(start, stop)
    range(start, stop, step)

In all cases, the range() function returns a list of numbers from start up to (but not including) stop. Each item increases by step.

If omitted, start defaults to zero and step defaults to one.
Instructions

On line 6, replace the ____ with a range() that returns a list containing [0, 1, 2].

def my_function(x):
    for i in range(0, len(x)):
        x[i] = x[i] * 2
    return x

print my_function(range(0,3)) # Add your range between the parentheses!

[0, 2, 4]
None





#  Using strings in lists in functions

Now let's try working with strings!

for item in list:
    print item

for i in range(len(list)):
    print list[i]

The example above is just a reminder of the two methods for iterating over a list.
Instructions

Create a function that concatenates strings.

    Define a function called join_strings accepts an argument called words. It will be a list.
    Inside the function, create a variable called result and set it to "", an empty string.
    Iterate through the words list and append each word to result.
    Finally, return the result.

Don't add spaces between the joined strings!

n = ["Michael", "Lieberman"]
# Add your function here
def join_strings(words):
    result = ""
    for i in words:
        result = result + i
    return result

print join_strings(n)

# Using two lists as two arguments in a function

Using multiple lists in a function is no different from just using multiple arguments in a function!

a = [1, 2, 3]
b = [4, 5, 6]
print a + b
# prints [1, 2, 3, 4, 5, 6]

The example above is just a reminder of how to concatenate two lists.
Instructions

Create a function that joins two lists together.

    On line 4, define a function called join_lists that has two arguments, x and y. They will both be lists.
    Inside that function, return the result of concatenating x and y together.

m = [1, 2, 3]
n = [4, 5, 6]

# Add your code here!
def join_lists(x,y):
    return x + y

print join_lists(m, n)
# You want this to print [1, 2, 3, 4, 5, 6]


Using a list of lists in a function

Finally, this exercise shows how to make use of a single list that contains multiple lists and how to use them in a function.

list_of_lists = [[1,2,3], [4,5,6]]

for lst in list_of_lists:
    for item in lst:
        print item

    In the example above, we first create a list containing two items, each of which is a list of numbers.
    Then, we iterate through our outer list.
    For each of the two inner lists (as lst), we iterate through the numbers (as item) and print them out.

We end up printing out:

1
2
3
4
5
6

Instructions

Create a function called flatten that takes a single list and concatenates all the sublists that are part of it into a single list.

    On line 3, define a function called flatten with one argument called lists.
    Make a new, empty list called results.
    Iterate through lists. Call the looping variable numbers.
    Iterate through numbers.
    For each number, .append() it to results.
    Finally, return results from your function.


n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here
def flatten(lists):
    results = []
    for num in lists:
        for i in num:
            results.append(i)
    return results

print flatten(n)

[1, 2, 3, 4, 5, 6, 7, 8, 9]
None


### battleship :

Welcome to Battleship!

In this project you will build a simplified, one-player version of the classic board game Battleship! In this version of the game, there will be a single ship hidden in a random location on a 5x5 grid. The player will have 10 guesses to try to sink the ship.

To build this game we will use our knowledge of lists, conditionals and functions in Python. When you're ready to get started, click run to continue.
Instructions

Click Save & Submit Code to get started with Battleship


# Getting Our Feet Wet
The first thing we need to do is to set up the game board.
Instructions
Create a variable board and set it equal to an empty list.

board = []

# Make a List
Good! Now we'll use a built-in Python function to generate our board, which we'll make into a 5 x 5 grid of all "O"s, for "ocean."
print ["O"] * 5
will print out ['O', 'O', 'O', 'O', 'O'], which is the basis for a row of our board.
We'll do this five times to make five rows. (Since we have to do this five times, it sounds like a loop might be in order.)
Instructions
Create a 5 x 5 grid initialized to all 'O's and store it in board.
    Use range() to loop 5 times.
    Inside the loop, .append() a list containing 5 "O"s to board, just like in the example above.

Note that these are capital letter "O" and not zeros.

board = []
for i in range(5):
    row = ["O"] * 5
    board.append(row)


#Check it Twice
Great job! Now that we've built our board, let's show it off.

Throughout our game, we'll want to print the game board so that the player can see which locations they have already guessed. Regularly printing the board will also help us debug our program.
The easiest way to print the board would be to have Python display it for us using the print command. Let's give that a try and see what the results look like—is this a useful way to print our board for Battleship?
Instructions

Use the print command to display the contents of the board list.
board = []
for i in range(5):
    row = ["O","O","O","O","O"]
    board.append(row)
print board

[['O', 'O', 'O', 'O', 'O'], ['O', 'O', 'O', 'O', 'O'], ['O', 'O', 'O', 'O', 'O'], ['O', 'O', 'O', 'O', 'O'], ['O', 'O', 'O', 'O', 'O']]
None 


# Custom Print

Now we can see the contents of our list, but clearly it would be easier to play the game if we could print the board out like a grid with each row on its own line.

We can use the fact that our board is a list of lists to help us do this. Let's set up a for loop to go through each of the elements in the outer list (each of which is a row of our board) and print them.
Instructions

    First, delete your existing print statement.
    Then, define a function named print_board with a single argument, board.
    Inside the function, write a for loop to iterates through each row in board and print it to the screen.
    Call your function with board to make sure it works.

board = []
for i in range(5):
    row = ["O"] * 5
    board.append(row)
def print_board(board):
    for row in board:
        print row
print_board(board)

['O', 'O', 'O', 'O', 'O']
['O', 'O', 'O', 'O', 'O']
['O', 'O', 'O', 'O', 'O']
['O', 'O', 'O', 'O', 'O']
['O', 'O', 'O', 'O', 'O']
None 


# Printing Pretty

We're getting pretty close to a playable board, but wouldn't it be nice to get rid of those quote marks and commas? We're storing our data as a list, but the player doesn't need to know that!

letters = ['a', 'b', 'c', 'd']
print " ".join(letters)
print "---".join(letters)

    In the example above, we create a list called letters.
    Then, we print a b c d. The .join method uses the string to combine the items in the list.
    Finally, we print a---b---c---d. We are calling the .join function on the "---" string.

We want to turn each row into "O O O O O".
Instructions

Inside your function, inside your for loop, use " " as the separator to .join the elements of each row.
board = []
for i in range(5):
    row = ["O"] * 5
    board.append(row)
def print_board(board):
    for row in board:
        print " ".join(row)
print_board(board)

O O O O O
O O O O O
O O O O O
O O O O O
O O O O O
None

#Hide...

Excellent! Now, let's hide our battleship in a random location on the board.

Since we have a 2-dimensional list, we'll use two variables to store the ship's location, ship_row and ship_col.

from random import randint
coin = randint(0, 1)
dice = randint(1, 6)

    In the above example, we first import the randint(low, high) function from the random module.
    Then, we generate either zero or one and store it in coin.
    Finally, we generate a number from one to six inclusive.

Let's generate a random_row and random_col from zero to four!
Instructions

    Define two new functions, random_row and random_col, that each take board as input.
    These functions should return a random row index and a random column index from your board, respectively. Use randint(0, len(board) - 1).
    Call each function on board.


