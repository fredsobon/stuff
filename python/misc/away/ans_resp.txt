-day1

# -*- coding: utf-8 -*-
"""Exercice : Utilisation des boucles Suivez les énoncés en commentaires.

Pour exécuter cet exercice à la console, passez l'une des commandes :

- python -m unittest tests
- python tests.py

Pour lancer les tests à travers Pycharm :

- Clic droit sur le ficher "tests.py" de ce répertoire dans le panneau "Project"
- Activez "Run 'Unittest in tests'" ou "Debug 'Unittest in tests'"
"""

# --------
# Boucle 1
# --------
# Faites une boucle affichant les nombres entiers de 0 à 10 en remplaçant
# l'objet "bouclage"
# Utilisez "xrange" : http://docs.python.org/library/functions.html#xrange

bouclage = xrange(11)
results1 = []

for valeur in bouclage:
    results1.append(valeur)

# assert results1 == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# --------
# Boucle 2
# --------
# Faites une boucle affichant les nombres entiers de 1 à 10 en remplaçant
# l'objet "bouclage"
# Utilisez "xrange" : http://docs.python.org/library/functions.html#xrange

bouclage = xrange(1, 11)
results2 = []

for valeur in bouclage:
    results2.append(valeur)

# assert results2 == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# --------
# Boucle 3
# --------
# Une boucle générique de 'debut' à 'fin' (inclus) par pas de 'step'
# Utilisez "xrange" : http://docs.python.org/library/functions.html#xrange

debut = 10
fin = 80
step = 10
results3 = []
bouclage = xrange(debut, fin + step, step)
for valeur in bouclage:
    results3.append(valeur)

# assert results3 == [10, 20, 30, 40, 50, 60, 70, 80]

# --------
# Boucle 4
# --------
# Variante de la précédente, 'debut' peut être supérieur à 'fin', on doit alors
# boucler de 'fin' à 'debut'.
# Utilisez "xrange" : http://docs.python.org/library/functions.html#xrange

debut, fin, step = 70, 30, 10
if debut > fin:
    debut, fin = fin, debut
bouclage = xrange(debut, fin + step, step)
results4 = []

for valeur in bouclage:
    results4.append(valeur)

# assert results4 == [30, 40, 50, 60, 70]

# --------
# Boucle 5
# --------
# En utilisant une boucle 'while', afficher les valeurs de 1 à 20

fin = 20
valeur = 0
results5 = []

while valeur < fin:
    valeur += 1
    results5.append(valeur)

# assert results5 == range(1, 21)  # [1, 2, ..., 20]
Frédéric Sobon <frederic.sobon@gmail.com>
	
18:16 (Il y a 2 heures)
		
À moi
# -*- coding: utf-8 -*-
"""\
Exercice sur les objets multivalués
===================================

L'objet "superette" représente le catalogue d'articles dans un supermarché.
Nous supposons pour simplifier que celui-ci a un stock infini.  Cet objet est
représenté sous la forme d'un dictionnaire structuré de la façon suivante :

- la clé est l'intitulé unique d'un article. Par exemple, "savonette"
- la valeur est le cout client de l'article. Par exemple, 1.5

L'objet"caddy" est un dictionnaire représentant un caddy de supermarché. Il est
structuré de la façon suivante :

- la clé est le nom d'un des articles se trouvant également dans "superette"
- la valeur est le nombre d'unités de cet article se trouvant dans le caddy.

Notez que tout article dans le caddy ne figurant pas dans l'inventaire de la
superette est supposé gratuit.

Suivez les instructions en commentaires et insérez les ajouts nécessaires à la
suite des lignes "# VOTRE CODE ICI". Et il est bien entendu interdit de
supprimer les lignes commençant par "assert"
"""
import sys

superette = {
    'savonette': 1.0,
    'beurre': 2.5,
    'saucisson': 3.6,
    'lessive': 4.2
    }

caddy = {
    'savonette': 2
    }

# On ajoute au stock de la superette la "baguette" à 0.80 l'unité ainsi que l'
# "essuie-tout" à 2.1 le paquet.

# VOTRE CODE ICI
superette['baguette'] = 0.8
superette['essuie-tout'] = 2.1

assert len(superette) == 6  # Nombre d'articles distincts disponibles
assert set(('baguette', 'essuie-tout')) < set(superette.iterkeys())  #
On a bien les nouveaux

# On ajoute au panier 3 'beurre', 2 'saucisson', 1 'lessive', 2 'baguette', et 2
# 'chocolat'. Notez que la superette n'a pas de 'chocolat', il est donc gratuit.

# VOTRE CODE ICI
caddy['beurre'] = 3
caddy['saucisson'] = 2
caddy['lessive'] = 1
caddy['baguette'] = 2
caddy['chocolat'] = 2

assert len(caddy) == 6  # Articles distincts dans le caddy
assert sum(caddy.itervalues()) == 12  # Nombre total d'articles

# Quel est l'article unitaire le plus cher de la superette ? Placez son nom
# dans la variable "plus_cher".
# A savoir : "sys.float_info.max" est le plus grand positif flottant possibe

# VOTRE CODE ICI
prix_maxi = -sys.float_info.max
for article, prix in superette.iteritems():
    if prix > prix_maxi:
        prix_maxi = prix
        plus_cher = article

assert plus_cher == 'lessive'

# Quel est l'article unitaire le moins cher du caddy ? Placez son nom dans la
# variable "moins_cher". Attention, seuls les articles dans le stock de la
# superette comptent. Vous en profitez pour calculer le nombre total d'articles
# tenant compte de la quantité individuelle - non facturables dans la variable
# "non_facturables".

# VOTRE CODE ICI
non_facturables = 0
prix_mini = sys.float_info.max
for article, qte in caddy.iteritems():
    if article not in superette:
        non_facturables += qte
        continue
    prix = superette[article]
    if prix < prix_mini:
        prix_mini = prix
        moins_cher = article

assert moins_cher == 'baguette'
assert non_facturables == 2

# Quels sont les articles du caddy facturables ? placer ceux-ci dans l'ensemble
# "noms_facturables".

# VOTRE CODE ICI
noms_facturables = set(caddy) & set(superette)

assert noms_facturables == set(['lessive', 'baguette', 'beurre',
                                'savonette', 'saucisson'])

# Et pour finir, quel est le prix total du caddy ? Vous pouvez réutiliser
# "noms_facturables" calculé ci-avant pour obtenir le montant "total_caddy".

# VOTRE CODE ICI
total_caddy = 0.0
for nom in noms_facturables:
    total_caddy += caddy[nom] * superette[nom]

# En une seule ligne en utilisant les listes par intention :
# total_caddy = sum([caddy[nom] * superette[nom] for nom in noms_facturables])

assert total_caddy == 22.5


---
-day2

