====== notes principe fonctionnement tomcat ====

http://blog.paumard.org/cours/servlet/chap02-presentation-tomcat.html

== Organisation des répertoires de Tomcat ==

L'installation de Tomcat est la même que l'on soit sous Windows ou Linux. Il suffit de télécharger le fichier archive (au format zip ou tar.gz) et de l'ouvrir dans un répertoire.

￼Organisation des répertoires de Tomcat : 

ot@31435920c3ee apache-tomcat-9.0.14]# ll
total 144
-rw-r----- 1 root root 19203 Dec  6 21:17 BUILDING.txt
-rw-r----- 1 root root  6095 Dec  6 21:17 CONTRIBUTING.md
-rw-r----- 1 root root 57092 Dec  6 21:17 LICENSE
-rw-r----- 1 root root  2333 Dec  6 21:17 NOTICE
-rw-r----- 1 root root  3255 Dec  6 21:17 README.md
-rw-r----- 1 root root  6854 Dec  6 21:17 RELEASE-NOTES
-rw-r----- 1 root root 16262 Dec  6 21:17 RUNNING.txt
drwxr-x--- 2 root root  4096 Jan 19 07:02 bin
drwx------ 2 root root  4096 Dec  6 21:17 conf
drwxr-x--- 2 root root  4096 Jan 19 07:02 lib
drwxr-x--- 2 root root  4096 Dec  6 21:14 logs
drwxr-x--- 2 root root  4096 Jan 19 07:02 temp
drwxr-x--- 7 root root  4096 Dec  6 21:15 webapps
drwxr-x--- 2 root root  4096 Dec  6 21:14 work


detail des répertoires de l'arbo tomcat décompressé :  

- Répertoire bin
Le répertoire bin contient tous les fichiers qui permettent de lancer Tomcat, que ce soit sous Linux (fichiers .sh) ou Windows (fichiers .bat).

[root@31435920c3ee apache-tomcat-9.0.14]# tree bin/
bin/
|-- bootstrap.jar
|-- catalina-tasks.xml
|-- catalina.bat
|-- catalina.sh
|-- ciphers.bat
|-- ciphers.sh
|-- commons-daemon-native.tar.gz
|-- commons-daemon.jar
|-- configtest.bat
|-- configtest.sh
|-- daemon.sh
|-- digest.bat
|-- digest.sh
|-- makebase.bat
|-- makebase.sh
|-- setclasspath.bat
|-- setclasspath.sh
|-- shutdown.bat
|-- shutdown.sh
|-- startup.bat
|-- startup.sh
|-- tomcat-juli.jar
|-- tomcat-native.tar.gz
|-- tool-wrapper.bat
|-- tool-wrapper.sh
|-- version.bat
`-- version.sh


Notons l'utilitaire version, qui permet de tester la valeur des variables d'environnement "vues" par Tomcat, sa version, ainsi que différents détails sur l'environnement d'exécution.

-  Répertoire conf
Ce répertoire contient les fichiers de configuration de Tomcat. Nous reverrons la signification des fichiers qui se trouvent ici en détails. Les fichiers de ces répertoires permettent de configurer tous les aspects du fonctionnement de Tomcat, de sa sécurité, et aussi du chargement des applications web.


[root@31435920c3ee apache-tomcat-9.0.14]# tree conf/
conf/
|-- catalina.policy
|-- catalina.properties
|-- context.xml
|-- jaspic-providers.xml
|-- jaspic-providers.xsd
|-- logging.properties
|-- server.xml
|-- tomcat-users.xml
|-- tomcat-users.xsd
`-- web.xml


-  Répertoire lib
Ce répertoire contient les librairies Java dont Tomcat a besoin pour fonctionner.


[root@31435920c3ee apache-tomcat-9.0.14]# tree lib/
lib/
|-- annotations-api.jar
|-- catalina-ant.jar
|-- catalina-ha.jar
|-- catalina-storeconfig.jar
|-- catalina-tribes.jar
|-- catalina.jar
|-- ecj-4.9.jar
|-- el-api.jar
|-- jasper-el.jar
|-- jasper.jar
|-- jaspic-api.jar
|-- jsp-api.jar
|-- servlet-api.jar
|-- tomcat-api.jar
|-- tomcat-coyote.jar
|-- tomcat-dbcp.jar
|-- tomcat-i18n-de.jar
|-- tomcat-i18n-es.jar
|-- tomcat-i18n-fr.jar
|-- tomcat-i18n-ja.jar
|-- tomcat-i18n-ko.jar
|-- tomcat-i18n-pt-BR.jar
|-- tomcat-i18n-ru.jar
|-- tomcat-i18n-zh-CN.jar
|-- tomcat-jdbc.jar
|-- tomcat-jni.jar
|-- tomcat-util-scan.jar
|-- tomcat-util.jar
|-- tomcat-websocket.jar
`-- websocket-api.jar

0 directories, 30 files


- Répertoire log
Ce répertoire est vide. C'est ici que Tomcat écrit ses fichiers de journalisation dans sa configuration par défaut.

- Répertoire temp
Répertoire temporaire contenant des fichiers temporaires, comme son nom le laisse supposer...

- Répertoire webapp
Le répertoire webapp contient les applications web gérées par Tomcat. Cet endroit peut bien sûr être redéfini. Par défaut, il contient cinq applications, très utiles lorsque l'on débute :

docs : contient les pages de documentation de Tomcat, également accessibles en ligne ;

examples : contient des exemples simples de servlets et de pages JSP ;

host-manager et manager : contiennent l'application de gestion des applications web de Tomcat. Cette application permet de charger des applications web à chaud, et de les visualiser dans une interface web.

ROOT : racine des applications web chargées par défaut.

[root@31435920c3ee apache-tomcat-9.0.14]# tree -d -L 2 webapps/
webapps/
|-- ROOT
|   `-- WEB-INF
|-- docs
|   |-- WEB-INF
|   |-- api
|   |-- appdev
|   |-- architecture
|   |-- config
|   |-- elapi
|   |-- funcspecs
|   |-- images
|   |-- jspapi
|   |-- servletapi
|   |-- tribes
|   `-- websocketapi
|-- examples
|   |-- WEB-INF
|   |-- jsp
|   |-- servlets
|   `-- websocket
|-- host-manager
|   |-- META-INF
|   |-- WEB-INF
|   `-- images
`-- manager
    |-- META-INF
    |-- WEB-INF
    `-- images


-  Répertoire work
Répertoire de travail de Tomcat, dans lequel, entre autres, les classes Java correspondant aux pages JSP sont créées et compilées.

a la base ce  repertoire est vide  

==  Lancement de Tomcat  ==

- Lancement par défaut
La distribution par défaut de Tomcat permet de le lancer avec une adaptation minimale de la configuration.

Pour que le lancement se déroule bien, il faut vérifier que la variable JAVA_HOME soit bien positionnée sur une installation du JDK ou du JRE qui correspondent à la version de Java dont Tomcat a besoin (1.6 pour Tomcat 6.0.*). Ensuite, il suffit de se placer dans le répertoire bin, et de taper la commande :

> startup
Une fenêtre s'ouvre alors, qui détaille le déroulement des opérations de lancement, et très rapidement finit par nous afficher le message suivant :

INFO: Server startup in 351 ms
Il suffit alors d'ouvrir un navigateur, et de le faire pointer vers l'URL http://localhost:8080/, on obtient la page d'accueil .

Cette page d'accueil permet d'accéder à l'intégralité de la documentation de Tomcat, en local (cartouche Documentation ), aux ressources en ligne sur le site de l'ASF, et à des exemples de servlet ou de JSP.

Le cartouche Administration n'est pas encore accessible : il faut pour cela modifier certains droits d'accès, ce que nous allons faire.

3.2. Accéder à l'administration de Tomcat
Administrer un serveur Tomcat signifie entre autres pouvoir allumer ou éteindre certaines applications web. Autoriser n'importe quel utilisateur de faire ce genre de choses serait assez dangereux !

C'est la raison pour laquelle cette application d'administration est inaccessible dans la distribution de Tomcat. C'est d'ailleurs ce que nous dit la page d'accueil : l'accès à cette application est réservé aux utilisateurs possédant le rôle manager .

Dans la configuration par défaut, les rôles et les utilisateurs sont définis dans le fichier conf/tomcat-users.xml. Tomcat supporte bien sûr d'autres moyens de définir ce point, il sait entre autres accéder à des bases de données pour aller chercher ce genre d'informations.

Le fichier tomcat-users.xml est vide, et contient des exemples de déclaration de rôles et d'utilisateurs mis en commentaires. Il nous faut créer un rôle manager , et un utilisateur qui possède ce rôle.

Exemple 1. Création d'un rôle manager dans tomcat-users.xml

 <?xml version='1.0' encoding='utf-8'?>

 <tomcat-users>
	 <!-- création du rôle manager -->
	 <role  rolename="manager"/>
	
	 <!-- création d'un utlisateur possédant ce rôle -->
	 <user  username="tomcat"  password="tomcat"  roles="manager"/>
 </tomcat-users>

Il faut redémarrer Tomcat pour que ce fichier soit pris en compte. L'arrêt de Tomcat se fait en tapant la commande :

> shutdown
Un fois redémarré Tomcat, on peut cliquer sur le lien Status du cartouche d'administration. 

On peut également obtenir la liste des applications web actives.

http://localhost:8080/manager/list

-  Plusieurs instances de Tomcat
Pour un certain nombre de raisons (bonnes ou mauvaises...), on peut avoir besoin de lancer plusieurs instances de Tomcat en parallèle. Cela est parfaitement possible, à condition de positionner les bonnes variables d'environnement.

La variable CATALINA_HOME doit pointer vers le répertoire d'installation de Tomcat. La valeur de cette variable doit être la même pour tous les contextes de lancement de chaque instance de Tomcat.

Une deuxième variable est utilisée, CATALINA_BASE, qui peut prendre une valeur propre à chaque lancement.

Tomcat utilise plusieurs classloader pour fonctionner. Chaque classloader charge des classes et des JAR tel que défini dans le fichier conf/catalina.properties.

common.loader : les classes chargées par ce classloader sont disponibles dans Tomcat et pour toutes les applications web que cette instance prend en charge.

server.loader : ces classes sont accessibles au niveau du serveur. Par exemple, si une connexion JDBC est définie dans le Server, c'est ce classloader qui doit charger le pilote JDBC.

shared.loader : ces classes sont disponibles dans toutes les applications web.

Par défaut, les classloader server et shared sont vides, et Tomcat n'utilise que le classloader common.

Ensuite, Tomcat crée un classloader par application web, ce qui permet de garantir l'étanchéité complète d'une application web à l'autre. Ce classloader charge le contenu de WEB-INF/classes et WEB-INF/lib, tel que défini dans l'API Servlet.

On voit donc qu'il est possible, en jouant sur la variable CATALINA_BASE de définir un jeu de classes commun aux applications web, instance par instance.

Chaque instance de Tomcat peut ensuite gérer son propre environnement : les répertoires conf, work, temp, webapps et logs sont, par défaut, relatifs à CATALINA_BASE, et peuvent être redéfinis par des options dans le fichier de configuration conf/server.xml.

= Configuration de Tomcat

-  Introduction
La configuration de Tomcat passe par l'édition du fichier server.xml qui se trouve dans le répertoire conf de l'installation. Ce fichier XML se découpe en différents éléments, qui correspondent à des notions propres à Tomcat, que nous allons voir une par une.

Ces éléments XML se divisent en deux groupes. Le premier est constiué des éléments conteneur : Engine : Host et Context. Ces éléments s'imbriquent les uns dans les autres suivant des règles très précises, et sont obligatoires. Le second groupe est constitué d'éléments facultatifs et flottants, au sens où ils peuvent être placés dans les différents conteneurs : GlobalNamingResources, Resources, Realm et Valve.

- Élément Server
L'unique élément racine Server modèlise un serveur Catalina dans sa totalité. Catalina est le nom du serveur proprement dit, alors que Tomcat est le nom du projet complet. Tout ce qui est défini dans cet élément est global au serveur, et sera donc appliqué, entre autres, à toutes les applications web qu'il supporte. Techniquement, un server est un élément XML, et une interface Java : org.apache.catalina.Server.

Cet élément supporte trois attributs :

className : la classe d'implémentation de l'interface org.apache.catalina.Server. En principe on n'en change pas, et l'on peut omettre cet attribut, qui prendra alors sa valeur par défaut.

port : le port d'arrêt ( shutdown ) de Tomcat. Ce port ne correspond pas au port HTTP écouté par Tomcat, mais à un port sur lequel Tomcat reçoit la commande de s'arrêter. Lorsque l'on tape la commande shutdown sur l'invite de commande, cet ordre est émis, et Tomcat s'éteint alors.

shutdown : la commande envoyée sur ce port.

Seul l'attribut port est réellement susceptible d'être modifié. Cette modification est même nécessaire si l'on installe plusieurs Tomcat en même temps sur une même machine.

L'élément server accepte trois type d'enfants : des Listener, un GlobalNamingResources et des Service

 Exemple d'élément Server

 <Server  port="9005"  shutdown="SHUTDOWN">

	 <!-- contenu de l'élément -->
	
 </Server>

-  Élément Service
Un service est un container dans lequel on peut trouver autant de sous-éléments Connector que l'on veut, et un unique sous-élément Engine. On peut définir autant de services que l'on veut au sein d'un serveur donné, à condition qu'ils diffèrent tous par leurs noms.

Cet élément possède deux attributs :

className : nom de la classe Java qui implémente l'interface org.apache.catalina.Service. Peut être omis, dans ce cas l'implémentation par défaut est choisie.

name : nom logique de ce service, doit être unique au sein de tous les services définis dans un serveur.

Exemple d'élément Service

 <Service  name="Catalina">

	 <!-- contenu de cet élément -->

 </Service>

- Élément Connector
Un connecteur est un objet Java capable d'écouter un port précis et comprenant un protocole précis. À chaque protocole supporté par Tomcat est associé une classe Java de connecteur. Chaque connecteur dirige ensuite les requêtes qu'il reçoit au moteur de servlets défini dans ce service. Donc un moteur de servlet donné peut répondre à des requêtes en provenance de plusieurs ports, et suivant des protocoles différents.

Quel que soit le connecteur choisi, un certain nombre d'attributs sont toujours disponibles :

port : le port que ce connecteur écoute.

enableLookups : autorise ou non les requêtes DNS lorsqu'une servlet invoque la méthode request.getRemoteHost(). Une requête DNS est un processus éventuellement coûteux. Si enableLookups est à false, alors request.getRemoteHost() retourne l'adresse IP plutôt que le nom de domaine associé.

maxPostSize : la taille maximale des requêtes POST supportée par ce serveur. La valeur par défaut est fixée à 2Mo. Une valeur de -1 signifie qu'il n'y a pas de limite.

1/ Connecteur HTTP
Le connecteur HTTP supporte le standard HTTP/1.1, et permet à Tomcat de fonctionner comme un serveur web à part entière.

maxThreads : indique le nombre maximal de requêtes que ce connecteur peut traiter à la fois (une requête est traitée dans son propre thread par le connecteur HTTP). Au-delà de cette limite, les requêtes sont placées dans une file d'attente.

acceptCount : taille maximale de la file d'attente des requêtes. Si des requêtes supplémentaires arrivent, alors elles sont rejetées.

protocol : cet attribut peut prendre deux types de valeur, un nom de protocole, tel que HTTP/1.1, ou un nom de classe. Les trois classes supportées par défaut sont :

org.apache.coyote.http11.Http11Protocol : correspond au protocole HTTP/1.1 standard.

org.apache.coyote.http11.Http11NioProtocol : correspond au protocole HTTP construit sur l'API NIO.

org.apache.coyote.http11.Http11AprProtocol : correspond au protocole construit sur l'APR (Apache Portable Runtime, qui est la librairie runtime utilisée par Apache 2.2).

2/ Connecteur AJP
Le connecteur AJP communique avec un autre serveur web, en utilisant le protocole AJP. Il existe deux connecteurs de ce type :

JK 1.2.* : permet de communiquer avec tous les serveurs web qui supportent le protocole JK ;

mod_proxy : permet de communiquer avec Apache 2.2.*.

Exemple d'éléments Connector

 <!-- Port standard d'écoute de requêtes HTTP sur le port 8080 -->
 <Connector  port="8080"  protocol="HTTP/1.1" 
            connectionTimeout="20000" 
            maxThread="100"  maxCount="100"
            redirectPort="8443" />

 <!-- Port standard d'écoute de requête Apache AJP/1.3 sur le port 8009 -->
 <Connector  port="8009" 
            protocol="AJP/1.3" 
            redirectPort="8443" />

- Élément Engine
L'élément Engine modélise le moteur de servlet proprement dit. À chaque serveur Catalina est associé un unique moteur de servlet, auquel on accède via des connecteurs. Un moteur peut comporter plusieurs sous-éléments Host, chacune représentant un hôte virtuel.

Toutes les implémentations par défaut de cet élément supportent les attributs suivants :

name : le nom de ce moteur, notamment utilisé dans les fichiers journal ;

defaultHost : l'hôte virtuel par défaut vers lequel diriger cette requête.

Exemple d'élément Engine

 <Engine  name="Catalina"  defaultHost="localhost">

	 <!-- contenu de l'élément Engine -->

 </Engine>

- Élément Host
Cet élément modélise un hôte virtuel. Un hôte virtuel doit être associé à l'adresse IP de ce serveur, via un DNS ou un fichier hosts. Si l'attribut defaultHost du moteur dans lequel se trouve cet hôte est défini, alors au moins un des hôtes doit obligatoirement posséder ce nom.

Toutes les implémentations de Host doivent supporter les attributs suivants :

name : le nom de cet hôte virtuel ;

appBase : l' application base pour cet hôte. Il s'agit du répertoire contenant les applications web pour cet hôte. Il peut s'agir d'un chemin absolu, ou d'un chemin relation au répertoire $CATALINA_BASE. La valeur par défaut de cet attribut est true.

autoDeploy : indique à Tomcat s'il doit charger automatiquement les applications web qui sont copiées dans le répertoire appBase. Le cas échéant, Tomcat scrute le contenu de ce répertoire à intervalles de temps réguliers, afin de détecter de nouveaux répertoires, ou de nouveaux fichiers .war.

deployOnStartup : indique à Tomcat s'il doit charger les applications web se trouvant dans appBase lors de son démarrage. La valeur par défaut de cet attribut est true.

L'implémentation par défaut supporte en plus les attributs suivants.

workDir : répertoire de travail propre à cet hôte. Par défaut, Catalina utilise un sous-répertoire de $CATALINA_BASE/work pour chaque hôte, mais il est possible d'en choisir un autre. On peut accéder à ce répertoire d'une servlet, via l'attribut d'application javax.servlet.context.tempdir.

unpackWARs : indique à Catalina qu'il doit exécuter les applications web de cet hôte dans un répertoire de travail avant de les exécuter. La valeur par défaut de cet attribut est true.

deployXML : indique à Catalina s'il peut ou non prendre en compte les fichiers /META-INF/context.xml des applications web. La valeur par défaut de cet attribut est true.

Exemple d'élément Host

 <Host  name="localhost"   appBase="webapps"
       unpackWARs="true"  autoDeploy="true">

	 <!-- contenu de l'élément Host -->

 </Host>

- Élément Context
Enfin, l'élément Context modélise une application web. Cet élément est un peu particulier, car il peut se trouver en plusieurs endroits.

Historiquement (Tomcat v4), cet élément se trouvait nécessairement dans le fichier server.xml de Tomcat. Cette façon de faire posait deux problèmes :

toute modification d'un contexte pour une unique application web imposait de redémarrer l'ensemble du serveur Tomcat, puisque ce fichier est pris en compte au démarrage de Tomcat ;

ce fichier étant la propriété de l'administrateur de Tomcat, il y avait un problème de partage de droits, puisque ce sont les administrateurs des applications web qui connaissent le contenu de ces éléments.

Ce problème a été levé, et il est maintenant possible de placer cet élément dans un fichier context.xml rangé dans le répertoire META-INF de l'application.

La prise en compte ou non de ce fichier à cet endroit peut être réglé par l'administrateur de Tomcat (attribut deployXML de l'élément Host). S'il choisit de ne pas prendre en compte ces fichiers, alors Tomcat ira chercher ce fichier ailleurs, dans un endroit contrôlé par l'administrateur.

On peut définir autant d'éléments Context que l'on veut dans un hôte virtuel, avec une restriction :

chaque élément Context doit être associé à un unique attribut path, qui représente le chemin vers cette application web.

au moins un Context doit être associé à un chemin vide. C'est cette application qui servira toutes les requêtes non servies par les autres applications.

- Element GlobalNamingResources

Cet élément permet de configurer des ressources et des variables d'environnement, qui seront ensuite disponibles pour toutes les applications web gérées par cette instance de Tomcat. La distribution par défaut nous donne l'exemple de la base d'utilisateurs reconnue par cet instance de Tomcat.

Voyons tout d'abord un exemple de définition d'une variable d'environnement.

Exemple de variable d'environnement

 <Environment  name="maxRetry"  type="java.lang.Integer"  value="10"
              override="false"/>

Notons que l'attribut name, qui représente le nom de la variable créée, est relatif au context java:comp/env. Dans notre exemple, le nom JNDI complet de la variable sera donc java:comp/env/maxRetry.

Examinons maintenant la ressource définie dans le server.xml par défaut.

Exemple de Resources : UserDatabase

 <Resource  name="UserDatabase"  auth="Container"
           type="org.apache.catalina.UserDatabase"
           description="User database that can be updated and saved"
           factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
           pathname="conf/tomcat-users.xml" />

Toute ressource doit posséder un nom (attribut name) et un type, sous forme d'une classe Java. Cette ressource UserDatabase sera donc représentée par un objet de type UserDatabase, que Tomcat peut construire grâce à la classe factory MemoryUserDatabaseFactory.

Cet objet a besoin du paramètre suivant pour s'initialiser : pathname, qui lui indique dans quel fichier les utilisateurs sont définis.

On peut définir des ressources très diverses, les plus fréquentes sont les connexions aux bases de données, disponibles sous forme de DataSource, ou aux serveurs de mail.

Exemple de Resources : serveur de mail

 <Resource  name="mail/Session"  auth="Container"
           type="javax.mail.Session"
           mail.smtp.host="localhost"/>

Nous verrons dans la suite comment il est possible d'accéder à ces ressources d'une application web.

- Élément Realm
Un Realm est une notion qui appartient à l'environnement de sécurité de Java, défini par JAAS ( Java Authentification and Authroization Service ) pour la partie JSE et JCCA pour la partie JEE. Par définition, un Realm est un ensemble d'utilisateurs qui partagent la même méthode d'authentification. Techniquement pour Tomcat, un Realm est défini par cette méthode d'authentification.

Comme il a été dit, un élément Realm est un élément qui peut être inclus dans plusieurs éléments conteneur du fichier conf/server.xml de Tomcat : Engine, Host ou Context. Un élément Realm inclus dans un élément parent est automatiquement hérité dans les éléments enfants. Ainsi, un Realm défini dans un Host (donc au niveau d'un hôte virtuel) sera automatiquement pris en compte par tous les Context (donc les applications web) de ce Host.

Un élément Realm permet d'associer des droits d'utilisation aux application web. Un tel élément modélise une base d'utilisateurs et rôles, qu'il est ensuite possible d'utiliser pour restreindre l'utilisation de certaines applications.

Tomcat propose plusieurs implémentations de Realm. Nous en avons déjà vu une : org.apache.catalina.realm.MemoryRealm, qui utilise le fichier tomcat-users.xml. Les autres implémentations permettent notamment de lire la liste des utilisateurs et des rôles dans des bases de données, qui elles-mêmes peuvent être administrées par ailleurs.

Le choix d'une implémentation particulière se fait en fixant une valeur à l'attribut className de l'élément Realm.

Examinons une de ces implémentations : org.apache.catalina.realm.JDBCRealm. Dans cette implémentation, les utilisateurs sont enregistrés dans une table. Tomcat a besoin de plusieurs informations pour y accéder :

la chaîne de connexion à la base de données, un nom d'utilisateur et un mot de passe ;

le nom de la table, et des différentes colonnes où se trouvent les informations dont il a besoin.

Voici un exemple d'un tel élément.

Exemple Configuration d'un Realm JDBC

 <Realm  className="org.apache.catalina.realm.JDBCRealm"
        driverName="com.mysql.jdbc.Driver"
        connectionURL="jdbc:mysql://localhost/db_user" 
        connectionName="admin_db" 
        connectionPassword="passwd"
        userTable="t_user"  userNameCol="user_name"  userCredCol="passwd"
        userRoleTable="t_role"  roleNameCol="role_name"
/>

On reconnaît sans problème les paramètres de connexion à la base parmi les attributs de cet élément. Viennent ensuite les paramètres de la table contenant les utilisateurs. Tomcat utilise deux colonnes : userNameCol porte les noms des utilisateurs, et userCredCol leurs mots de passe. Notons que par défaut les mots de passe sont stockés en clair, mais qu'il est possible de configurer ce Realm pour qu'ils soient cryptés. Enfin, viennent les paramètres de la table des rôles : userRoleTable porte le nom de cette table et userRoleTable le nom de la colonne qui contient les noms des rôles. Cette table doit aussi comporter une colonne userNameCol, qui réalise la jointure entre la table des utilisateurs et celle des rôles.

Il existe également une implémentation de Realm capable de s'adresser à une DataSource directement : org.apache.catalina.realm.DataSourceRealm. La DataSource est obtenue par une requête JNDI dont le nom est donné en paramètre. Voyons un exemple.

Exemple Configuration d'un Realm sur une DataSource

 <Realm  className="org.apache.catalina.realm.DataSourceRealm"
        dataSourceName="jdbc/UserDataSource"
        userTable="t_user"  userNameCol="user_name"  userCredCol="passwd"
        userRoleTable="t_role"  roleNameCol="role_name"
/>

Les attributs permettant de lire les tables d'utilisateurs et de rôles sont les mêmes que pour le Realm JDBC.

- Élément Valve
De même que l'élément Realm, l'élément Valve peut se placer dans les conteneurs Engine, Host et Context. De même que pour le Realm, une valve définie au niveau d'un conteneur s'applique à ses sous-conteneurs. Une valve est un élément utilitaire, qui peut avoir différentes fonctions, qui s'insère dans le processus de traitement d'une requête, et realise un certain traitement. À chaque type de valve est associé un traitement particulier.

Un élément Valve comporte toujours un attribut className, qui indique quelle implémentation de Valve est utilisée pour cet élément. Suivent ensuite une liste d'attributs propres à chaque implémentation.

Voyons les principales implémentations de Valve :

1/ Valve de journalisation
La valve de journalisation permet d'enregistrer des informations sur chaque requête, au même format que les serveurs web classiques (Apache notamment).

Exemple Valve de journalisation

 <Valve  className="org.apache.catalina.valves.AccessLogValve"
        directory="logs"  prefix="fichier_log"  resolveHosts="false" 
        rotatable="true"  fileDateFormat="yyyy-MM-dd.HH"/>

On crée ici une valve de journalisation, qui enregistre ses informations dans des fichiers dont le préfixe est fichier_log, dans le répertoire $CATALINA_BASE/logs. Ce fichier subira une rotation toutes les heures, ce qui est fixé par la valeur de l'attribut yyyy-MM-dd.HH. L'attribut resolveHost décide si une requête DNS est faite afin d'enregistrer le nom d'hôte du client, ou juste son adresse IP.


exemple : ici on va définir logger l'activité de tomcat pour les fichiers "localhost_access_log" renommés en txt avec le logformat suivant : 

<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" prefix="localhost_access_log." suffix=".txt" pattern="%h %l %u %t %r %s %b %T"/>

info par exemple : https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/valves/AccessLogValve.html


2/ Valve de filtrage par adresse IP ou par hôte
Ces valves permettent de refuser l'accès aux appplications web en fonction de l'adresse IP du client, ou en fonction de son nom d'hôte.

Exemple Valve de filtrage par adresse IP

 <Valve  className="org.apache.catalina.valves.RemoteAddrValve"
        allow="192.168.1.*"  deny="192.168.0.*"/>

 <Valve  className="org.apache.catalina.valves.RemoteHostValve"
        allow="*.fr"  deny="*.com"/>

Dans les deux cas, la stratégie d'accès est la même. Si l'attribut allow est présent, alors la requête doit correspondre à sa valeur. S'il n'est pas présent, alors la requête est acceptée, sauf si elle correspond à la valeur de l'attribut deny. Dans tous les cas, une requête qui correspond à la valeur de l'attribut deny est rejetée.

Notons enfin que l'attribut deny de RemoteHostValve est décodé en utilisant la expressions régulières Java (package java.util.regex).

3/ Autres valves
Tomcat propose d'autres valves que celles présentées ici :

Une valve de débugage : la RequestDumperValve permet d'enregistrer dans un fichier l'intégralité des paramètres d'une requête HTTP. Elle ne doit être utilisée qu'en phase de mise au point d'une application, sous peine de saturer rapidement le disque dur.

Des valves de sécurité et d'authentification :

SingleSignOn : permet de s'authentifier sur plusieurs applications web d'un même hôte virtuel ;

BasicAuthenticator et DigestAuthenticator : permettent de forcer l'authentification HTTP basic ou digest pour l'accès à une application web.

FormAuthenticator et SSLAuthenticator : activent l'authentification par formulaire, en mode normal ou SSL.

Définition et chargement des applications web
5.1. Introduction
La prise en compte et le chargement des applications web par Tomcat suivent un processus très précis et un peu délicat à comprendre, nous allons l'examiner à présent.

La façon la plus simple de déployer une application dans Tomcat, est de passer par l'outil de gestion des applications. Il suffit alors de charger le fichier .war qui contient l'application, Tomcat s'occupe de la déployer et de la mettre à disposition. Si l'on n'utilise pas cette méthode (qui n'est pas toujours accessible), alors il faut déployer ses applications manuellement, ce qui est plus délicat.

5.2. Prise en compte des éléments Context
La première chose que Tomcat recherche, ce sont les descripteurs de contexte, ( context descriptors ), c'est-à-dire des fichiers qui contiennent un élément Context. Rappelons que la définition de cet élément appartient à l'API Servlet, et n'est pas propre à Tomcat.

Où Tomcat va-t-il chercher ces éléments ?

Tomcat commence par rechercher le fichier $CATALINA_BASE/conf/context.xml. Les informations que cet élément contient seront partagées par toutes les applications web.

Il recherche ensuite les fichiers $CATALINA_BASE/conf/[enginename]/[hostname]/context.xml.default. Les informations qu'il contient seront partagées par toutes les applications web de cet hôte virtuel.

Il charge ensuite tous les fichiers $CATALINA_BASE/conf/[enginename]/[hostname]/[nom_fichier].xml. Chacun de ces fichiers peut avoir n'importe quel nom, dès l'instant qu'il porte l'extension .xml. Chacun de ces fichiers est alors associé à une application web, disponible sous le path nom_fichier. On peut créer des sous-chemins en utilisant le caractère # dans le nom du fichier, à la place du caractère /. L'application web par défaut, associée au chemin racine, est associée par convention au fichier ROOT.xml.

Si aucun fichier de contexte n'a été trouvé dans $CATALINA_BASE/conf/[enginename]/[hostname]/[nom_fichier].xml pour l'application web donnée, alors Tomcat va chercher le fichier /META-INF/context.xml. Là encore deux cas peuvent se présenter. Si l'application est archivée dans un WAR, alors Tomcat en extrait le fichier context.xml, et le copie dans $CATALINA_BASE/conf/[enginename]/[hostname]/[nom_fichier].xml, où [nom_fichier] correspond au nom de l'application web. Ce cas est un peu dangereux, car le changement de fichier WAR, avec éventuellement la mise à jour du fichier context.xml n'est pas vue par Tomcat, qui ne remplace pas ce fichier [nom_fichier].xml. Pour ce faire, il faut supprimer l'application web et la déployer à nouveau en tant que nouvelle application, plutôt que de faire un redéploiement simple.

Enfin et en dernier recours, Catalina recherche des éléments Context dans son fichier $CATALINA_BASE/conf/server.xml.

Dans tous les cas, Tomcat crée une application web associée à chaque contexte trouvé, et y associe le contenu du répertoire (ou fichier archive) $CATALINA_BASE/webapp/[nom_webapp]. Le nom de l'application web est défini suivant les règles qui viennent d'être décrites. Rappelons que le répertoire dans lequel se trouvent les applications web est fixé par l'attribut appBase de l'élément Host, et qu'il peut donc être redéfini.

5.3. Chargement et mise à jour à chaud
Tomcat est capable de charger des applications web alors qu'il est en fonctionnement, et de mettre à jour celles qu'il gère déjà. On appelle cela le chargement à chaud .

Ce mode est actif pour les hôtes dont l'attribut autoDeploy a été positionné à true. Dans ce cas, si un nouveau répertoire est créé dans $CATALINA_BASE/webapp, ou si un fichier .war y est copié, Tomcat va tenter de déployer l'application web correspondante.

== Utilisation de Tomcat avec Apache
Jusqu'à sa version 5, Tomcat était un bon serveur de servlets / JSP, mais manquait de fonctionnalités et peut-être de performances pour rivaliser avec Apache quant au service du contenu statique. La bonne façon de l'utiliser était donc de le cantonner au service des applications web (servlets, JSP, etc...). Apache était en frontal, gérait la sécurité et le contenu statique (pages, images, etc...), et déléguait les requêtes dynamiques à Tomcat.

La configuration pour ce faire reste la même, construite sur le protocole AJP/1.3.

L'arrivée de l'APR (Apache Portable Runtime) au cœur de Tomcat 5.5 lui permet d'utiliser le même code qu'Apache pour gérer le contenu statique, et donc de rattraper ce déficit de performance. Cela dit, le couple Apache / Tomcat fonctionne toujours très bien, et reste encore utilisé.

Permettre à Apache et Tomcat de dialoguer nécessite quelques ajustements techniques à la configuration de Tomcat et d'Apache.

Côté Apache, on doit veiller à trois choses :

au chargement du module mod_jk ;

à correctement configurer le fonctionnement de mod_jk dans un fichier de configuration appelé workers.properties

à correctement rediriger les requêtes dynamiques vers Tomcat.

Voici un exemple de configuration côté Apache. Le fichier par défaut de configuration d'Apache s'appelle httpd.conf.

Exemple 14. Éléments de configuration côté Apache

 # Chargement et déclaration du module mod_jk
 # .dll sous Windows
 # .so sous Unix / Linux
LoadModule jk_module modules/mod_jk.dll
AddModule  mod_jk.c
 # déclaration du fichier de configuration de mod_jk
JkWorkersFile D:\Tomcat\conf\workers.properties

NameVirtualHost *

<VirtualHost *>
	 # déclaration et paramétrage d'un hôte virtuel 
	ServerName    www.galilee.org
	DocumentRoot  "D:\www\www.galilee.org\htdocs"
	ErrorLog      "D:\www\www.galilee.org \logs\error.log"
	CustomLog     "D:\www\www.galilee.org \logs\access.log" combined
	
	 # configuration du répertoire contenant les éléments statiques
	DirectoryIndex index.html
	<Directory  "D:\www\www.galilee.org\htdocs">
		Order deny,allow
		Allow from all
	</Directory>
	
	 # configuration de mod_jk
	<IfModule mod_jk.c>
		JkLogFile          D:\www\www.galilee.org\logs\mod_jk.log
		JkLogLevel         info
		JkLogStampFormat    "[%a %b %d %H:%M:%S %Y] "
		JkOptions          +ForwardKeySize +ForwardURICompat -ForwardDirectories 
		JkRequestLogFormat  "%w %V %T"
		
		 # redirection de toutes les requêtes commençant par 
		 # /webapp vers le connecteur ajp13
		 # ce connecteur doit être déclaré dans workers.properties
		JkMount /webapps/* ajp13
	</IfModule>
</VirtualHost>

Le fichier workers.properties permet de paramétrer l'accès à Tomcant. Voyons un exemple.

Exemple 15. Exemple de fichier workers.properties

 # doit indiquer dans quel répertoire Tomcat est installé
workers.tomcat_home=C:\tomcat\apache-tomcat-6.0.29\

 #doit indiquer dans quel répertoire le JDK est installé
workers.java_home=D:\java\jdk-6.0.18

 # la valeur de cette variable est / sur Unix et \ sur Windows
ps=\

 # liste des workers existants, on peut en mettre plusieurs
worker.list=ajp13

 # paramétrage de chaque worker déclaré
 # Tomcat devra écouter le bon port sur le bon hôte, avec le bon protocole
worker.ajp13.port=8009
worker.ajp13.host=localhost
worker.ajp13.type=ajp13

Dans notre cas, Tomcat devra donc déclarer un connecteur de type AJP 13 écoutant le port 8009.

Exemple 16. Exemple de connecteur Tomcat AJP13

 <Connector  port="8009" 
            protocol="AJP/1.3" 
            redirectPort="8443" />


