=== notes tomcat udemy ===


=== general : ===

apres l'install de l'appli ( package distrib ou via source ) : des grands concepts sont a comprendre :

en utilisant le binaire directement de tomcat on voit différents composants :

root@ubuntu-xenial:/usr/share/tomcat8/bin# ./startup.sh 
Using CATALINA_BASE:   /usr/share/tomcat8
Using CATALINA_HOME:   /usr/share/tomcat8
Using CATALINA_TMPDIR: /usr/share/tomcat8/temp
Using JRE_HOME:        /usr
Using CLASSPATH:       /usr/share/tomcat8/bin/bootstrap.jar:/usr/share/tomcat8/bin/tomcat-juli.jar


tomcat est un assemblage de composants / modules. 

CATALINA : un des plus important module : c'est le web container ou servlet container de notre application.

JRE_HOME : tomcat a besoin d'une jvm java pour travailler : à l'install brut via package le path n'est pas rempli : on pourra le définir
pour cela il est conseillé de creer un fichier nommé setenv.sh qui va contenir le path de notre java : 
cat setenv.sh 
export JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64'

[ NOTES :  ce nom est apppelé dans le script catalina.sh lui meme appellé par startup.sh 
if [ -r "$CATALINA_BASE/bin/setenv.sh" ]; then
  . "$CATALINA_BASE/bin/setenv.sh"
elif [ -r "$CATALINA_HOME/bin/setenv.sh" ]; then
  . "$CATALINA_HOME/bin/setenv.sh"
fi
Cela ne permet d'exposer java que pour l'appli tomcat.
Biensur on peut définir java dans le fichier /etc/environment 

sudo vi /etc/environment

JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
PATH=$PATH:$JAVA_HOME/bin

source /etc/environment
 ]

si on redemmare tomcat le path est bien chargé :

root@ubuntu-xenial:/usr/share/tomcat8/bin# ./startup.sh 
Using CATALINA_BASE:   /usr/share/tomcat8
Using CATALINA_HOME:   /usr/share/tomcat8
Using CATALINA_TMPDIR: /usr/share/tomcat8/temp
Using JRE_HOME:        /usr/lib/jvm/java-8-openjdk-amd64




tomcat quand il va recevoir une requete va la transmettre a un thread qui sera issu d'un pool de thread dédié en attente.
tomcat traite une requette par un thread.



on va pouvoir installer des pacquets utiles pour comprendre tomcat :
apt install tomcat8-docs tomcat8-examples tomcat8-admin

si on pointe sur notre browser en localhost 8080 : on verra l'install de tomcat et les liens vers les exemples , docs et admin ( des credentials sont demandés dans ce cas.) 
 

== Request mapping : ==

pour fournir le contenu correspondant a la requete d'un client , tomcat va utiliser un mapping de ressources :

-> tomcat cherche le war (web archive ) matchant avec la ressource
-> ensuite tomcat va fournir la ressource contenue dans le war file ..
ex : page html ..

Si la ressource n'existe pas une 404 est retournée ...


=== deploiement d'appli : =

la methode classique est de copier le WAR file dans l'arbo $TOMCAT_HOME/webapps 

l'url du client comporte le nom du war comme premier champ de l'uri :
ex: 
   'scheme'    port number  WAR file name  JSF script in the WAR file
        \               \      /           /
       http://localhost:8080/preds/ajax.jsf   ## URI starts with the / after the port number


souvent une page par default est affiché lors de l'appel d'une ressource : le client appelle juste l'url avec le nom du war :et une page par défault apparait :
ex : lapin.net/bla -> va renvoyer lapin.net/bla/bla.html : le war est bla et bla.html fait partie du war et est configurée comme page par défaut.


=== tomcat directory structure ===


 # Tomcat can be installed (e.g., by unzipping a downloaded ZIP file) anywhere on the local system.

   ## For reference, TOMCAT_HOME is the top-level install directory.
   
      ### You could define an environment variable with this name, but it's not required.

 # Here's the directory structure for TOMCAT_HOME:

                              TOMCAT_HOME     ## contains LICENSE, NOTICE, RELEASE-NOTES, RUNNING.txt
                                    |
   +----------+----------+----------+----------+----------+---------+
   |          |          |          |          |          |         |
  bin        conf       lib        logs       temp       webapps   work

   *## bin:     scripts to start/stop Tomcat, etc.
    ## conf:    configuration files (XML files)
    ## lib:     Tomcat and 3rd-party libraries (JAR files)
    ## logs:    log files (many over time...)
    ## temp:    temporary files created using the Java File API
   *## webapps: deployed web apps (web sites, web services, web sockets,...)
    ## work:    Tomcat-compiled JSP scripts and other assets

   A star * marks the two subdirectories we care about most at the start.

  # More about TOMCAT_HOME/webapps

Ce repertoire sera le doc root de base de nos webapps : on pourra y mettre les wars directement 

    ## It's the 'virtual base directory' for a deployed web app, e.g., 'preds.war'.

       ### The 'virtual' underscores that TOMCAT_HOME/webapps is _not_ part of the URI:

on voit bien qu'il n'y a aucune présence du "path" tomcat_home/webapps : l'appel de notre url rendra la ressource directment a la racine du site :  
              http://localhost:8080/preds    ## no sign of TOMCAT_HOME/webapps

       ### TOMCAT_HOME/webapps can have arbitrarily many subdirectories to any level.
On peut biensur avoir des sous niveau ex : 
           Example: If 'preds.war' were deployed to TOMCAT_HOME/webapps/examples, then
	            the URL would be:
          
              http://localhost:8080/examples/preds

           -- To keep the URI part as simple as possible, I prefer to put all of my web apps
	      in TOMCAT_HOME/webapps rather than in a subdirectory thereof.

=== http ===

tomcat est un serveur web.

 # HTTP is a messaging protocol, built atop TCP (Transmission Control Protocol)

   ## Two basic types of message: request and response

   Depiction:

      Various request 'methods', including: POST (Create), GET (Read), PUT (Update, Delete (Delete): CRUD ops
                  /
             request message
      client----------------->server

      ## URLs typed into the browser's input box, or clicked hyperlinks, typically generate GET requests.

      ## Forms submitted from a browser typically generate POST requests.
      ## Modern browsers do GET and POST only.

      ## Modern web services, which are typically hit by programs other than browsers, are 'RESTful'
         in that they support all four CRUD operations.
         
      
             response message
      client<-----------------server
      
-----------------------------------------------      

   Richer depiction with URL 'http://localhost:8080/greet/hello.html' ## URI is '/greet/hello.html', method is GET

                                                              'Create' 'Read' 'Update' 'Delete' ## CRUD operations
                                                              'Create' 'Read' 'Update' 'Delete' ## CRUD operations
                                                                   \      |    /        /
        requires a URI ('noun') and an HTTP method ('verb' such as POST, GET, PUT, or DELETE)
                      \
               request message    +-----------------------+
       client-------------------->| HTTP-compliant server |   ## verb is GET, noun is /greet/hello.html
          /                       +-----------------------+   ## Operation: Read the 'hello' page
   perhaps a browser as the 'user agent'


               response message   +-----------------------+
       client<--------------------| HTTP-compliant server |   ## a server responds to a request
                                  +-----------------------+   ## Response is the embedded 'hello' page 
   ## HTTP is often described as 'stateless', but does contain mechanisms (e.g., cookies and other
      'header elements') to manage state.

   ## In general, it's the web app that maintains 'state' among requests and responses in order to
      support a multi-message conversation.

      ### Tomcat (through the Catalina component) provides mechanisms such as the 'session map' to help
          the programmer maintain state.
  
 # Format of requests/responses

    HTTP request:

       start line   ## HTTP_method URI [HTTP version]        E.g.: POST /skiServ/dataVerifier HTTP/1.1
       headers      ## Key/value pairs, with : as separator  E.g.: Content-Type: application/x-www-form-urlencoded
       newline
       newline
       [body]       ## GET and DELETE have no body; POST and PUT have a body

    HTTP response:      

       start line   ## [HTTP version] Status code (numeric and English)  E.g.: 200 OK
       headers      ## Key/value pairs, with : as separator              E.g.: Server: Apache-Coyote/1.1
       newline
       newline
       body         ## For instance, an HTML page
:


