=== notes java ==


url :
http://objis.com/tutoriel-java-installation-java-jdk-8/





== 

Java possède un certain nombre de caractéristiques qui ont largement contribué à son énorme succès :

Java est interprété 
le source est compilé en pseudo code ou bytecode puis exécuté par un interpréteur Java : la Java Virtual Machine (JVM). Ce concept est à la base du slogan de Sun pour Java : WORA (Write Once, Run Anywhere : écrire une fois, exécuter partout). En effet, le bytecode, s'il ne contient pas de code spécifique à une plate-forme particulière peut être exécuté et obtenir quasiment les mêmes résultats sur toutes les machines disposant d'une JVM.
Java est portable : il est indépendant de toute plate-forme 
il n'y a pas de compilation spécifique pour chaque plate forme. Le code reste indépendant de la machine sur laquelle il s'exécute. Il est possible d'exécuter des programmes Java sur tous les environnements qui possèdent une Java Virtual Machine. Cette indépendance est assurée au niveau du code source grâce à Unicode et au niveau du bytecode.
Java est orienté objet. 
comme la plupart des langages récents, Java est orienté objet. Chaque fichier source contient la définition d'une ou plusieurs classes qui sont utilisées les unes avec les autres pour former une application. Java n'est pas complètement objet car il définit des types primitifs (entier, caractère, flottant, booléen,...).
Java est simple 
le choix de ses auteurs a été d'abandonner des éléments mal compris ou mal exploités des autres langages tels que la notion de pointeurs (pour éviter les incidents en manipulant directement la mémoire), l'héritage multiple et la surcharge des opérateurs, ...
Java est fortement typé 
toutes les variables sont typées et il n'existe pas de conversion automatique qui risquerait une perte de données. Si une telle conversion doit être réalisée, le développeur doit obligatoirement utiliser un cast ou une méthode statique fournie en standard pour la réaliser.
Java assure la gestion de la mémoire  
l'allocation de la mémoire pour un objet est automatique à sa création et Java récupère automatiquement la mémoire inutilisée grâce au garbage collector qui restitue les zones de mémoire laissées libres suite à la destruction des objets.
Java est sûr  
la sécurité fait partie intégrante du système d'exécution et du compilateur. Un programme Java planté ne menace pas le système d'exploitation. Il ne peut pas y avoir d'accès direct à la mémoire. L'accès au disque dur est réglementé dans une applet. 

Les applets fonctionnant sur le Web sont soumises aux restrictions suivantes dans la version 1.0 de Java :
aucun programme ne peut ouvrir, lire, écrire ou effacer un fichier sur le système de l'utilisateur
aucun programme ne peut lancer un autre programme sur le système de l'utilisateur
toute fenêtre créée par le programme est clairement identifiée comme étant une fenêtre Java, ce qui interdit par exemple la création d'une fausse fenêtre demandant un mot de passe
les programmes ne peuvent pas se connecter à d'autres sites Web que celui dont ils proviennent.
Java est économe  le pseudo code a une taille relativement petite car les bibliothèques de classes requises ne sont liées qu'à l'exécution.
Java est multitâche il permet l'utilisation de threads qui sont des unités d'exécutions isolées. La JVM, elle même, utilise plusieurs threads.

Il existe 2 types de programmes avec la version standard de Java : les applets et les applications. Une application autonome (stand alone program) est une application qui s'exécute sous le contrôle direct du système d'exploitation. Une applet est une application qui est chargée par un navigateur et qui est exécutée sous le contrôle d'un plug in de ce dernier.

Les principales différences entre une applet et une application sont :

les applets n'ont pas de méthode main() : la méthode main() est appelée par la machine virtuelle pour exécuter une application.
les applets ne peuvent pas être testées avec l'interpréteur. Elles doivent être testées avec l'applet viewer ou doivent être intégrées à une page HTML, elle même visualisée avec un navigateur disposant d'un plug in Java, .

Sun puis Oracle ont toujours fourni gratuitement un ensemble d'outils et d'API pour permettre le développement de programmes avec Java. Ce kit, nommé JDK, est librement téléchargeable sur le site web d'Oracle :

http://www.oracle.com/technetwork/java/index.html

Le JRE (Java Runtime Environment) contient uniquement l'environnement d'exécution de programmes Java. Le JDK contient lui-même le JRE. Le JRE seul doit être installé sur les machines où des applications Java doivent être exécutées.

Depuis sa version 1.2, Java a été renommé Java 2. Les numéros de version 1.2 et 2 désignent donc la même version. Le JDK a été renommé J2SDK (Java 2 Software Development Kit) mais la dénomination JDK reste encore largement utilisée, à tel point que la dénomination JDK est reprise dans la version 5.0. Le JRE a été renommé J2RE (Java 2 Runtime Environment).

Trois plate-formes d'exécution (ou éditions) Java sont définies pour des cibles distinctes selon les besoins des applications à développer :

Java Standard Edition (J2SE / Java SE) : environnement d'exécution et ensemble complet d'API pour des applications de type desktop. Cette plate-forme sert de base en tout ou partie aux autres plate-formes
Java Enterprise Edition (J2EE / Java EE) : environnement d'exécution reposant intégralement sur Java SE pour le développement d'applications d'entreprises
Java Micro Edition (J2ME / Java ME) : environnement d'exécution et API pour le développement d'applications sur appareils mobiles et embarqués dont les capacités ne permettent pas la mise en oeuvre de Java SE
La séparation en trois plate-formes permet au développeur de mieux cibler l'environnement d'exécution et de faire évoluer les plate-formes de façon plus indépendante.

Avec différentes éditions, les types d'applications qui peuvent être développées en Java sont nombreux et variés :

Applications desktop
Applications web : servlets/JSP, portlets, applets
Applications pour appareil mobile (MIDP) : midlets
Applications pour appareil embarqué (CDC) : Xlets
Applications pour carte à puce (Javacard) : applets Javacard
Applications temps réel
Sun fournit le JDK, à partir de la version 1.2, pour les plate-formes Windows, Solaris et Linux.

La version 1.3 de Java est désignée sous le nom Java 2 version 1.3.

La version 1.5 de Java est désignée officiellement sous le nom J2SE version 5.0.

La version 6 de Java est désignée officiellement sous le nom Java SE version 6.

La documentation au format HTML des API de Java est fournie séparément. Malgré sa taille, cette documentation est indispensable pour obtenir des informations complètes sur toutes les classes fournies. Le tableau ci-dessous résume la taille des différents composants selon leur version pour la plate-forme Windows



Les technologies Java évoluent au travers du JCP (Java Community Process). Le JCP est une organisation communautaire ouverte qui utilise des processus établis pour définir ou réviser les spécifications des technologies Java.

Les membres du JCP sont des personnes individuelles ou des membres d'organisations communautaires ou de sociétés commerciales qui tendent à mettre en adéquation la technologie Java avec les besoins du marché.

Bien que le JCP soit une organisation communautaire ouverte, Oracle (depuis son rachat de Sun Microsystems) est le détenteur des marques déposées autour de la technologie Java et l'autorité suprême concernant les plates-formes Java.

Des membres du JCP qui souhaitent enrichir la plate-forme Java doivent faire une proposition formalisée sous la forme d'une JSR (Java Specification Request). Chaque JSR suit un processus qui définit son cycle de vie autour de plusieurs étapes clés : drafts, review et approval.

Chaque JSR est sous la responsabilité d'un leader et traitée par un groupe d'experts.

Il est possible de souscrire à la liste de diffusion du JCP à l'url : https://jcp.org/en/participation/mail

Cette liste de diffusion permet d'être informé sur les évolutions des JSR et des procédures du JCP et de participer à des revues publiques ou de fournir des commentaires.

Le site du JCP propose une liste des JSR par plates-formes ou technologies :

Java SE : https://jcp.org/en/jsr/tech?listBy=2&listByType=platform
Java EE : https://jcp.org/en/jsr/tech?listBy=3&listByType=platform
Java ME : https://jcp.org/en/jsr/tech?listBy=1&listByType=platform
OSS : https://jcp.org/en/jsr/tech?listBy=3&listByType=tech
JAIN : https://jcp.org/en/jsr/tech?listBy=2&listByType=tech
XML : https://jcp.org/en/jsr/tech?listBy=1&listByType=tech
Une fois validée, chaque JSR doit proposer une spécification, une implémentation de référence (Reference Implementation) et un technology compatibility kit (TCK).

 

 1.3.2. Les différentes versions de Java
 Chaque version de la plate-forme Java possède un numéro de version et un nom de projet.

 A partir de la version 5, la plate-forme possède deux numéros de version :

 Un numéro de version interne : exemple 1.5.0
 Un numéro de version externe : exemple 5.0
 Le nom de projet des versions majeures fait référence à des oiseaux ou des mammifères.

 Le nom de projet des versions mineures concerne des insectes.
