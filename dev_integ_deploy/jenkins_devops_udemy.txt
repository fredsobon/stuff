=== notes sur cours jenkins ci / cd  devops udemy : ===

== introduction : ==
jenkins est un outil de ci (continous integration) et cd (continious delivery) ecrit en java.
C'est un serveur d'automatisation pour le build et deployment d'appli.
une des grandesforces de jenkins est le nombre des plugins dispo.
Dans la pratique on va vetifier et publier le code en declenchant des builds et des tests.
Classiquement on va pousser notre code dans notre outil de versioning de code (git ..), ce code sera ensuite buildé et tester par jenkins.
NB :jenkins ne merge pas le code et ne resoud pas les conflits : cela reste a la charge du dev.
L'avantage est de pouvoir fixer imédiatement les erreurs apres les erreurs de builds : le code est encore frais dans la tête.
Il est possible de publier chaque commit par un build .

on va donc pouvoir améliorer le SDLC : software developement life cycle. (le fait de produire du code sur les envs dev/test/qa/prod ..par ex)

dev ->  build                   ->  tests                 ->   releases -> deploy / provision ->  customer
        features                    unit tests                 package                        
        master branches             integration tests
        compile                     regression tests 
                                    user acceptance tests (uat) 
                                    ...

== installation : ==
on va utiliser une vm vagrant dans laquelle on va installer docker 

vagrant 
 $ vagrant init 
 $ vagrant up
 $ vagrant ssh
puis en root sur notre vm :

apt-get update && apt-get upgrade -y
apt-get install docker.io 
systemctl enable docker
systemctl start docker
ps fauxw |grep docker
root@ubuntu-xenial:~# usermod -aG docker ubuntu


# run jenkins :

on recupere un docker contenant jenkins : https://hub.docker.com/_/jenkins/ :on a ici le repo officiel du docker jenkins : 
docker pull jenkins  
puis on applique les settings suivants :
mkdir -p /var/jenkins_home
chown -R 1000:1000 /var/jenkins_home


docker run -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -d --name jenkins jenkins
on lance donc ici le container jenkins downloader (docker run jenkins en s'assurant que le port 8080 est bien exposé, et on mappe le volume /var/jenkins_home de notre container sur le repertoire qu'on a créer précédemment. ) 
 

NB : dans notre cas comme on est sur une vm vagrant on va rediriger le port jenkins pour cela on ajoute dans notre ficher Vagrantfile à la racine de notre projet :
 config.vm.network "forwarded_port", guest: 8080, host: 8181

pour pouvoir attaquer  depuis notre navigateur notre jenkins via :
http://localhost:8181


on doit pouvoir acceder à jenkins via notre navigateur : normalement sur une install "normale" :
curl -I http://ip:8080

on arrive sur une page qui nous demande de saisir le mdp setté dans la conf jenkins :

root@ubuntu-xenial:~# cat /var/jenkins_home/secrets/initialAdminPassword 
blabllasdqsdqdqsdq


on saisit le mdp puis on choisis select installed plugins.

on cree un nouveau user pour l'administration de jenkins :

admin
admin

puis on valide : la premiere page de jenkins apparait.


== build et deployment d'une premiere application via la gui :  ==

pour l'exemple une appli node.js va être utilisée :
javascript runtime, cross platform et executée coté server 
la force est la reactivité car ce langage implemente des events asynchrones : ex peut retourner immédiatement le resultat d'une requette a un client et en asynchrone update la db : ce qui prend plus de temps.
pour notre exemple celasera parfait car le projet est tres simple à comprendre, prend peu de ressources et ne requiert pas de temps de compilation comme pour java.
cet exemple pourra servir de bonne base pour un gros projet.

- Comment build une appli node.js :

-> installer les dependances :downloade et installer tous les compoasants npm install
-> tester tous les cas npm tests : ex si un test echoue : le build failed et les devs sont notifiés.

une fois que c'est ok il va falloir packager pour déployer 

-> package :

on va pouvoir utiliser docker : creer un container qui contiendra tous nos binaires, codes etc ...
on peut preferer cette methode plutot que faire un tgz de toute notre appli et ses dependances .
On s'assure dans ce cas que le comportement est identique quelque soit l'environement sur lequel on travail (dev/prod ...)

-> distribution :
on va pouvoir ensuite mettre a dispo sur un repo (registry, hub docket public ..etc) notre container.


- tuto :

le code de l'appli est dispo sur le repos :
https://github.com/wardviaene/docker-demo

1 / via la gui :
on va pour commencer configurer notre appli via la gui.

pour notre projet il va falloir installer des dépendances node js : il faut donc installer un plugin :

depuis la home 
administrer jenkins
gestions des plugins 
> plugins  disponibles : 
on cherche notre plugin :￼	
NodeJS Plugin
on installe sans  redemarrer puis dans la seconde page on clic sur redémarrer ( pas clair ..)

on retourne sur la home :


Avant de configurer notre job on va definir le path de nodejs pour que les binaires soient correctement utilisés par jenkins 
home 
> administration jenkins > gestion global des  outils ->  dans la section NodeJs on clic et on donne le nom nodejs :qui servira d'alias pour notre env dans le setting de notre job : on clic sur save .

creer a new job 
-> nodejs_exemple_app
freestyle project : ok

dans la nouvelle page :

dans la section gestion du code on selectionne git 
puis on rentre l'url du code du projet : 
https://github.com/wardviaene/docker-demo.git

on va ensuite selectionner nodejs dans la  section environnement de notre build :
on voit automatiquement que le path est rempli par l'alias qu'on a defini plus tôt dans la conf des outils 

on va ensuite ajouter une action a notre build 
dans la section build on va ajouter un script shell : dans notre cas 
npm install 

qui se chargera d'installer les dependances que l'on a dans le source de notre appli nodejs .
la commande est bien installée et le path bien dispo maintenant pour jenkins.

maintenant on peut sauver notre conf, puis lancer le build via le bouton built now / lancer le build . on peut voir la sortie de console : console output de notre build

on a donc si notre build se passe bien notre app de prete :

on peut aller sur le serveur jenkins et voir que notre appli est bien créee : on a recupérer les sources sur le repo, puis lancer l'install des dependances via notre commande npm install :

root@ubuntu-xenial:/var/jenkins_home/workspace/nodejs_exemple_app# ls
docker-compose.yml  index-db.js  misc          package.json       test
Dockerfile          index.js     node_modules  package-lock.json


t@ubuntu-xenial:/var/jenkins_home/workspace/nodejs_exemple_app# cat  Dockerfile FROM node:4.6
WORKDIR /app
ADD . /app
RUN npm install
EXPOSE 3000
CMD npm start
root@ubuntu-xenial:/var/jenkins_home/workspace/nodejs_exemple_app# cat package.json 
{
  "name": "myapp",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "node index.js",
    "test": "mocha"
  },
  "engines": {
    "node": "^4.6.1"
  },
  "dependencies": {
    "express": "^4.14.0",
    "mysql": "^2.10.2"
  },
  "devDependencies": {
    "mocha": "^3.4.2"
  }
}

Une fois que notre build est pret nous allons pouvoir packager notre appli et enfin la distribuer.

le packaging utilisé pour notre exemple est docker : on va donc builder une image docker avec notre app et uploader cette img sur la registry docker pour la rendre accessible en la publiant.

Nous allons devoir du fait de notre installation de jenkins (elle même dockerisée ) faire des petites bidouilles pour permettre a jenkins (docker) de builder notre app (docker) : une installation jenkins classique ne demande pas ces bidouilles mais ici il va falloir rendre dispo le socket de communication docker  accessible pour jenkins docker et le build de l'image docker .

on va devoir rajouter un plugin à jenkins pour gérer docker 

on relance notre container s'il est eteint 

docker jenkins start 

administration jenkins -> manage plugins -> on recherche docker -> puis on selectionne et on installe le plugin "cloudbees docker build and publish plugin"

on va maintenant nous assurer que docker run sur notre system et puisse permettre a jenkins d'acceder au socket de l'api docker pour builder

on va tout d'abord recupérer une image docker avec la conf necessaire :

root@ubuntu-xenial:~# git clone https://github.com/wardviaene/jenkins-docker 
Cloning into 'jenkins-docker'...
remote: Counting objects: 12, done.
remote: Total 12 (delta 0), reused 0 (delta 0), pack-reused 12
Unpacking objects: 100% (12/12), done.
Checking connectivity... done.
root@ubuntu-xenial:~# ls
jenkins-docker
root@ubuntu-xenial:~# cd jenkins-docker/
root@ubuntu-xenial:~/jenkins-docker# ls
Dockerfile  README.md

on voit ici ce qui est préparé : 

root@ubuntu-xenial:~/jenkins-docker# cat Dockerfile 
FROM jenkins
USER root

RUN mkdir -p /tmp/download && \
 curl -L https://get.docker.com/builds/Linux/x86_64/docker-1.13.1.tgz | tar -xz -C /tmp/download && \
 rm -rf /tmp/download/docker/dockerd && \
 mv /tmp/download/docker/docker* /usr/local/bin/ && \
 rm -rf /tmp/download && \
 groupadd -g 999 docker && \
 usermod -aG staff,docker jenkins

user jenkins

/!\ Attention : dans notre cas une vm vagrant qui heberge le docker jenkins : il va falloir modifier le dockerfile et s'assurer que le bon id de groupe sera donné pour que jenkins ait correctement acces au commande docker.
l'id 999 present dans le dockerfile de base est deja pri par vboxnet . on va donc sette l'id 116 qui correspond au groupe docker sur notre systeme :
groupadd -g 116 docker


On va maintenant builder notre image docker :

root@ubuntu-xenial:~/jenkins-docker# docker build -t jenkins-docker .
Sending build context to Docker daemon 62.46 kB
Step 1/4 : FROM jenkins
 ---> 5fc84ab0b7ad
Step 2/4 : USER root
 ---> Running in fddc0087d5db
 ---> b45ecb5eb46f
Removing intermediate container fddc0087d5db
Step 3/4 : RUN mkdir -p /tmp/download &&  curl -L https://get.docker.com/builds/Linux/x86_64/docker-1.13.1.tgz | tar -xz -C /tmp/download &&  rm -rf /tmp/download/docker/dockerd &&  mv /tmp/download/docker/docker* /usr/local/bin/ &&  rm -rf /tmp/download &&  groupadd -g 999 docker &&  usermod -aG staff,docker jenkins
 ---> Running in b02aea74477f
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 26.5M  100 26.5M    0     0  1207k      0  0:00:22  0:00:22 --:--:-- 1212k
 ---> fdc7e0c6e919
Removing intermediate container b02aea74477f
Step 4/4 : USER jenkins
 ---> Running in 66f9ac6034d4
 ---> d5dee0036c74
Removing intermediate container 66f9ac6034d4
Successfully built d5dee0036c74

on a donc maintenant une nouvelle image docker sur notre systeme qui embarque ce qu'on avait avec jenkins de base mais qui embarque en plus le docker client.
on va pouvoir supprimer l'ancien docker : 
root@ubuntu-xenial:~/jenkins-docker# docker stop jenkins 
jenkins
root@ubuntu-xenial:~/jenkins-docker# docker rm jenkins 
jenkins

le contenu de notre appli est toujours dispo :

root@ubuntu-xenial:~/jenkins-docker# ls /var/jenkins_home/
config.xml                                          jenkins.install.UpgradeWizard.state                        queue.xml.bak
copy_reference_file.log                             jenkins.mvn.GlobalMavenConfig.xml                          secret.key
hudson.model.UpdateCenter.xml                       jenkins.plugins.nodejs.tools.NodeJSInstallation.xml        secret.key.not-so-secret
hudson.plugins.emailext.ExtendedEmailPublisher.xml  jobs                                                       secrets
hudson.plugins.git.GitTool.xml                      logs                                                       tools
hudson.plugins.gradle.Gradle.xml                    nodeMonitors.xml                                           updates
hudson.tasks.Ant.xml                                nodes                                                      userContent
hudson.tasks.Maven.xml                              org.jenkinsci.plugins.docker.commons.tools.DockerTool.xml  users
identity.key.enc                                    org.jenkinsci.plugins.gitclient.JGitApacheTool.xml         war
init.groovy.d                                       org.jenkinsci.plugins.gitclient.JGitTool.xml               workflow-libs
jenkins.CLI.xml                                     plugins                                                    workspace
jenkins.install.InstallUtil.lastExecVersion         queue.xml

on va maintenant lancer notre nouveau container en ajoutant un nouveau volume permettant la communication entre notre docker client et le docker de notre vm via le socket dédié :

docker run -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -d --name jenkins jenkins-docker
93ff834fc5369d6e9f2db67789335d7aae1d031c726ed863ac9892ba633c8647
on voit donc que notre image docker jenkins-docker tourne sous le nom jenkins avec les ports dediés et on voit que le socket /var/run/docker.sock est bien present avec les bons droits settés dans le build : group docker present pour permettrer l'acces au socket pour le client :
t@ubuntu-xenial:~/jenkins-docker# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                                              NAMES
93ff834fc536        jenkins-docker      "/bin/tini -- /usr..."   About a minute ago   Up About a minute   0.0.0.0:8080->8080/tcp, 0.0.0.0:50000->50000/tcp   jenkins
root@ubuntu-xenial:~/jenkins-docker# ls /var/run/docker.sock -l
srw-rw---- 1 root docker 0 Feb 11 03:51 /var/run/docker.sock

on va tester qu'on a bien acces depuis notre container : on lance le container avec bash en argument pour rentrer dedans et on voit que le socket est bien dispo :
root@ubuntu-xenial:~/jenkins-docker# docker exec -it jenkins bash 
jenkins@3988916d20e6:/$ ls -l /var/run/docker.sock 
srw-rw---- 1 root docker 0 Feb 11 03:51 /var/run/docker.sock

on peut donc avoir acces au commande docker depuis notre container et on peut donc builder nos images docker depuis un docker :)
jenkins@3988916d20e6:/$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                              NAMES
3988916d20e6        jenkins-docker      "/bin/tini -- /usr..."   34 seconds ago      Up 33 seconds       0.0.0.0:8080->8080/tcp, 0.0.0.0:50000->50000/tcp   jenkins


on va donc maintenant configurer notre build pour qu'il prenne en compte docker pour le packaging de notre image , et la publication .

on ajoute une etape a notre build apres npm install on ajoute :

"docker build and publish"

on ajoute le nom de notre projet : il faut le creer au prealable sur le hub docker 
docker-nodejs-dummy

on ajoute nos credentials : compte et mdp dans la section registry credentials on sauvegarde
puis on selectionne notre user nouvellement creer dans la liste 

on peut examiner les param avances mais on laisse par defaut :
il peut etre tres important de voir qu'on peut installer docker via ce biai ( nous l'avons fait au prealable sur notre server pour les gestions de partage de socket etc ...)

on sauvegarde et on lance notre build :

on a donc tout le deroulement de notre build au deployment sur la registry :

on voit tout le build se passer notre docker est builder avec l'appli puis pousser sur le hub docker : et on voit le resultat de notre push en direct sur le hub docker

latest  256 MB  4 minutes ago

on va pouvoir  tester depuis n'importe quel pc 
ex :

sudo docker pull fredsobon/docker-nodejs-dummy
on lance le docker en exposant le port 3000 pour notre appli :


sudo docker run -p 3000:3000 --name nodejs-demo fredsobon/docker-nodejs-dummy
npm info it worked if it ends with ok
npm info using npm@2.15.11
npm info using node@v4.6.2
npm info prestart myapp@0.0.1
npm info start myapp@0.0.1

> myapp@0.0.1 start /app
> node index.js

Example app listening at http://:::3000


on peut ouvrir un navigateur et voir le resultat de notre appli :
http://localhost:3000
Hello World! 


== build and publish app - methode via code : ==

L'idee est d'adopter la philosophie devops
on va coder infra as code : pour permettre de versionner, controler le code .
on va pouvoir utiliser un language interne a jenkins un dsl pour faire la conf de nos jobs et on va pouvoir utiliser le jenkins pipeline pour gérer les builds


on va d'abord s'assurer pour travailler avec le dsl de jenkins , s'assurer que le plugin dédié est bien installé :

admin jenkins -> gestion de plugins -> on recherche "jobs" et on selectionnele plugin "job dsl" pour l'installer.
 
on va créer un nouveau projet : "seed project" 
on selectionne un freestyle project

on va importer le code d'un repo git :

https://github.com/wardviaene/jenkins-course

on ajoute un process de build en selectionnant jobs dsl : "process jobs DSLs"

on va rajouter le chemin contenant la description de notre job en dsl (present sur notre systeme une fois le repo cloné) 

job-dsl/nodejs.groovy
puis on sauvegarde notre conf 
on va maintenant lancer notre  build qui va se finir par une erreur :

"Processing DSL script nodejs.groovy
ERROR: script not yet approved for use
Finished: FAILURE"

c'est un mecanisme de protection car le script doit être approuvé :

on retourne dans la config de jenkins et dans la section In-process Script Approval on va qu'on a un script a valider : 

In-process Script Approval
Allows a Jenkins administrator to review proposed scripts (written e.g. in Groovy) which run inside the Jenkins process and so could bypass security restrictions. 1 scripts pending approval.

On peut examiner le script : on voit donc la source du script qui vient de github, le schedule de build : toutes les 5 minutes lors d'un changement de conf , on voit ensuite que l'appli utilise du nodejs en "wrapper" et on remarque que le nom nodejs que l'on a sette en tout debut dans la gui est recupérer ici pour le dsl,  on voit finalement dans la section step la commandenpm install :



job('NodeJS example') {
    scm {
        git('git://github.com/wardviaene/docker-demo.git') {  node -> // is hudson.plugins.git.GitSCM
            node / gitConfigName('DSL User')
            node / gitConfigEmail('jenkins-dsl@newtech.academy')
        }
    }
    triggers {
        scm('H/5 * * * *')
    }
    wrappers {
        nodejs('nodejs') // this is the name of the NodeJS installation in 
                         // Manage Jenkins -> Configure Tools -> NodeJS Installations -> Name
    }
    steps {
        shell("npm install")
    }
}

on va cliquer sur approuver le script, on retourne dans la section de notre projet et on relance un build.
on voit que le build est ok et que sur la sortie on a la creation d'un job :

Processing DSL script nodejs.groovy
Added items:
    GeneratedJob{name='NodeJS example'}
Finished: SUCCESS

on voit sur la home de nos projets maintenant l'apparition de "NodeJS example" en nouveau job.
Si on relance le build on voit sur la sortie console que ce job existe déja et donc que jenkins ne le recrée pas :

Existing items:
    GeneratedJob{name='NodeJS example'}
Finished: SUCCESS

si on examine la conf du job en gui : on retrouve ce qui a été défini dans le script dsl .
on va lancer le build de notre job puis on va verifier en ssh sur notre serveur la presence de notre build dans le workspace de notre docker :

root@ubuntu-xenial:/var/jenkins_home/workspace# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                              NAMES
3988916d20e6        jenkins-docker      "/bin/tini -- /usr..."   5 hours ago         Up 5 hours          0.0.0.0:8080->8080/tcp, 0.0.0.0:50000->50000/tcp   jenkins
root@ubuntu-xenial:/var/jenkins_home/workspace# docker exec -it 3988916d20e6 bash
jenkins@3988916d20e6:/$ ls -l /var/jenkins_home/workspace/NodeJS\ example/
total 56
-rw-r--r--  1 jenkins jenkins    80 Feb 11 09:50 Dockerfile
-rw-r--r--  1 jenkins jenkins   356 Feb 11 09:50 docker-compose.yml
-rw-r--r--  1 jenkins jenkins  1055 Feb 11 09:50 index-db.js
-rw-r--r--  1 jenkins jenkins   325 Feb 11 09:50 index.js
drwxr-xr-x  2 jenkins jenkins  4096 Feb 11 09:50 misc
drwxr-xr-x 91 jenkins jenkins  4096 Feb 11 09:50 node_modules
-rw-r--r--  1 jenkins jenkins 23925 Feb 11 09:50 package-lock.json
-rw-r--r--  1 jenkins jenkins   298 Feb 11 09:50 package.json
drwxr-xr-x  2 jenkins jenkins  4096 Feb 11 09:50 test

on a bien la presence de notre build .
on va chercher la presence de binaire nodejs :
jenkins@3988916d20e6:/$ find ~ -name nodejs
/var/jenkins_home/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/nodejs
/var/jenkins_home/plugins/nodejs
/var/jenkins_home/plugins/nodejs/META-INF/maven/org.jenkins-ci.plugins/nodejs

 on fait ensuite un export de notre PATH pour avoir les binaires à dispo :

jenkins@3988916d20e6:/$ export PATH=$PATH:/var/jenkins_home/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/nodejs/bin
jenkins@3988916d20e6:/$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/var/jenkins_home/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/nodejs/bin

on va dans workspace de notre appli et on la lance . tout est ok :
jenkins@3988916d20e6:/$ cd /var/jenkins_home/workspace/NodeJS\ example/
jenkins@3988916d20e6:~/workspace/NodeJS example$ npm start

> myapp@0.0.1 start /var/jenkins_home/workspace/NodeJS example
> node index.js

Example app listening at http://:::3000


on peut relancer un docker et recupérer le resultat de notre requette :

root@ubuntu-xenial:~# docker exec -it 3988916d20e6 bash
jenkins@3988916d20e6:/$ curl http://localhost:3000
Hello World (v1.0.2)!jenkins@3988916d20e6:/$ 

ou directement :
root@ubuntu-xenial:~# docker exec -it 3988916d20e6 curl http://localhost:3000
Hello World (v1.0.2)!root@ubuntu-xenial:~# 


on va maintenant créer un nouveau job qui va permettre de créer l'image docker et la pousser sur le hub :


on va se baser sur le fichier : nodejsdocker.groovy du repo git clone  https://github.com/wardviaene/jenkins-course

on voit que le debut du job est identique : on defini le repo git, le trigger , le wrapper .On va cette fois en action definir un build d'image docker et on va specifier le numero de tag de notre repo en version :

cat nodejsdocker.groovy

job('NodeJS Docker example') {
    scm {
        git('git://github.com/wardviaene/docker-demo.git') {  node -> // is hudson.plugins.git.GitSCM
            node / gitConfigName('DSL User')
            node / gitConfigEmail('jenkins-dsl@newtech.academy')
        }
    }
    triggers {
        scm('H/5 * * * *')
    }
    wrappers {
        nodejs('nodejs') // this is the name of the NodeJS installation in 
                         // Manage Jenkins -> Configure Tools -> NodeJS Installations -> Name
    }
    steps {
        dockerBuildAndPublish {
            repositoryName('wardviaene/docker-nodejs-demo')
            tag('${GIT_REVISION,length=9}')
            registryCredentials('dockerhub')
            forcePull(false)
            forceTag(false)
            createFingerprints(false)
            skipDecorate()
        }
    }
}

on voit la variable GIT_REVISION utilisée dans notre dsl de job :
tag('${GIT_REVISION,length=9}')
on voit qu'on va aussi gérer nos credentials etc ...

on va modifier la conf pour faire pointer sur notre docker hub : fredsobon/docker-nodejs-dummy

on a toute la doc nécéssaire sur la gestion dsl de jenkins : 

http://jenkinsci.github.io/job-dsl-plugin/


on peut chercher dans la page docker : et on voit par exemple pour la section dockerBuildAndPublish des infos :

dockerBuildAndPublish
Requires CloudBees Docker Build and Publish plugin v1.2+ Since 1.39
dockerBuildAndPublish {}
Builds and pushes a Docker based project to the Docker registry.
Examples
job('example') {
    steps {
        dockerBuildAndPublish {
            repositoryName('example/project-a')
            tag('${BUILD_TIMESTAMP}-${GIT_REVISION,length=7}')
            registryCredentials('docker-hub')
            forcePull(false)
            createFingerprints(false)
            skipDecorate()
        }
    }
}

on voit donc que ce site est la reference si on veut gérer nos jobs en dsl 

on va donc modifier notre projet precedent :
et ajouter le fichier suivant dans notre projet : pour continuer apres le build de notre appli et packager et publier notre app dans un docker sur le hub :


job-dsl/nodejsdocker.groovy


on va ajouter des credentials :

notre user /mdp du hub docker et en ajoute dans la section credentials : dockerhub

qui sera donc utiliser par jenkins comme variable non exposée : on peut ajouter une description pour faciler la lecture en cas de nombreux users.

on relance notre build : comme precedemment se sera un echec : car il faudra approuver le script  nodejsdocker.groovy : une fois fait on relance le build et c'est ok.

on voit qu'on a un nouveau job : NodeJS Docker example
de creee : si on examine sa conf on voit tous les param definis en dsl 

 
on lance le build :

et on voit quand c'est fini sur le hub docker l'arrivée d'un nouveau container flaggué avec le tag du git :

06747d8e1     259 MB     2 minutes ago


on va pouvoir recupérer le container et l'executer en exposant le port 3000 

root@ubuntu-xenial:~# docker run -p 3000:3000 --name nodejs-demo fredsobon/docker-nodejs-dummy
npm info it worked if it ends with ok
npm info using npm@2.15.11
npm info using node@v4.6.2
npm info prestart myapp@0.0.1
npm info start myapp@0.0.1

> myapp@0.0.1 start /app
> node index.js

Example app listening at http://:::3000


si on lance le docker dans notre vm : on pourra grace à une redirection de port dans le Vagrantfile interroger via notre machine host en curl ou via navigateur :

https://localhost:3001 

Hello World (v1.0.2)!

en supposant que le port sur notre machine est le 3001 :

  config.vm.network "forwarded_port", guest: 3000, host: 3001


== jenkins pipelines : ==

les pipelines vont permettre d'ecrire sous forme de code les etapes de builds.
-> le build (compilation) , les tests et le deployment du code sur differents serveurs.
-> le code va  permettre le versionning des ces etapes.

on retrouve l'automatisation de la chaine suivante :

devloper -> build -> tests -> releases -> deploy / provisionning -> customer

les pipelines jenkins permettent comme les jobs en dsl d'ecrire notre ci / cd sous forme de code . La difference reside dans l'implementation au sein de jenkins.

-> les jobs en dsl : créent des NOUVEAUX jobs basés sur notre code.
-> les pipelines jenkins sont un type de job : on peut créer un pipeline jenkins qui va gérer le build, le test et le deployment de notre code pour un projet.

On peut créer des jobs pipeline avec du code dsl
Jusqu'a maintenant on a toujours créer des job freestyle avec notre dsl.
Il est possible aussi d'utiliser un mode "organisation de projet" qui permet dans une conf pipelines jenkins de detecter les differents projet de code et de pouvoir se passer dans certains cas de creation de nouveau jobs.

Les differentes methodes serviront la même finalités mais il est important de savoir qu'il existe différentes manière de realiser nos taches en fonction de nos besoins relatifs à nos projets.


= jenkins pipelines :
type de jobs pouvant être créer en ui ou en dsl.
on peut ecrire le pipeline en jenkins dsl (declarative pipeline ) ou en groovy ( scripted pipeline ). le groovy est un language de scripting de la plateforme java qui tourne dans une jvm 
Il faut savoir que le jenkins dsl est de toute facon interpreté en groovy.

exemple de pipelines :

on va dans cet exemple montrer l'utilisation de maven qui est un outil de build (comme nodejs) 

plusieurs section sont importantes dans la declaration de notre pipeline :

-> node : la definition du node / serveur  sur lequel le job va se derouler 
-> def : definition de variable qui serviront pour le build de notre projet
-> stages : les diffrentes etapes de build ex :preparation , build, results : on a conceptuellement trois bloc de code distincts dans le cas des trois stages precedents
Ces stages sont utilisés par differents plugins jenkins pour visualiser les  differents jobs.

on peut avoir classiquement une chaine comme la suivante : clean -> build -> test -> publish

exemple concret avec le docker nodes js 

on va trouver dans le repertoire misc du repo https://github.com/wardviaene/docker-demo.git 
un fichier Jenkinsfile qui va contenir notre code de pipeline :

on reconnait les differentes sections : node et les trois stages comprenant chacun les etapes a realiser ( on renseigne les informations correctes ici les infos du docker hub ) .on voit que le build peut se faire sur tous les nodes . On defini une variable : def commit_id qui sera utilisée  cette variable n'est pas exposée naturellement quand on cree un job pipeline : 

node {   <<<<< pas de definition precise : le build peut se faire sur tous les nodes 
   def commit_id  <<<<< on defini une variable : le commit id 
   stage('Preparation') {  <<<<< definition de notre premier stage 
     checkout scm   <<<<< on recupere le code de notre repo 
     sh "git rev-parse --short HEAD > .git/commit-id"    <<<<< on recupere le numero de commit qu'on va mettre dans un fichier temporaire                    
     commit_id = readFile('.git/commit-id').trim()      <<<<< on associe notre variable commit_id avec le contenu du fichier qui contient le num de commit trouvé precedemment. la commande trim a la fin va s'assurer de supprimer tous les caracteres vides potentiellement dans notre fichier.
   }
   stage('test') {   <<<<< second stage 
     nodejs(nodeJSInstallationName: 'nodejs') {    <<<<< on va s'assurer que l'execution de nodejs se fera bien en donnant le nom referencant nodejs (ce qu'on a fait au tout début en ui )
       sh 'npm install --only=dev'    <<<<< ici on va gerer l'installation des paquets npm uniquement de la version dev : c'est la reference qu'on trouve dans le fichier package.json avec le flag devDependencies :seul le paquet "mocha" sera installé ( voir plus bas pour le detail du fichier.
       sh 'npm test'   <<<<< on a ensuite une commande de test qui va executé la commande mocha   comme on le voit dans le fichier package.json  "test": "mocha"
     }  cette commande va créer un test  voir plus  bas.
   }
   stage('docker build/push') {  <<<< on va maintenant passer a notre build 
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {   <<<<< on definie la registry standart docker suivi des credentials definies avant dans la ui 
       def app = docker.build("fredsobon/docker-nodejs-dummy:${commit_id}", '.').push()    <<<<< on va ensuite builder et pousser le docker dans le path final de la registry pn ajoute le commit_id  
     }
   }
}




 ~/Documents/lab/jenkins/docker-demo  ⑂ master  $  cat package.json 
{
  "name": "myapp",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "node index.js",
    "test": "mocha"
  },
  "engines": {
    "node": "^4.6.1"
  },
  "dependencies": {
    "express": "^4.14.0",
    "mysql": "^2.10.2"
  },
  "devDependencies": {
    "mocha": "^3.4.2"
  }
}

ex de la commande test qui va utiliser mocha :
test.js
 ~/Documents/lab/jenkins/docker-demo  ⑂ master  $  cat test/test.js 
var assert = require('assert');
describe('Array', function() {
  describe('#indexOf()', function() {
    it('should return -1 when the value is not present', function() {
      assert.equal(-1, [1,2,3].indexOf(4));
    });
  });
});



on va créer le job maintenant dans jenkins :

new project : nodejs_docker_pipeline

on va selectionner dans la section pipeline 
pipeline script from scm
> on choisit git 
> on rentre l'url du repo :
https://github.com/wardviaene/docker-demo.git
on rajoute le chemin complet du jenkinsfile :
misc/Jenkinsfile 
on sauvegarde et  on lance le build 

Nb : dans notre cas on va proceder un peu differemment : comme on recupere le code depuis le repo github  de https://github.com/wardviaene/docker-demo.git : on ne peut pas pousser sur notre docker hub :puisque le Jenkinsfile est rececrit meme si on le modifie a chaque build ( le repo est toujours pull )

on change notre pipeline :
on defini un pipeline script 
on supprime le premier stage qui recupere le code du repo et ecrase donc notre Jenkinsfile
on defini un num de commit_id manuellement comme on a supprimer le stage concernant le num de commit  
on modifie le Jenkinsfile : on renseigne notre repo 
node {
   def commit_id
   stage('test') {
     nodejs(nodeJSInstallationName: 'nodejs') {
       sh 'npm install --only=dev'
       sh 'npm test'
       commit_id=777
     }
   }
   stage('docker build/push') {
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
       def app = docker.build("fredsobon/docker-nodejs-dummy:${commit_id}", '.').push()
     }
   }
}
 
on a donc deux steps et le build se passe nickel : 

[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS


on a donc denouveau une nouvelle version de notre docker sur le hub :
on a juste un tag a 777 car la version du commit_id n'a pas ete défini ( on a supprimé l'etape permettant de l'identifier )
777   258 MB   6 minutes ago



=== build / test avec docker pipeline ==

le docker pipeline permet de build des dockers mais en lancer des existants : on peut donc build et test tout nos composants avec des containers exitants.
puis build et publier le container final quand tout est ok.
une fois que tout nos tests sont fait ont peut supprimer le container ..

on va pouvoir executer nos tests dans un nouveau container 
on examine la conf dans le fichier misc/Jenkinsfile.v2 du repo docker-demo :

on retrouve des steps prcedent : preparation et docker build/push stages mais on a des etapes en plus :
on va pouvoir utiliser plusieurs versions de nodejs : dans la conf globale des plugins jenkins ont avait choisi la dernieres version mais il est possible de choisir differentes versions pour differents projets.


cat misc/Jenkinsfile.v2 
node {
   def commit_id
   stage('Preparation') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"
     commit_id = readFile('.git/commit-id').trim()
   }
   stage('test') {
     def myTestContainer = docker.image('node:4.6') <<<<<<< ici on va vouloir utiliser un container de test qui va être une image docker de nodejs en versin 4.6
     myTestContainer.pull()   <<<<<<< on va ici s'assurer de tirer le latest container en verision 4.6 de nodejs
     myTestContainer.inside {    <<<< ensuite on relance comme precedemment les commandes pour le test dans notre container (inside) une fois que ces commandes sont passées le container est detruit 
       sh 'npm install --only=dev'
       sh 'npm test'
     }
   }
   stage('test with a DB') {   <<<<< on cree un nouveau stage dans lequel on veut une db mysql avec notre nodejs
     def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes --rm")   <<<<< on recupere un docker mysql ( pas de version precisée ) et on execute la commande  MYSQL_ALLOW_EMPTY_PASSWORD=yes qui autorise les connections sans mdp , on passe ensuite le --rm qui supprime le container une fois le stage fait.
     def myTestContainer = docker.image('node:4.6')
     myTestContainer.pull()
     myTestContainer.inside("--link ${mysql.id}:mysql") { // using linking, mysql will be available at host: mysql, port: 3306  <<<<<< ici on va linker le container myTestContainer avec le container mysql en recuperant l'id du container mysql et le rendant dispo sous le nom mysql 
          sh 'npm install --only=dev' 
          sh 'npm test'                     
     }                                   
     mysql.stop()     <<<<<< ici on arrête le service mysql manuellement car jenkinsne sait pas le faire naturellement .
   }                                     
   stage('docker build/push') {            
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
       def app = docker.build("wardviaene/docker-nodejs-demo:${commit_id}", '.').push()
     }                                     
   }                                       
} 


pour notre test on execute une premiere fois le build : qui tombe en echec : on modifie le jenkinsfile.v2 en renseigant les bonnes infos du hub docker et on supprime le stage de preparation :



 node {
   def commit_id
   stage('test') {
     def myTestContainer = docker.image('node:4.6')
     myTestContainer.pull()
     myTestContainer.inside {
       sh 'npm install --only=dev'
       sh 'npm test'
     }
   }
   stage('test with a DB') {
     def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes") 
     def myTestContainer = docker.image('node:4.6')
     myTestContainer.pull()
     myTestContainer.inside("--link ${mysql.id}:mysql") { // using linking, mysql will be available at host: mysql, port: 3306
          sh 'npm install --only=dev' 
          sh 'npm test'
          commit_id=7777
     }                                   
     mysql.stop()
   }                                     
   stage('docker build/push') {            
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
       def app = docker.build("fredsobon/docker-nodejs-dummy:${commit_id}", '.').push()
     } 
  }
}


on lance le build est c'est ok .
on a bien un container de tag 7777 sur le docker hub :
7777  256 MB   a few seconds ago



