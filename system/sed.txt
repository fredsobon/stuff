####### sed #####

Fichier de reference : geekstuff :
ex employee :
101,John Doe,CEO
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales Manager

sed [options] {sed-commands} {input-file}

Sed lit chaque ligne une a une depuis son entree standard (pipe ou file) et execute les commandes sur une ligne particuliere.

# commande basiques/ options :

*Lecture du fichier :
 sed -n 'p' /etc/passwd
*  script : -f (file)

Enregistrement des commandes via un fichier : modele servant a saisir plus facilement de nombreuses commandes via un appelà un script externe :

cat sed-script.test 
/^root/ p
/^boogie/ p


sed -n -f sed-script.test /etc/passwd
root:x:0:0:root:/root:/bin/bash
boogie:x:1000:1000:boogie,,,:/home/boogie:/bin/bash
boogie@x61:~/lab/awk_sed/sed$ 

* Multiples commandes : -e (execute)

sed -n -e '/^root/ p' -e '/^boogie/ p' /etc/passwd


* Multi lignes commandes : {} 

sed -n '{
/^root/ p
/^boogie/ p
}' /etc/passwd
root:x:0:0:root:/root:/bin/bash
boogie:x:1000:1000:boogie,,,:/home/boogie:/bin/bash

/!\ Sed ne modifie jamais le fichier original : il redirige juste son execution vers la sortie standart. Pour enregistrer les modifs dans un fichier il faut saisir directement la redirection vers " > fichier.dest " 

Sed utilise la sequence : REPR : Read Execute Print Repeat
-> Read : lecture de la ligne dans un "pattern space"
-> Execution des commandes dans le pattern space
-> Print : affichage du resultat ET vidage du pattern space 
-> Repeat : recommence a la ligne suivante et jusqu'a la fin du fichier.

- Commande p print pattern space.
par defaut sed affiche sur la sortie standart .le p permet de controller precisement se que l'on veut sur la sortie sandart . Il est utiliser conjointement avec "-n" qui va neutraliser la sortie standart de sed : sans quoi de base on aurait l'affichage en double sur notre sortie : "sed" de base + "p".

On peut donc preciser les lignes que l'on veut afficher .Ex :


-affichage de la ligne 1 du fichier /etc/passwd :
sed -n '1p' /etc/passwd
root:x:0:0:root:/root:/bin/bash

-affichage d'un interval de lignes :

sed -n '2,4p' /etc/passwd
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin


- affichage de la ligne 1 et 2 puis de la ligne 5 du fichier passwd :

sed -n -e '1,2p' -e '5p' /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
 
- On peut biensur utiliser les regexps pour filtrer notre affichage :
Ici on affiche de la troisième ligne du fichier à la fin : 

cat employee  |sed -n '3,$ p'
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales Manager
 
Les intervalles de ligne peuvent donc être spécifiés avec : "," (n,m) mais aussi avec les charactères "+" et "~" :

- "+" : permet de definir le nombre de ligne que l'on veut imprimer à partir de notre premier interval :
Ici on imprime la première ligne suivi de 2 autres lignes : 
cat employee  |sed -n '1,+2 p'
101,John Doe,CEO
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin

- "~"  : va permettre d'exclure un nombre défini de lignes .

Exemple : ici on va afficher toutes les lignes impaires ( on commence à la première puis on affiche une ligne sur deux : 
boogie@x61:~/lab/awk_sed/sed$ cat employee  |sed -n '1~2 p'
101,John Doe,CEO
103,Raj Reddy,Sysadmin
105,Jane Miller,Sales Manager

Ici on affiche que les lignes paires : 
boogie@x61:~/lab/awk_sed/sed$ cat employee  |sed -n '2~2 p'
102,Jason Smith,IT Manager
104,Anand Ram,Developer

On affiche une ligne sur quatre comme ceci : 
cat employee  |sed -n '1~4 p'
101,John Doe,CEO
105,Jane Miller,Sales Manager

Comme on peut sélectionner le numéro de ligne que l'on veut afficher , on peut selectionner une pattern à afficher.
Ex :
cat employee |sed -n '/Sysadmin/ 'p
103,Raj Reddy,Sysadmin

On peut combiner les deux : selectionner un pattern et une ligne particulière : 
Ex : ici on affiche la ligne contenant le pattern 'sysadmin' et la premiere ligne du fichier : 
cat employee |sed -n -e '/Sysadmin/ p' -e '1 p'
101,John Doe,CEO
103,Raj Reddy,Sysadmin

On remarque que sed evalue les instructions avant de les afficher : il affiche ici la premiere ligne avant la ligne contenant le pattern "sysadmin" .

On peut afficher la ligne contenant un pattern jusqu'à la fin du fichier :
cat employee |sed -n -e '/Dev/,$ p'
104,Anand Ram,Developer
105,Jane Miller,Sales Manager

Un intervalle de pattern : 

cat employee |sed -n -e '/Sysadmin/, /Dev/ p'
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer

-Commande "delete" :

On peut supprimer des lignes avec sed. Comme avec les differentes commandes : cette suppression ne ce fait que sur l'affichage standart ( le fichier original n'est pas modifié.)

Ex : ici on supprime la troisième ligne du fichier : 

cat employee  |sed '3 d'
101,John Doe,CEO
102,Jason Smith,IT Manager
104,Anand Ram,Developer
105,Jane Miller,Sales Manager

Idem qu'avec print : on peut supprimer un intervalle de ligne : 
cat employee  |sed '3,$ d'
101,John Doe,CEO
102,Jason Smith,IT Manager

On peut supprimer une ligne contenant un certain pattern 
cat employee  |sed '/Developer/ d'
101,John Doe,CEO
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
105,Jane Miller,Sales Manager

On peut egalement supprimer un intervalle compri entree deux pattern détectés :

cat employee  |sed '/Sysadmin/,/Sales/ d'
101,John Doe,CEO
102,Jason Smith,IT Manager


On peut supprimer grace aux regexp les lignes vides et les lignes commencent par un commentaire.Ex :

cat cgi.cfg |sed -e '/^$/d' -e '/^#/d'


-Commande 'Write' :
on peut rediriger nos champs filtrés dans un fichier txt avec la commande w :
On doit comme d'habitude utiliser l'option "-n" pour bypasser l'affichage standart de sed.Ex :
Ici on  va écrire dans un fichier les lignes contenant le pattern 'Sys' 

cat employee |sed -n '/Sys/w file.txt'
boogie@x61:~/lab/awk_sed/sed$ cat file.txt 
103,Raj Reddy,Sysadmin

Il est biensur possible d'ecrire un interval de ligne.Ex :
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n '3,5 w number.txt'
boogie@x61:~/lab/awk_sed/sed$ cat number.txt 
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales Manager
Idem pour un interval de texte selectionné.Ex :
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n '/Sys/,/Dev/  w filter.txt'
boogie@x61:~/lab/awk_sed/sed$ cat filter.txt 
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
Idem il est tout a fait possible de filtrer un pattern puis d'ecrire le nombre de ligne déterminé suivant ce pattern. Ex : on cherche 'Sys' puis on imprime deux lignes à partir de Sys dans un fichier. Parfait pour des blocks de texte à modifier :

boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n '/Sys/,+2 w match.txt'
boogie@x61:~/lab/awk_sed/sed$ cat match.txt 
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales Manager

# Substitute :

la puissance de sed s'exprime particulièrement dans le remplacement de chaines.

sed '[address-range|pattern-range] s/original-
string/replacement-string/[substitute-flags]' inputfile

l'intervalle de ligne ou la selection de pattern sont optionnels : par defaut sed agira sur tout le fichier.

boogie@x61:~/lab/awk_sed/sed$ cat employee |sed 's/Developer/devops/'
101,John Doe,CEO
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
104,Anand Ram,devops
105,Jane Miller,Sales Manager

On peut indiquer à sed de n'agir qu'a certaines conditions

-sur presence de pattern : ici on remplace la chaine Manager que sur les lignes contenant le terme "Sales" : 
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed '/Sales/s/Manager/Lapin/'
101,John Doe,CEO
102,Jason Smith,IT Manager
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales Lapin
boogie@x61:~/lab/awk_sed/sed$ 

-A une ligne déterminée :
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed '2 s/Manager/Lapin/'
101,John Doe,CEO
102,Jason Smith,IT Lapin
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales Manager

Par defaut sed n'agit que sur la premiere occurence de la chaine à remplacer sur une ligne.
Ex : ici on demande de remplacer le "a" par un "A" :

boogie@x61:~/lab/awk_sed/sed$ cat employee |sed 's/a/A/'
101,John Doe,CEO
102,JAson Smith,IT Manager
103,RAj Reddy,Sysadmin
104,AnAnd Ram,Developer
105,JAne Miller,Sales Manager

On s'apercoit que seules les premiers "a" sont modifiés.
Pour avoir une substitution globale : il faut ajouter le flag "g" en fin d'expression.
Ex :
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed 's/a/A/g'
101,John Doe,CEO
102,JAson Smith,IT MAnAger
103,RAj Reddy,SysAdmin
104,AnAnd RAm,Developer
105,JAne Miller,SAles MAnAger

On peut au contraire decider de ne changer la chaine de caractère qu'à une position donnée.
Ex : ici on va modifier la "a" en "Z" uniquement sur la troisieme occurence de chaque ligne du fichier :
boogie@x61:~/lab/awk_sed/sed$ cat employee  |sed 's/a/Z/3'101,John Doe,CEO
102,Jason Smith,IT ManZger
103,Raj Reddy,Sysadmin
104,Anand Ram,Developer
105,Jane Miller,Sales MZnager

On peut biensur cumuler les substitutions avec la commande "-e" :
boogie@x61:~/lab/awk_sed/sed$ cat employee  |sed -e 's/a/Z/3' -e 's/y/Y/g'
101,John Doe,CEO
102,Jason Smith,IT ManZger
103,Raj ReddY,SYsadmin
104,Anand Ram,Developer
105,Jane Miller,Sales MZnager

On peut egalement n'afficher que la ligne affectée par le changement avec le flag "-n" . EX : on change la ligne contenant le pattern 'Sysadmin par 'DevOps' et on affiche que cette ligne :
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n 's/Sysadmin/DevOps/p'
103,Raj Reddy,DevOps

On peut également cumuler tous les filtres : affichage uniquement de la modif faite uniquement sur une chaine située à unecertaine position dans le fichier.Ex : affichage du dchangement de "a" en "Z" situé en deuxieme position :
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n 's/a/Z/2p'102,Jason Smith,IT MZnager
103,Raj Reddy,SysZdmin
104,Anand RZm,Developer
105,Jane Miller,SZles Manager

La même chose mais en se focalisant uniquement sur la seconde ligne :
boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n '2 s/a/Z/2p'
102,Jason Smith,IT MZnager

On peut directement rediriger notre filtre dans un fichier. Ex: 

boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n '2 s/a/Z/wline2-a.txt'
boogie@x61:~/lab/awk_sed/sed$ cat line2-a.txt 
102,JZson Smith,IT Manager


- Ignore case : "i" :

Il est tout a fait possible d'effectuer les substitutions en ignorant la casse du pattern. Ex :
Ici nous allons modifier le pattern "sysadmin ou Sysadmin" par DEVOPS :
Dans un premier temps on ne passe pas le flag "i" : pas de modif (puisque notre fichier original ne contient qu'un "S"ysadmin :
boogie@x61:~/lab/awk_sed/sed$ cat employee  |sed -n 's/sysadmin/DEVOPS/p'
Le flagg 'i' nous permet de voir le resultat du filtrage : 

boogie@x61:~/lab/awk_sed/sed$ cat employee  |sed -n 's/sysadmin/DEVOPS/ip'
103,Raj Reddy,DEVOPS

On peut cumuler les differents filtres :
boogie@x61:~/lab/awk_sed/sed$ cat employee  |sed -n -e 's/sysadmin/DEVOPS/ip'  -n -e 's/Ceo/BLA/ip'
101,John Doe,BLA
103,Raj Reddy,DEVOPS

On peut utiliser egalement le flag "e" pour executer des actions (commandes shell ) au préalable enregistrees dans un fichier txt externe:

Exemple : on cree un fichier files.txt qui va contenir le chemin absolu de deux fichiers; puis on execute un sed qui va parser ce fichier et faire un md5sum des deux fichiers dont le chemin est inclu dans notre fichier originel.

Il est bien entendu possible de combiner les options de sed .
Ex: changer "manager" ou "Manager" dans l'integralité d'un fichier puis afficher sa sortie standart tout en enregistran tle résultat dans un fichier externe.

boogie@x61:~/lab/awk_sed/sed$ cat employee |sed -n 's/manager/LAPIN/igpw lapin.txt'
102,Jason Smith,IT LAPIN
105,Jane Miller,Sales LAPIN

boogie@x61:~/lab/awk_sed/sed$ cat lapin.txt 
102,Jason Smith,IT LAPIN
105,Jane Miller,Sales LAPIN

-Delimiter de substitution : 

boogie@x61:~/lab/awk_sed/sed$ cat files.txt |sed 's/^/md5sum /e'
b970730396b97468632773869b67baf2  /etc/passwd
06f61e685f6cf3829c44ead716cc4a92  /etc/group





