
# notes urls :

http://xmodulo.com/disable-network-manager-linux.html
https://wiki.archlinux.fr/Systemd


####### Quick Memo : #######

SYSTEMD :

Nowadays, most of the Linux distribution systems such as Fedora, Ubuntu, Arch
Linux, Debian, openSUSE, and so on, have switched from init to systemd. systemd
is the first process that gets started after system boot-up with PID 1. It controls and
manages other processes that should be started after the system boot-up. It is also
known as basic building block for an operating system. To learn about an init-based
system, refer to the Wikipedia link at https://en.wikipedia.org/wiki/Init.

# systemd units
systemd has several units, each containing a configuration file with information
about a service, socket, device, mount point, swap file or partition, start-up target,
and so on.
The following table explains some of unit files:
             Unit type      File extension      Description
             Service unit   .service            A system service
             Device unit    .device             A device file recognized by kernel
             Mount unit     .mount              A file system mount point
             Timer unit     .timer              A systemd timer
             Swap unit      .swap               A swap file

To list all the installed unit files in a system, run the systemctl command with the
list-unit-files option:

$ systemctl list-unit-files | head -n 12

UNIT FILE                                  STATE   
proc-sys-fs-binfmt_misc.automount          static  
org.freedesktop.hostname1.busname          static  
org.freedesktop.locale1.busname            static  
org.freedesktop.login1.busname             static  
org.freedesktop.network1.busname           static  
org.freedesktop.resolve1.busname           static  
org.freedesktop.systemd1.busname           static  
org.freedesktop.timedate1.busname          static  
dev-hugepages.mount                        static  
dev-mqueue.mount                           static  
proc-sys-fs-binfmt_misc.mount              static  

To list unit files of a unit type, use the list-unit-files and --type options. Running
the following command will show only a service unit available in the system:

$ systemctl list-unit-files --type=service | head -n 10

UNIT FILE                                  STATE   
acpid.service                              disabled
alsa-restore.service                       static  
alsa-state.service                         static  
alsa-store.service                         static  
alsa-utils.service                         masked  
anacron-resume.service                     enabled 
anacron.service                            enabled 
atd.service                                enabled 
autovt@.service                            enabled 


# Managing services
systemd manages all the available services in a system, from the time of Linux kernel
boot up till the shutdown of the system. A service in a Linux system is an application
that runs in the background or is waiting to be used. Service management files have
the suffix .service in its file name.
In systemd-based Linux system, a user or an administrator can manage services using 
the systemctl command.

-Status of a service
To list the current status of services and check whether it is running or not, use

systemctl status:

 x61
    State: degraded
     Jobs: 0 queued
   Failed: 1 units
    Since: ven. 2016-02-05 06:19:37 CET; 1h 2min ago
   CGroup: /
           ├─init.scope
           │ └─1 /sbin/init
           ├─system.slice
           │ ├─avahi-daemon.service
           │ │ ├─593 avahi-daemon: running [x61.local
           │ │ └─622 avahi-daemon: chroot helpe
           │ ├─dbus.service
           │ │ └─564 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
           │ ├─uuidd.service
           │ │ └─12508 /usr/sbin/uuidd --socket-activation
           │ ├─ModemManager.service
           │ │ └─559 /usr/sbin/ModemManager
           │ ├─cron.service
           │ │ └─573 /usr/sbin/cron -f
           │ ├─lvm2-lvmetad.service
           │ │ └─13127 /sbin/lvmetad -f

For example, to see the status of my NetworkManager service, run the
following command:

$ systemctl status -l NetworkManager.service
● NetworkManager.service - Network Manager
   Loaded: loaded (/lib/systemd/system/NetworkManager.service; enabled; vendor preset: enabled)
   Active: active (running) since ven. 2016-02-05 06:19:43 CET; 1h 2min ago
 Main PID: 558 (NetworkManager)
   CGroup: /system.slice/NetworkManager.service
           ├─ 558 /usr/sbin/NetworkManager --no-daemon
           └─1302 /sbin/dhclient -d -q -sf /usr/lib/NetworkManager/nm-dhcp-helper -pf /var/run/dhclient-wlan0.pid -lf /var/lib/NetworkManager/dhclient-6ea3f6bd-57dd-4111-b9e6-5c9f3475215d-wlan0.lease -cf /var/lib/NetworkManager/dhclient-wlan0.conf wlan0

We can see that the NetworkManager service is running and is in active state. It also
provides detailed information associated with the current NetworkManager service.

Let's see status of another service called the sshd. The sshd service controls whether
ssh connection is possible to a system or not:

$ systemctl status sshd.service
This shows that service sshd is inactive currently.

boogie@x61:~/repositories/stuff/system$ systemctl status sshd.service 
● ssh.service - OpenBSD Secure Shell server
   Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
   Active: active (running) since ven. 2016-02-05 06:41:04 CET; 42min ago
 Main PID: 12627 (sshd)
   CGroup: /system.slice/ssh.service
           └─12627 /usr/sbin/sshd -D

If no verbose output is required, then we can just use the is-active option to
see a service status:

$ systemctl is-active sshd.service
unknown
$ systemctl is-active NetworkManager.service
active
Here, active means a service is running and unknown means a service is
not running.

-Enabling and disabling services
When a system is booted, systemd automatically starts some of the services.
A few of the services may not be running as well. To enable a service to run after a
system is booted, use systemctl enable and to stop a service running by a system
during boot time, use systemctl disable.
Executing the following command will allow systemd to run the sshd service after a
system is booted up:

# systemctl enable sshd.service
Executing the following command will allow systemd to not run sshd.service
when a system is booted up:
# systemctl disable sshd.service

To check whether a service is enabled or not, run the systemctl is-enabled
command:
$ systemctl is-enabled sshd.service
disabled
$ systemctl is-enabled NetworkManager.service
enabled
It means that the sshd service is disabled currently during the system start-up,
while the NetworkManager service is enabled during the start-up by systemd.
Start and stop a service
When a system is running, sometimes we may need some services running.
For example, to do ssh in my current system from another system, the sshd
service must be running.
For example, let's see what the current status of the sshd service is:

$ systemctl is-active sshd.service
unknown
The sshd service is not running currently. Let's try to do ssh in a system:
$ ssh foo@localhost       # Doing ssh to same machine         # Doing ssh to same
machine
  ssh: connect to host localhost port 22: Connection refused
We can see that the ssh connection has been refused.
Now, let's start running the sshd service. We can start a service by using the

systemctl start command as follows:
# systemctl start sshd.service
$ systemctl is-active sshd.service
active

Now, the sshd service is running. Try doing ssh into the machine again:
$ ssh foo@localhost
Last login: Fri Sep 25 23:10:21 2015 from 192.168.1.101
Now, the login has been done successfully.

We can even restart a running service using the systemctl restart command.
This is required when a service has been modified. Then, to enable the modified
setting, we can just restart it.
#   systemctl restart sshd.service
The preceding command will restart the sshd service.

When ssh is no longer required, it's safe to stop running it. This avoids an anonymous
access to a machine. To stop running a service, run the systemctl stop command:

# systemctl stop sshd.service
$ systemctl is-active sshd.service
unknown

# Viewing system logs

To check whether a user is working on an individual or enterprise machine,
viewing system logs is very important in order to trace a problem and get detailed
information of activities happening in a system. Viewing system logs plays an
important role in monitoring and ensuring network traffics are not vulnerable.
On a systemd-based system, system logs are collected and managed by one of its
component called journald. Its task is to collect a log of applications and kernel.
Log files are available in the /var/log/journal/ directory.
To view a log collected by journald, the journalctl command is used:

# journalctl
Running the preceding command displays all system logs collected, starting from
old and grows down to newer logs.
Viewing the latest log entries
To see the latest log entries and continuously printing new entries as appended to
the journal, use the -f option:

boogie@x61:~/repositories/stuff/system$ sudo journalctl -f
-- Logs begin at ven. 2016-02-05 06:19:37 CET. --
févr. 05 07:15:43 x61 sudo[20939]:   boogie : TTY=pts/1 ; PWD=/home/boogie/repositories/stuff/system ; USER=root ; COMMAND=/usr/bin/apt-get install xpdf
févr. 05 07:15:43 x61 sudo[20939]: pam_unix(sudo:session): session opened for user root by boogie(uid=0)
févr. 05 07:15:44 x61 wpa_supplicant[761]: wlan0: WPA: Group rekeying completed with 00:24:d4:cb:7f:3c [GTK=CCMP]
févr. 05 07:16:00 x61 sudo[20939]: pam_unix(sudo:session): session closed for user root
févr. 05 07:17:01 x61 CRON[21449]: pam_unix(cron:session): session opened for user root by (uid=0)
févr. 05 07:17:01 x61 CRON[21450]: (root) CMD (   cd / && run-parts --report /etc/cron.hourly)
févr. 05 07:17:01 x61 CRON[21449]: pam_unix(cron:session): session closed for user root
févr. 05 07:25:44 x61 wpa_supplicant[761]: wlan0: WPA: Group rekeying completed with 00:24:d4:cb:7f:3c [GTK=CCMP]
févr. 05 07:25:48 x61 sudo[21493]:   boogie : TTY=pts/1 ; PWD=/home/boogie/repositories/stuff/system ; USER=root ; COMMAND=/bin/journalctl -f
févr. 05 07:25:48 x61 sudo[21493]: pam_unix(sudo:session): session opened for user root by boogie(uid=0)

To see the log entries captured since the last boot of a system, use the -b option:

$ sudo journalctl -b
-- Logs begin at ven. 2016-02-05 06:19:37 CET, end at ven. 2016-02-05 07:33:31 CET. --
févr. 05 06:19:37 x61 systemd-journald[160]: Runtime journal (/run/log/journal/) is currently using 8.0M.
                                              Maximum allowed usage is set to 77.6M.
                                              Leaving at least 116.5M free (of currently available 768.5M of space).
                                              Enforced usage limit is thus 77.6M, of which 69.6M are still available.
févr. 05 06:19:37 x61 kernel: Initializing cgroup subsys cpuset
févr. 05 06:19:37 x61 kernel: Initializing cgroup subsys cpu
févr. 05 06:19:37 x61 kernel: Initializing cgroup subsys cpuacct
févr. 05 06:19:37 x61 kernel: Linux version 4.0.0-2-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.3 (Debian 4.9.3-2
févr. 05 06:19:37 x61 kernel: Command line: BOOT_IMAGE=/boot/vmlinuz-4.0.0-2-amd64 root=UUID=fb7563de-ce23-4336-b5a3-e1e4c061
févr. 05 06:19:37 x61 kernel: e820: BIOS-provided physical RAM map:
févr. 05 06:19:37 x61 kernel: BIOS-e820: [mem 0x0000000000000000-0x000000000009d7ff] usable
févr. 05 06:19:37 x61 kernel: BIOS-e820: [mem 0x000000000009d800-0x000000000009ffff] reserved
févr. 05 06:19:37 x61 kernel: BIOS-e820: [mem 0x00000000000d2000-0x00000000000d3fff] reserved
févr. 05 06:19:37 x61 kernel: BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
févr. 05 06:19:37 x61 kernel: BIOS-e820: [mem 0x0000000000100000-0x00000000bf6affff] usable
févr. 05 06:19:37 x61 kernel: BIOS-e820: [mem 0x00000000bf6b0000-0x00000000bf6cbfff] ACPI data
févr. 05 06:19:37 x61 kernel: BIOS-e820: [mem 0x00000000bf6cc000-0x00000000bf6fffff] ACPI NVS


#Viewing logs of a particular time interval
We can also view logs of a particular time interval. For example, to view logs of the

last 1 hour, we can run the following command:
$   journalctl --since "1 hour ago" --until now
boogie@x61:~/repositories/stuff/system$ journalctl --since "1 hour ago" --until now
Hint: You are currently not seeing messages from other users and the system.
      Users in the 'systemd-journal' group can see all messages. Pass -q to
      turn off this notice.
No journal files were opened due to insufficient permissions.
boogie@x61:~/repositories/stuff/system$ sudo journalctl --since "1 hour ago" --until now
-- Logs begin at ven. 2016-02-05 06:19:37 CET, end at ven. 2016-02-05 07:34:36 CET. --
févr. 05 06:35:13 x61 kernel: ieee80211 phy0: wlan0: No probe response from AP 00:24:d4:cb:7f:3c after 500ms, disconnecting.
févr. 05 06:35:13 x61 systemd[1]: Starting Cleanup of Temporary Directories...
févr. 05 06:35:13 x61 systemd[1]: Started Cleanup of Temporary Directories.
févr. 05 06:35:13 x61 wpa_supplicant[761]: wlan0: CTRL-EVENT-DISCONNECTED bssid=00:24:d4:cb:7f:3c reason=4 locally_generated=
févr. 05 06:35:13 x61 NetworkManager[558]: <warn> Connection disconnected (reason -4)
févr. 05 06:35:13 x61 kernel: cfg80211: Calling CRDA to update world regulatory domain
févr. 05 06:35:13 x61 NetworkManager[558]: <info> (wlan0): supplicant interface state: completed -> disconnected
févr. 05 06:35:13 x61 wpa_supplicant[761]: wlan0: CTRL-EVENT-REGDOM-CHANGE init=CORE type=WORLD
févr. 05 06:35:13 x61 kernel: cfg80211: World regulatory domain updated:
févr. 05 06:35:13 x61 kernel: cfg80211:  DFS Master region: unset
févr. 05 06:35:13 x61 kernel: cfg80211:   (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp), (dfs_cac_time)
févr. 05 06:35:13 x61 kernel: cfg80211:   (2402000 KHz - 2472000 KHz @ 40000 KHz), (N/A, 2000 mBm), (N/A)
févr. 05 06:35:13 x61 kernel: cfg80211:   (2457000 KHz - 2482000 KHz @ 40000 KHz), (N/A, 2000 mBm), (N/A)
févr. 05 06:35:13 x61 kernel: cfg80211:   (2474000 KHz - 2494000 KHz @ 20000 KHz), (N/A, 2000 mBm), (N/A)
févr. 05 06:35:13 x61 kernel: cfg80211:   (5170000 KHz - 5250000 KHz @ 80000 KHz, 160000 KHz AUTO), (N/A, 2000 mBm), (N/A)
févr. 05 06:35:13 x61 kernel: cfg80211:   (5250000 KHz - 5330000 KHz @ 80000 KHz, 160000 KHz AUTO), (N/A, 2000 mBm), (0 s)
févr. 05 06:35:13 x61 kernel: cfg80211:   (5490000 KHz - 5730000 KHz @ 160000 KHz), (N/A, 2000 mBm), (0 s)
févr. 05 06:35:13 x61 kernel: cfg80211:   (5735000 KHz - 5835000 KHz @ 80000 KHz), (N/A, 2000 mBm), (N/A)
févr. 05 06:35:13 x61 kernel: cfg80211:   (57240000 KHz - 63720000 KHz @ 2160000 KHz), (N/A, 0 mBm), (N/A)
févr. 05 06:35:13 x61 NetworkManager[558]: <info> (wlan0): supplicant interface state: disconnected -> scanning
févr. 05 06:35:16 x61 wpa_supplicant[761]: wlan0: SME: Trying to authenticate with 00:24:d4:cb:7f:3c (SSID='boogiewifi' freq=
févr. 05 06:35:16 x61 kernel: wlan0: authenticate with 00:24:d4:cb:7f:3c


To view log entries since July 1, 2015 until now, we can run the following command:
$ journalctl --since 2016-07-01

To view logs from Feb 05 2016 06:30  to Feb 05 2016 07:07:07  we can run the
following command:

$ sudo journalctl --since "2016-02-05 06:30:00" --until "2016-02-05 07:07:07" 

-- Logs begin at ven. 2016-02-05 06:19:37 CET, end at ven. 2016-02-05 07:37:57 CET. --
févr. 05 06:30:37 x61 kernel: CE: hpet increased min_delta_ns to 20115 nsec
févr. 05 06:31:15 x61 kernel: perf interrupt took too long (2520 > 2500), lowering kernel.perf_event_max_sample_rate to 50000
févr. 05 06:32:16 x61 su[2175]: Successful su for root by boogie
févr. 05 06:32:16 x61 su[2175]: + /dev/pts/0 boogie:root
févr. 05 06:32:16 x61 su[2175]: pam_unix(su:session): session opened for user root by boogie(uid=1000)
févr. 05 06:32:16 x61 su[2175]: pam_systemd(su:session): Cannot create session: Already running in a session
févr. 05 06:32:40 x61 dbus[564]: [system] Activating via systemd: service name='org.freedesktop.PackageKit' unit='packagekit.
févr. 05 06:32:40 x61 systemd[1]: Starting PackageKit Daemon...
févr. 05 06:32:40 x61 PackageKit[2220]: daemon start
févr. 05 06:32:40 x61 dbus[564]: [system] Successfully activated service 'org.freedesktop.PackageKit'
févr. 05 06:32:40 x61 systemd[1]: Started PackageKit Daemon.
févr. 05 06:35:13 x61 kernel: ieee80211 phy0: wlan0: No probe response from AP 00:24:d4:cb:7f:3c after 500ms, disconnecting.
févr. 05 06:35:13 x61 systemd[1]: Starting Cleanup of Temporary Directories...
févr. 05 06:35:13 x61 systemd[1]: Started Cleanup of Temporary Directories.
févr. 05 06:35:13 x61 wpa_supplicant[761]: wlan0: CTRL-EVENT-DISCONNECTED bssid=00:24:d4:cb:7f:3c reason=4 locally_generated=
févr. 05 06:35:13 x61 NetworkManager[558]: <warn> Connection disconnected (reason -4)
févr. 05 06:35:13 x61 kernel: cfg80211: Calling CRDA to update world regulatory domain
févr. 05 06:35:13 x61 NetworkManager[558]: <info> (wlan0): supplicant interface state: completed -> disconnected
févr. 05 06:35:13 x61 wpa_supplicant[761]: wlan0: CTRL-EVENT-REGDOM-CHANGE init=CORE type=WORLD
févr. 05 06:35:13 x61 kernel: cfg80211: World regulatory domain updated:
févr. 05 06:35:13 x61 kernel: cfg80211:  DFS Master region: unset
.....
févr. 05 07:03:47 x61 NetworkManager[558]: <info> (wlan0): supplicant interface state: 4-way handshake -> group handshake
févr. 05 07:03:47 x61 wpa_supplicant[761]: wlan0: WPA: Key negotiation completed with 00:24:d4:cb:7f:3c [PTK=CCMP GTK=CCMP]
févr. 05 07:03:47 x61 wpa_supplicant[761]: wlan0: CTRL-EVENT-CONNECTED - Connection to 00:24:d4:cb:7f:3c completed [id=0 id_s
févr. 05 07:03:47 x61 NetworkManager[558]: <info> (wlan0): supplicant interface state: group handshake -> completed
févr. 05 07:05:44 x61 wpa_supplicant[761]: wlan0: WPA: Group rekeying completed with 00:24:d4:cb:7f:3c [GTK=CCMP]



##### Systemd french version : 


systemd est un gestionnaire de système / service. Il permet entre autre un démarrage en parallèle, à la demande, par activation D-Bus ou socket, un suivi des services etc.
Sommaire

    1 Configuration
    2 Commandes
    3 Système
    4 Unité
    5 Services
    6 Target
    7 Diagnostic
        7.1 Erreur au chargement
            7.1.1 Exemple: service installé mais non fonctionnel
            7.1.2 Exemple: service non installé
        7.2 Erreur au lancement
        7.3 Démarrage
        7.4 Montage
    8 Journalisation
        8.1 Visualiser
        8.2 Taille
        8.3 syslog
    9 Autres

systemd est installé et activé par défaut sur les nouvelles installations depuis octobre 2012.
Configuration

Reportez-vous à la catégorie configuration pour la configuration de votre système.

Le comportement du programme systemd quant à lui, se configure à l'aide du fichier /etc/systemd/system.conf. Mais hormis pour des raisons de debug, vous n'aurez certainement pas à y toucher.
Commandes

systemd fournit un large panel de commande qui vous permettent d'avoir des informations ou de modifier l'état de votre système. Sans être exhaustif, voici les plus importantes :

    systemctl : contrôle systemd et gère les unités.
    journalctl : consultation du journal de systemd.
    loginctl : contrôle des sessions utilisateurs (systemd-logind).

Astuce: Les pages de manuel de systemd sont assez bien fournies et donnent un aperçu des commandes (pages en section 1) disponibles.
Système

Les actions sont envoyées en utilisant la commande systemctl :

Redémarrer ou arrêter :

systemctl reboot
systemctl poweroff

Astuce: Vous pouvez directement utiliser les commandes reboot, poweroff, … qui sont des liens vers systemctl

Mettre en veille ou en hibernation :

systemctl suspend
systemctl hibernate

Note: Pour configurer l'hibernation, consultez également les parties hooks et réveil. N'oubliez pas de refaire l'image.
Unité

Une unité représente un fichier de configuration. Entre autres, une unité peut être un service (*.service), un target (*.target), un montage (*.mount), un socket (*.socket)…

    Liste les unités:

systemctl
systemctl list-units

    Démarrer, arrêter, redémarrer ou recharger une unité:

systemctl start <unit>
systemctl stop <unit>
systemctl restart <unit>
systemctl reload <unit>

    Voir son statut:

systemctl status <unit>

    Activer, désactiver une unité au démarrage:

systemctl enable <unit>
systemctl disable <unit>

    Lister les dépendances d'une unité:

systemctl list-dependencies [<unit>]

Note: Il faut utiliser le nom du fichier d'une unité en entier, exemple:

systemctl restart avahi-daemon.service

Néanmoins, certains raccourcis d'écriture sont disponibles:

    sans suffixe, systemctl présume qu'il s'agit d'un .service. Ainsi, dbus et dbus.service sont équivalents:

systemctl status dbus

    un point de montage est automatiquement retranscrit en l'unité .mount appropriée. Par exemple /home est équivalent à home.mount:

systemctl status /home

    de la même manière, un périphérique est retranscrit en l'unité .device appropriée. Ainsi, /dev/sda2 est équivalent à dev-sda2.device:

systemctl status /dev/sda2

    Recharger la configuration des services (après modification d'une unité):

systemctl daemon-reload

Les unités peuvent correspondre à des instances d'un fichier template, ceci permet d'avoir un fichier de configuration pour plusieurs unités. Ces unités sont reconnaissables par le @ inclus dans leur nom. Un exemple concret est le service dhcpcd@.service. Ce dernier permet d'activer le DHCP sur une interface :

systemctl start dhcpcd@eth0.service

Pour activer le service au démarrage :

systemctl enable dhcpcd@eth0.service

Services

Un service est une unité ayant comme suffixe .service. La page Services fournit une liste non exhaustive des principaux services que vous pouvez lancer (cf. colonne systemd).
Target

Un target est une unité particulière, elle permet de regrouper d'autres unités. Son nom de fichier prend le suffixe .target.

Les targets permettent de fournir l'équivalent des niveaux d'exécution (runlevel) de sysvinit :
SystemVinit Runlevel    Systemd Target  Notes
0   runlevel0.target, poweroff.target   arrête le système
1, s, single    runlevel1.target, rescue.target     mode single user.
2, 4    runlevel2.target, runlevel4.target, multi-user.target   Mode défini par l'utilisateur, identique au 3 par défaut.
3   runlevel3.target, multi-user.target     Multi-utilisateur, non graphique.
5   runlevel5.target, graphical.target  Multi-utilisateur, en mode graphique.
6   runlevel6.target, reboot.target     Redémarre
emergency   emergency.target    Shell d'urgence

Vous pouvez voir ce que regroupe un target en lançant :

systemctl show -p Wants -p Requires <target>

Par exemple, on peut voir que graphical ne fait que rajouter un gestionnaire de connexions en plus de multi-user (systemd-update-utmp-runlevel.service n'étant là que pour mettre à jour le runlevel) :
$ systemctl --no-pager show -p Wants -p Requires graphical.target

Requires=multi-user.target
Wants=display-manager.service systemd-update-utmp-runlevel.service

Pour changer de target, par exemple pour passer au multi-user, lancez l'une de ces commandes:

systemctl isolate multi-user.target
systemctl isolate runlevel3.target
telinit 3

Le target par défaut à l'installation est graphical :
$ readlink /usr/lib/systemd/system/default.target

graphical.target

Pour spécifier un autre niveau par défaut, par exemple le multi-user :

systemctl set-default -f multi-user.target

Diagnostic

Vous pouvez à tout moment avoir des informations sur l'état des unités avec la commande :

systemctl status <unit>

Erreur au chargement
Exemple: service installé mais non fonctionnel

Par défaut, le target graphical est sélectionné, ceci dit, même si un gestionnaire de connexion est installé, il ne démarre pas :
$ systemctl -t service -a --full | grep error

display-manager.service   error  inactive dead        display-manager.service

$ systemctl status display-manager.service

display-manager.service
      Loaded: error (Reason: No such file or directory)
      Active: inactive (dead)

systemd ne trouve pas de display-manager.service parce qu'on ne lui en a indiqué aucun. Si vous avez installé slim par exemple :
# systemctl enable slim.service

ln -s '/usr/lib/systemd/system/slim.service' '/etc/systemd/system/display-manager.service'

Et là :
$ systemctl status display-manager.service

slim.service - SLiM Simple Login Manager
      Loaded: loaded (/usr/lib/systemd/system/slim.service; enabled)
      Active: inactive (dead)
      CGroup: name=systemd:/system/slim.service

Vous n'aurez plus qu'à le lancer :

systemctl start display-manager.service

Exemple: service non installé

Si systemd liste des services qui se rapportent à des logiciels non-installés sur la machine, par exemple :
$ systemctl -t service -a --full | grep error

auditd.service                 error  inactive dead        auditd.service
plymouth-quit-wait.service     error  inactive dead        plymouth-quit-wait.service
plymouth-start.service         error  inactive dead        plymouth-start.service
syslog.service                 error  inactive dead        syslog.service

Vous pouvez les masquer avec la commande suivante:

 systemctl mask auditd.service plymouth-quit-wait.service plymouth-start.service syslog.service

Important: Faites bien attention quand vous masquez ces services, car cela empêche leur activation, même manuellement. Avant de les réutiliser, vous devrez les «démasquer»:

systemctl unmask auditd.service

Erreur au lancement
$ systemctl --failed

UNIT                LOAD   ACTIVE SUB    JOB DESCRIPTION
dhcpcd@eth0.service loaded failed failed     dhcpcd on eth0

LOAD   = Reflects whether the unit definition was properly loaded.
ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
SUB    = The low-level unit activation state, values depend on unit type.
JOB    = Pending job for the unit.

1 units listed. Pass --all to see inactive units, too.

# systemctl status dhcpcd@eth0.service

dhcpcd@eth0.service - dhcpcd on eth0
      Loaded: loaded (/usr/lib/systemd/system/dhcpcd@.service; disabled)
      Active: failed (Result: exit-code) since Tue, 31 Jul 2012 15:09:03 +0200; 2min 58s ago
     Process: 1251 ExecStart=/sbin/dhcpcd -A -q -w %I (code=exited, status=1/FAILURE)
      CGroup: name=systemd:/system/dhcpcd@.service/eth0

Jul 31 15:09:03 archtest dhcpcd[1251]: dhcpcd already running on pid 311 (/run/dhcpcd-eth0.pid)

Un autre dhcpcd est en cours :
$ ps h -C dhcpcd -o cgroup

3:cpuacct,cpu:/system/wicd.service,1:name=systemd:/system/wicd.service

C'était à des fins de tests, wicd.service était lancé.
Démarrage

Vous pouvez avoir un aperçu de ce qui est démarré et le temps que ça prend avec la commande systemd-analyze.
Note: Cette commande a besoin de python2-cairo, python2-gobject et python2-dbus, installez-les si ce n'est pas déjà le cas.
$ systemd-analyze

Startup finished in 5421ms (kernel) + 11246ms (userspace) = 16668ms

$ systemd-analyze blame

3421ms wicd.service
  1278ms systemd-remount-fs.service
  1154ms systemd-logind.service
  1033ms systemd-vconsole-setup.service
   873ms sys-kernel-debug.mount
   859ms dev-hugepages.mount
   845ms systemd-udevd.service
   795ms dev-mqueue.mount
   502ms console-kit-daemon.service
   380ms systemd-udev-trigger.service
   339ms upower.service
   251ms systemd-tmpfiles-setup.service
   235ms systemd-user-sessions.service
   232ms systemd-sysctl.service
   187ms udisks2.service
   117ms home.mount
   112ms console-kit-log-system-start.service
     5ms tmp.mount
     3ms sys-fs-fuse-connections.mount

Ou encore, un aperçu graphique :

systemd-analyze plot > plot.svg

Montage

Si vous avez des périphériques non forcément connectés lors du démarrage et que vous les spécifiez dans /etc/fstab, n'oubliez pas de rajouter l'option nofail pour ne pas vous retrouver avec un démarrage bloqué.
Note: L'option nofail n'est pas valable pour les types dépendant de fuse (ntfs-3g, cifs, etc.) et les partitions sur le réseau sont gérées différemment, systemd peut démarrer sans.

systemd a un timeout de 90 secondes par défaut, ce n'est qu'après ce temps qu'il vous informe d'un échec :

[ TIME ] Timed out waiting for device dev-sdb1.device
[DEPEND] Dependency failed for /media/disque_usb_1

et vous donne la main :

Welcome to emergency mode. Use "systemctl default" or ^D to enter default mode.
Give root password for maintenance
(or type Control-D to continue):

Important: Le Ctrl-D ou le systemctl default reprendra là où systemd s'est arrêté. Si vous n'avez fait aucun changement, vous allez repartir pour 90s d'attente.

Pour remédier temporairement au souci, vous pouvez éventuellement utiliser le shell d'urgence (celui que vous aurez une fois le mot de passe root entré) :

systemctl mask media-disque_usb_1.mount
# ne pas oublier de le 'unmask' une fois le souci réglé
systemctl default

Le démarrage devrait continuer. Mais pour une solution plus pérenne, modifiez la ligne concernant ce périphérique dans le /etc/fstab en rajoutant nofail:

/dev/sdb1 /media/disque__usb_1 auto defaults,nofail 0 0

Journalisation

systemd possède son propre mécanisme de journalisation, syslog n'est plus requis par défaut.
Visualiser
Important: Seul le root et le groupe systemd-journal peuvent visualiser le journal.

Pour accéder au log :

journalctl
# ou si vous voulez les messages d'un seul service
journalctl -u wicd
# ou alors par PID
journalctl _PID=1
# ou même par exécutable
journalctl /usr/sbin/dhcpcd

Vous pouvez aussi accéder au log récent d'une unité spécifique par le biais de systemctl status :

systemctl status wicd.service

Ou obtenir les logs depuis ou jusqu'à une date précise, à l'aide respectivement de --since ou --until:

#journal du jour:
journalctl --since="today"
#jusqu'à une date donnée (par exemple au 20 février 2013, 12h30):
journalctl --until="2013-02-20 12:30:00"
#ou dans un intervalle précis (par exemple le 15 mars 2013 entre 13h et 13h10min30s):
journalctl --since="2013-03-15 13:00:00" --until="2013-03-15 13:10:30"

journalctl permet aussi de filtrer par le niveau de log (tel que défini par syslog). Pour n'afficher que les erreurs :

journalctl -p err

Vous pouvez voir les pages de manuel de journalctl et systemd.journal-fields pour plus d'informations.
Taille

Vous pouvez limiter la taille maximum du journal (par défaut à 10% de la taille du système de fichier). Pour la fixer à 50 Mio par exemple :
Fichier: /etc/systemd/journald.conf

SystemMaxUse=50M

En fixant une limite par fichier, vous aurez un équivalent de logrotate (par défaut, il garde 7 rotations):
Fichier: /etc/systemd/journald.conf

SystemMaxUse=50M
SystemMaxFileSize=10M

Si vous ne voulez pas avoir un journal persistent, vous pouvez tout simplement ne pas le stocker sur le disque :
Fichier: /etc/systemd/journald.conf

[Journal]
Storage=volatile

syslog

Si vous voulez avoir syslog en parallèle avec journald (pour avoir des fichiers texte par exemple), il suffit d'installer syslog-ng, puis de l'activer :

systemctl enable syslog-ng.service

Autres

    systemadm: une interface graphique pour contrôler systemd fournie dans systemd-ui-git disponible sur AUR (elle est encore loin d'être terminée, à utiliser à vos risques et périls.)
    logind : gestionnaire de sessions utilisateurs.
    systemd/cron : réaliser des tâches planifiées.
    systemd/utilisateur : emploi dans l'espace utilisateur.

