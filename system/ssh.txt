=== notes ssh :

- config client ssh :

il est possible d'établir un profil particulier à certains types d'equipement : user de connexion , passage par un mod proxy pour se connecter en ssh sur les machinnes se trouvant derriere un bastion :
Un fichier config dans le repertoire .ssh du $HOME du user est à creeer : 

/.ssh$ cat config 
# exemple le user du home dir se connectera automatiquement en netadmin sur les equipements se nommant switch-* et routeur-*
Host switch-* routeur-*
User netadmin

# ici c'est en root que le user se connecte : on précise qu'il n'ya pa de check de modif de clé ssh a checker et qu'on forward l'agent ssh :
Host bigip*  webfront* avamar*
User root
ForwardAgent yes
StrictHostKeyChecking no

# ici on se connecte à tous les hosts money* en passant par un bastion qui est utilisé comme proxy :
Host money*
proxyCommand ssh bastion nc %h %p

- Utilisation du mode proxy : 
# 
Host lapin
    User boogie
    Hostname lapin.net
    ControlMaster auto
    ControlPath /tmp/ssh-%r@%h:%p
    ControlPersist 240m

Host kiki


    ProxyCommand ssh lapin nc %h %p


Proxy ssh : 
on peut se servir de ssh pour faire rebondir d'une machinne a une autre via ssh : cas typique de l'acces via un bastion pour un serveur :

# on fixe un alias de connexion : 
Host kiki_from_dmz
# ici on set le hostname de notre serveur final 
Hostname kiki
# notre user : 
User lapin
# la commande ssh en proxy pour atteindre notre serveur final en passant par la dmz 
proxyCommand ssh dmz -W %h:%p



-- options en arguments :

- pour bypasser : le commande pour valider en auto la connexion ssh à la premièrer connexion  

ssh_options="-q -o ConnectTimeout=3 -o StrictHostKeyChecking=no"

- pour se connecter a une machine utilisant un vieux protocole ssh 

Unable to negotiate with 10.102.1.9 port 22: no matching host key type found. Their offer: ssh-dss
 ~/.ssh  $  ssh -oHostKeyAlgorithms=+ssh-dss -l admin  server.ilo  -vvv


- timeout de connexion client :
pour tester la connexion en figeant un timeout à une duree defini on peu passer en rargument sur notre ligne de commande l'option :

ssh -o ConnectTimeout=1 server "date"



====  ssh tunnel  pour http ===

ssh -L 8080:localhost:3128 root@lapin
puis sur lapin
ssh -D 3128 boogie@bastion_ip
dans ton browser tu met localhost port 8080 en proxy socks

==== ssh tunnel proxy sock : ====

on ouvre un tunnel sur un port se connectant a un serveur bastion :
ssh -D 7777  bastion_server -N -q
sur une autre console :
export HTTPS_PROXY=socks5://localhost:7777

on peut ensuite depuis notre poste interroger notre appli distante passant par le tunnel 
ex :
on recupere le fichier de conf d'un cluster kube :
et on interroge kube :
kubectl get nodes

== restriction connexion ssh /sftp ip pub ==

Il est possible de définir une restriction d'acces à une machine en prefixant la les ip autorisées devant la clé ssh dans le fichier d
'authorized keys

from="77.77.77.77" ssh-rsa Pp6sdF+XCtKA1NnqFzURb4BOq0YKR82cHooLaMQUzh36zsdsdsds boogie@boogie
