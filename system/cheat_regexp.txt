== Cheat page sur regexp : 

A completer ( manque catégories [:alnum:] etc ....)

String Pattern Matches? Explanation
hello  ^hello$ Yes      The string begins by character h (^h),
                        followed by e, l, l, and then finishes by o
                        (o$).
hell   ^hello$ No       The string begins by character h (^h),
                        followed by e, l, l but does not finish by o.
Hello  ^hello$ Depends  If the engine performing the match is case-
                        sensitive, the string doesn't match the pattern.

Exemple d'adresse mail : ^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$

->PCRE syntax
Dans sa forme la plus simple il s'agit d'un caractère 
x match par exemple 
[a-z] ou des groupe [a-z0-9]. matches any character between a and z
hell[a-z0-9] match hello and hell4, but not hell or hell!.

Metacharacter     Description

^                 The entity after this character must be found at the beginning.
Beginning         Example pattern: ^h
                  Matching strings: hello, h, hh
                  Non-matching strings: character, ssh

$                 The entity before this character must be found at the end.
End               Example pattern: e$
                  Matching strings: sample, e, file
                  Non-matching strings: extra, shell

.                 Matches any character.
Any               Example pattern: hell
                  Matching strings: hello, hellx, hell5, hell!
                  Non-matching strings: hell, helo


[ ]         Matches any character within the specified set.
Set         Syntax: [a-z] for a range, [abcd] for a set, and [a-z0-9] for
            two ranges. Note that if you want to include the character in a
            range, you need to insert it right after the [ or just before the ].
            Example pattern: hell[a-y123-]
            Matching strings: hello, hell1, hell2, hell3, hell-
            Non-matching strings: hellz, hell4, heloo, he-llo

[^ ]        Matches any character that is not within the specified set.
Negate set  Example pattern: hell[^a-np-z0-9]
            Matching strings: hello, hell;
            Non-matching strings: hella, hell5

|           Matches the entity placed either before or after the |.
Alternation Example pattern: hello|welcome
            Matching strings: hello, welcome, helloes, awelcome
            Non-matching strings: hell, ellow, owelcom

( )         Groups a set of entities, often to be used in conjunction with |.
Grouping    Example pattern: ^(hello|hi) there$
            Matching strings: hello there, hi there.
            Non-matching strings: hey there, ahoy there

\           Allows you to escape special characters.
Escape      Example pattern: Hello\.
            Matching strings: Hello., Hello. How are you?, Hi!
            Hello...
            Non-matching strings: Hello, Hello, how are you?

Quantificateur :

Quantifier         Description
*                  The entity preceding * must be found 0 or more times.
0 or more times    Example pattern: he*llo
                   Matching strings: hllo, hello, heeeello
                   Non-matching strings: hallo, ello

+                  The entity preceding + must be found 1 or more times.
1 or more times    Example pattern: he+llo
                   Matching strings: hello, heeeello
                   Non-matching strings: hllo, helo

?                  The entity preceding ? must be found 0 or 1 time.
0 or 1 time        Example pattern: he?llo
                   Matching strings: hello, hllo
                   Non-matching strings: heello, heeeello

{x}                The entity preceding {x} must be found x times.
x times            Example pattern: he{3}llo
                   Matching strings: heeello, oh heeello there!
                   Non-matching strings: hello, heello, heeeello

{x,}               The entity preceding {x,} must be found at least x times.
At least x times   Example pattern: he{3,}llo
                   Matching strings: heeello, heeeeeeello
                   Non-matching strings: hllo, hello, heello

{x,y}              The entity preceding {x,y} must be found between x and y times.
x to y times       Example pattern: he{2,4}llo
                   Matching strings: heello, heeello, heeeello
                   Non-matching strings: hello, heeeeello

/!\  As you probably noticed, the { and } characters in the regular expressions conflict
with the block delimiter of the Nginx configuration file syntax language. If you want
to write a regular expression pattern that includes curly brackets, you need to place
the pattern between quotes (single or double quotes):
    rewrite hel{2,}o /hello.php; # invalid
    rewrite "hel{2,}o" /hello.php; # valid
    rewrite 'hel{2,}o' /hello.php; # valid

-Captures

One last feature of the regular expression mechanism is the ability to capture sub-expressions. Whatever text is placed between parentheses ( ) is captured and can be used after the matching process.
Here are a couple of examples to illustrate the principle:

Pattern                                       String           Captured
^(hello|hi) (sir|mister)$                     hello sir        $1 = hello
                                                               $2 =  sir

^(hello (sir))$                               hello sir        $1 =  hello sir
                                                               $2 =  sir

^(.*)$                                        nginx rocks      $1 =  nginx rocks

^(.{1,3})([0-9]{1,4})([?!]{1,2})$             abc1234!?        $1 =  abc
                                                               $2 = 1234
                                                               $3 = !?
Named captures are also supported:            /admin/doc       $folder = admin
^/(?<folder>[^/]*)/(?<file>.*)$                                $file = doc

When you use a regular expression in Nginx, for example, in the context of a location
block, the buffers that you capture can be employed in later directives:

    server {
          server_name website.com;
          location ~* ^/(downloads|files)/(.*)$ {
              add_header Capture1 $1;
              add_header Capture2 $2;
          }
    }

In the preceding example, the location block will match the request URI against a regular expression. A couple of URIs that would apply here: /downloads/file.txt, /files/archive.zip, or even /files/docs/report.doc. Two parts are captured $1 will contain either downloads or files and $2 will contain whatever comes after /downloads/ or /files/. Note that the add_header directive (syntax: add_header header_name header_value, see the HTTP headers module section) is employed here to append arbitrary headers to the client response for the sole purpose of demonstration.

