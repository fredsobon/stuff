== notes from kafka cookbook : =

des binaires kafka sont présents dans le home dir de kafka :

/opt/kafka/bin] # ls
kafka-console-consumer.sh    kafka-preferred-replica-election.sh  kafka-replay-log-producer.sh  kafka-server-stop.sh                kafka-topics.sh            zookeeper-server-stop.sh
kafka-console-producer.sh    kafka-producer-perf-test.sh          kafka-run-class.sh            kafka-simple-consumer-perf-test.sh  windows                    zookeeper-shell.sh
kafka-consumer-perf-test.sh  kafka-reassign-partitions.sh         kafka-server-start.sh         kafka-simple-consumer-shell.sh      zookeeper-server-start.sh

= creation de topic :

On va pouvoir créer un topic

>bin/kafka-topics.sh --create --ZooKeeper localhost:2181 --replication-factor 1 --partitions 1  --topic kafkatest
Ici on cree un topic nommé kafkatest avec un facteur de replication de 1 et une partition. On doit egalement préciser le zookeeper et son port


On peut checker la conf :
/opt/kafka/bin/kafka-topics.sh  --describe  --zookeeper localhost:2181

La liste des topics :
./kafka-topics.sh --list --zookeeper localhost:2181

Pour avoir le détail sur un topic :

[root@xmidevtbusrc01bv /opt/kafka/bin] # /opt/kafka/bin/kafka-topics.sh  --describe  --zookeeper localhost:2181 --topic dating.happyhour.post.grant
Topic:dating.happyhour.post.grant       PartitionCount:3        ReplicationFactor:2     Configs:
        Topic: dating.happyhour.post.grant      Partition: 0    Leader: 1       Replicas: 1,2   Isr: 1,2
        Topic: dating.happyhour.post.grant      Partition: 1    Leader: 2       Replicas: 1,2   Isr: 2,1
        Topic: dating.happyhour.post.grant      Partition: 2    Leader: 1       Replicas: 1,2   Isr: 1,2


= override de topic :
on peut surcharger des valeurs pour un topic donné.
ex : modifier la durée de rétention pour 


= modif de config pour un topic donne : =
on peut modifier certain param qui sont overrides pour un topic donné :

ex : ici on reset la conf de "retention.ms" de notre topic "monmessage" 

[/opt/kafka/bin] $ /opt/kafka/bin/kafka-topics.sh  --alter  --zookeeper localhost:2181  --topic monmessage --deleteConfig retention.ms

= exam des topics avec un override : 

/opt/kafka/bin] $ /opt/kafka/bin/kafka-topics.sh  --describe  --zookeeper localhost:2181 --topics-with-overrides



= envoie de messages via la  console :

ex : 
/opt/kafka/bin  
./kafka-console-producer.sh --broker-list localhost:9092 --topic kafkatest
fisrt message
second message
      
on peut aussi voir la liste des messages : ceci nous permet de controller que nos messages sont bien lisibles : 
attention l'option --from-beginning peut être très verbeuse en fonction du nombre de message envoyés. Dans notre test nous n'avons que peu d'historique.
Dans ce cas la console va nous renvyer sur la console les messages issus des logs du topic. : 

bin/kafka-console-consumer.sh	--zookeeper	localhost:2181	--topic	kafkatest	--from-beginning
First	message
Second	message


Nous avons la possibilité de passer des paramètres additionnels :

--fetch-size :	This specifies the amount of	data	to	be	fetched	in	a	single	request.	Its
size	in	bytes	follows	this	argument.
--socket-buffer-size :	This	specifies	the	size	of	the	 TCP	RECV 	size.	The	size	in
bytes	follows	the	argument.
--autocommit.interval.ms :	This	specifies	the	time	interval	in	which	the	current
offset	is	saved	in	 ms .	The	time	in	 ms 	follows	the	argument.
--max-messages :	This	specifies	the	maximum	number	of	messages	to	consume
before	exiting.	If	it	is	not	set,	the	consumption	is	unlimited.	The	number	of	messages
follows	the	argument.
--skip-message-on-error :	This	specifies	that,	if	there	is	an	error	while	processing	a
message,	the	system	should	not	stop.	Instead,	it	should	just	skip	the	current	messages.




= Examen des logs d'un topic 

[/opt/kafka/bin] $ ./kafka-run-class.sh  kafka.tools.SimpleConsumerShell --broker-list localhost:9092 --partition 0 --topic monmessage --offset -1





    
= Config d'un broker : 

[/opt/kafka/config] # ls
consumer.properties  log4j.properties  producer.properties  server.properties  test-log4j.properties  tools-log4j.properties  topology.json  zookeeper.properties
    
Le conf principale se fait dans le fichier :
server.properties





