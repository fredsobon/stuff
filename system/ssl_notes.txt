=== notes draft ssl : ===


= principes tres généraux tls / ssl : 


on utilise a la fois un system de crytage symmetrique : clé priv qui sera partagée entre le client et le server
on utilise un system de cryptage à clé priv /pub pour les echanges entre les clients et server 



/!\ attention dans le cas ou on a par exemple plusieurs domaines, ou plusieurs server qui vont être contacter en tls : on va devoir au moment de saisir les infos pour la génération de notre certif : renseigner les champs Alt names : on rajoute exemple : server-etcd01, server-etcd02 ou boogie7.net , boogie7.org ...

1/ pour communiquer avec un server de manière securisé :
le client génére une paire de clé priv /pub :
il garde la priv et envoi la pub sur le server : c'est de manière classique la connexion ssh : le client peut se connecter en ssh , les données qu'ils envoient sont chiffrées avec sa clé privées et sur le serveur sa clé ublique est utilisée pour déchiffrer le message.
inversement le serveur chiffre les données avec la clé pub du client qui sera le seul a pouvoir déchiffrer avec sa clé priv.

pour le traffic https :

le server génere une paire de clé pub /priv 
il va tout d'abord envoyer une demande de signature de certificat à une authorite de certification ( ca ) : c'est le csr qui va contenir la clé pub du server et les informations relatives au nom de domaines, id site, proprietaire societe ....
La ca signe le certificat avec sa clé priv , les users / server ont les clés pubs des CA ( dans les os , browsers ) , le certificat est ensuite envoyé au server .
On va configurer le server pour gérer https ( lb / nginx, apache ....) 
Quand un user accede à l'application : le server envoit immédiatement le certificat avec sa clé pub. le user utilise la clé publique de la ca ( contenue dans les brosers ) pour valider le certificat.
A partir de ce moment la une génération de clé symmetrique est faite pour etablir la communication chiffrée avec le server : 
la clé symmetrique (générée par le browser : c'est transparent pour le user) va etre chiffrée avec la clé pub du server dont le client a recu une copie dans le certificat.
Le serveur va utiliser sa clé priv pour déchiffrer le message du client et donc recupérer la clé symetrique envoyée.

On voit donc que le user peut s'assurer que le server est bien authentique grace a la verification de la clé pub envoyée par le serveur dans le certificat.
Mais comment le server est il sur de l'identité du user ? pour les transactions humaines / server : il n'y a pas de vrai méthode.
Par contre pour les echanges avec un client ( machinne cliente) qui se connecte au server : un certificat peut être demandé par le server au client pour s'assurer que le client est bien identifié.
Dans ce cas le client va générer une paire de clé puis envoyé un csr avec sa clé pub à faire valider par une ca.
une fois le certif recu il va être envoyé au server par le client.


on a donc :
des certificats servers
des certificats clients
des ca 

ces ensembles forment une pki 

= nomenclature : 

- certificats :

sont appellés de plusieurs manière mais il faut juste retenir qu'ils contiennent la clé publique :

*.cert :  server.cert, client.cert ...
*.pem  :  server.pem, client.pem

- key : 

il s'agit de la clé privée donc jamais partagée.
*.key : server.key, client.key
*.key.pem : server-key.pem, client-key.pem 

- ca : certificate authorithy :

ca.key
ca.pem 



= certificats intermédiaires : 


Le certificat intermédiaire est un certificat délivré en tant que couche intermédiaire entre l'autorité de certification et le certificat final de l'utilisateur. Il sert d'outil d'authentification pour indiquer à un navigateur qu'un certificat est à l'origine d'une source sûre et valide, le certificat racine de l'AC. Ces certificats racine sont inclus par défaut dans les navigateurs.

Le certificat intermédiaire est systématiquement inclus avec chaque certificat commandé et, est, en même temps installé sur le serveur. En utilisant l'empreinte digitale du certificat intermédiaire inclus dans le certificat de l'utilisateur final, un navigateur peut ainsi vérifier si le certificat est basé sur un certificat racine valide.

Il est possible qu'un certificat d'utilisateur final soit constitué de plusieurs certificats intermédiaires consécutifs. Dans ce cas, tous les certificats intermédiaires applicables doivent être installés sur le serveur. Ce n'est qu'alors que le navigateur peut remonter la chaîne des empreintes digitales et des certificats jusqu'au certificat racine du navigateur.

= common name :

Le nom commun est le nom de votre hôte pour lequel un certificat SSL est destiné. Celui ci peut différer par type de certificat SSL. Dans la plupart des cas un nom de commun existe le nom d'hôte complet, par exemple 'www.votrenomdedomaine.nl'. Cependant, dans le cas d'un wildcard, il est '*.votrenomdedomaine.nl'.


= clé priv / pub :

Le protocole SSL est basé sur le cryptage des données à l'aide d'une clé privée et d'une clé publique.

Clé privée
Une clé privée est créée en convertissant une portion de texte générée automatiquement en un fichier clé à l'aide d'un algorithme mathématique, ce qui lui donne une valeur unique. Ce fichier clé est utilisé pour générer un CSR, et ensuite pour créer un certificat SSL. Dans ce processus de CSR, la clé publique est également créée. La clé privée doit impérativement rester secrète. Cette clé permet de décrypter les données cryptées et de crypter les messages signés par un certificat.


Clé publique
La clé publique est créée lors de la génération d'un CSR et peut être distribuée au public. Par exemple, une clé publique est utilisée pour crypter des informations que seul le propriétaire de la clé privée est autorisé à recevoir. La combinaison unique de la clé publique et de la clé privée peut alors décrypter ces données. Une clé publique peut également être utilisée pour vérifier qu'un message a été envoyé par le propriétaire de la clé privée.

= SNI :

SNI signifie serveur de nom indication. SNI est un protocol supplémentaire pour le SSL/TLS protocol qui est développé comme solution pour la diminution du nombre d'adresses IP libres sous IPv4. Indiquer avec quel nom d'hôte le client veut faire une liaison pendant le handshake tcp .Plusieurs sites web HTTPS protégés peuvent être hébergé avec leur propre SSL certificat sur le même serveur et la même adresse IP.

Pour utiliser le SNI, la bibliothèque du module SSL/TLS doivent se soutenir le protocole SNI. À partir du 2004 le protocole est soutenu par la bibliothèque OpenSSL
