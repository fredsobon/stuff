== memory notes : ==

=== presentation theorique : 

I. Présentation de free
La commande "free" sous Linux fait partie des commandes à connaitre lorsque l'on travaille fréquemment sur Linux. Cette commande, présente nativement sur de nombreuses distributions comme Debian et ses dérivées permet d'afficher l'état de la mémoire RAM du système, elle possède plusieurs options qu'il est intéressant de connaître et que nous allons voir ici. Suivez le guide !

II. Affichage de la RAM utilisée, tampon et RAM libre
Pour utiliser la commande, rien de plus simple :

free
On a alors un affichage qui ressemble à celui-ci :

boogie@boogie-homy:~$ free -m 
             total       used       free     shared    buffers     cached
Mem:         64524      62107       2417       1329        133       5784
-/+ buffers/cache:      56188       8335
Swap:          976         92        883

Ici, nous avons plusieurs informations :

La ligne mémoire "Mem", divisée en trois colonnes qui sont donc le total de mémoire, la mémoire utilisée et la mémoire disponible.
Les colonnes qui suivent "shared", "buffers" et "cached" sont toujours utilisées, mais à quoi correspondent-elles ? En fait, lorsque Linux va détecter une partie de la mémoire RAM non utilisée, il va en profiter pour charger des blocs du disque dur en RAM, rendant ainsi leur consultation beaucoup plus rapide. Ces blocs mis en RAM sont ce qui constitue la partie "buffers/cached". Cette partie de la RAM n'est pas réellement une occupation de la mémoire, car si un programme ou l'OS ont besoin de RAM, Linux va écraser ces données pour repasser dans un mode habituel où il lit les données directement sur le disque dur. Cela est donc une optimisation des ressources au profit d'une plus grande rapidité.

La ligne "-/+ buffers/cache", elle aussi divisée en trois colonnes.
Cette ligne représente la ligne mémoire en y ayant soustrait les valeur "buffers" et "cached". On obtient alors la quantité réelle de mémoire disponible pour les applications et le système. Une autre méthode d'obtenir des informations sur la mémoire libre est la commande "top" ou "htop", il arrive qu'il y a de gros écarts sur la quantité de mémoire libre et utilisée entre "top" et "free". Cela parce que free affiche en première ligne la valeur avec le cache compris alors que top l’exclue de l'affichage, considérant qu'il ne s'agit pas réellement d'une occupation de la mémoire RAM.

La ligne "Swap" elle aussi divisée en trois colonnes.
Cette valeur représente la quantité de contenu mémoire ayant été mise temporairement sur le disque. La Swap étant une extension de la RAM volatile sur le disque dur. Elle permet de positionner des éléments qui ne sont pas souvent utilisés. Cela, car la Swap offre des taux de lecture / écriture beaucoup moins bons que la RAM. Lors des périodes de fortes charges, la Swap est présente comme une pure extension de la RAM, des problèmes de lenteurs se font alors ressentir.

Les valeurs retournées par free ne sont pas forcément parlantes, comme je l'ai dit, il s'agit de valeur en Kilooctets. Cependant, nous pouvons modifier ces valeurs en affichant, par exemple, la mémoire en Mégaoctets (avec l'option "-m") ou en Gigaoctets (avec l'option "-g"), comme dans l'exemple suivant :


A noter que l'opération inverse est aussi possible, on peut vouloir afficher une unité plus petite : l'octet. Pour cela, il suffit d'utilisation l'option "-b" pour "bytes", qui signifie "octet". Pour que l'unité soit indiquée (ce que l'on appelle un affichage "human readable"),  il suffit d'ajouter l'option "-h" :
￼

Il est aussi possible d'afficher le total, représenté par l'addition de la RAM et de la SWAP, pour cela, il faut utiliser l'option -t :

free -t
Voici la ligne additionnelle que nous pourrons voir :

~# free -t
             total       used       free     shared    buffers     cached
Mem:      66073412   63627872    2445540    1361040     137604    5941900
-/+ buffers/cache:   57548368    8525044
Swap:       999676      97440     902236
Total:    67073088   63725312    3347776
￼

III. Affichage dynamique
Il est possible, avec la commande "free", d'effectuer une sorte d'affichage dynamique de la RAM. Cela peut se faire via l'option "-c" qui va permettre de renouveler la commande X fois. Par exemple si je souhaite que la commande free me donne les détails de la RAM pendant 10 secondes, j'utiliserais la commande suivante :

free -c 10
Il est bien sûr possible de combiner les options, par exemple si je souhaite faire la même chose, mais avec un affichage au format "human readable" :

free -h -c 10
Ici, free va donc s'exécuter 10 fois toutes les secondes, on peut néanmoins déterminer un intervalle de rééxécution plus long en combinant l'option "-c" à l'option "-s" qui prend une valeur en seconde. Par exemple, pour un intervalle de 10 secondes pour 10 répétitions :

free -c 10 -s 10
Voilà, nous avons fait le tour de cette commande qui, une fois que l'on sait comment interpréter ses résultats et correctement l'utiliser, peut devenir très utile 


= RSS and VSZ : =

RSS is the Resident Set Size and is used to show how much memory is allocated to that process and is in RAM. It does not include memory that is swapped out. It does include memory from shared libraries as long as the pages from those libraries are actually in memory. It does include all stack and heap memory.

VSZ is the Virtual Memory Size. It includes all memory that the process can access, including memory that is swapped out and memory that is from shared libraries.

So if process A has a 500K binary and is linked to 2500K of shared libraries, has 200K of stack/heap allocations of which 100K is actually in memory (rest is swapped), and has only actually loaded 1000K of the shared libraries and 400K of its own binary then:

RSS: 400K + 1000K + 100K = 1500K
VSZ: 500K + 2500K + 200K = 3200K
Since part of the memory is shared, many processes may use it, so if you add up all of the RSS values you can easily end up with more space than your system has.

There is also PSS (proportional set size). This is a newer measure which tracks the shared memory as a proportion used by the current process. So if there were two processes using the same shared library from before:

PSS: 400K + (1000K/2) + 100K = 400K + 500K + 100K = 1000K
Threads all share the same address space, so the RSS, VSZ and PSS for each thread is identical to all of the other threads in the process. Use ps or top to view this information in linux/unix.

There is way more to it than this, to learn more check the following references:

http://manpages.ubuntu.com/manpages/en/man1/ps.1.html
https://web.archive.org/web/20120520221529/http://emilics.com/blog/article/mconsumption.html



==  pmap : monitoring proces : 


on peut monitorer la ram utilisée par un process avec la commande pmap :
[lapin ~] # pmap 103007


[lapin ~] # pmap 103007
103007:   php-fpm: pool front
0000000000400000   3212K r-x--  /opt/rh/rh-php56/root/usr/sbin/php-fpm
0000000000922000    560K rw---  /opt/rh/rh-php56/root/usr/sbin/php-fpm
00007f9da29d3000      4K rw---    [ anon ]
00007f9da29d4000      4K r----  /lib64/ld-2.12.so
00007f9da29d5000      4K rw---  /lib64/ld-2.12.so
...
....
00007f9da29d6000      4K rw---    [ anon ]
00007ffdb0144000     88K rwx--    [ stack ]
00007ffdb015a000      4K rw---    [ anon ]
00007ffdb01c6000      4K r-x--    [ anon ]
ffffffffff600000      4K r-x--    [ anon ]
 total           722336K


On peut voir la ram detaillée avec pmap -x process :

[lapin ~] # pmap -x 103007
103007:   php-fpm: pool front
Address           Kbytes     RSS   Dirty Mode   Mapping
0000000000400000    3212    2092       0 r-x--  php-fpm
0000000000922000     560     244      28 rw---  php-fpm
00000000009ae000     108      44      44 rw---    [ anon ]
0000000000e03000    3868    3864    3864 rw---    [ anon ]
...
00007ffdb01c6000       4       4       0 r-x--    [ anon ]
ffffffffff600000       4       0       0 r-x--    [ anon ]
----------------  ------  ------  ------
total kB          723568   40816   28328



== gestion swapiness : =


HOW TO OPTIMIZE THE USE OF RAM ?

In this blog we will speek about swapiness which is a kernel module that defines when linux has to start to write in the SWAP (an allocated space in the disk) to relieve the RAM.
It may seem obvious that with access times in milliseconds for Hard Disk and in nanoseconds for RAM, it is better to write in the RAM.

Recap:

vm.swappiness = 0 : Swapping will be activated urgently only to avoid out of memory condition.
vm.swappiness = 60 : This is the default value and means that from 40% of Ram occupancy, the kernel writes to the swap.
vm.swappiness = 10 : This what is recommended to improve performance.
vm.swappiness = 100 : The kernel will swap aggressively.

To see your swappiness setting :

cat /proc/sys/vm/swappiness
60
Let’s consider that we have a server having 32G of RAM. fixing the swappiness to 5 is enough since kernel will use swap only when the free RAM space is less or equal to 1.6G.

As root set the swappiness value:

echo 5 > /proc/sys/vm/swappiness
or alternatively, run:
sysctl -w vm.swappiness=5

Verify your changes:
cat /proc/sys/vm/swappiness
5
or:
sysctl vm.swappiness
vm.swappiness = 5

To change this value permanently edit /etc/sysctl.conf and modify (or add if not exist):
vm.swappiness = 5

apply modification:
sysctl -p
swappoff -a && swapon -a
