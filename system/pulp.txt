==== notes sur pulp= ===


= L'ajout de repo se fait dans la conf hiera : 

staging/prod.d/app_pulp.yaml


Attention la création des repos ( test, prod ..) se fait au run puppet sur le server )


===Create repo ===

exam des commandes manuelles : 

pulp-admin -u admin -p admin 
pulp-admin -u admin -p admin rpm
pulp-admin -u admin -p admin rpm repo
pulp-admin -u admin -p admin rpm repo create
pulp-admin -u admin -p admin rpm repo create --feed https://www.percona.com/downloads/percona-toolkit/3.0.2 --repo-id perconna-test

+
Apres la creation du repo il faut publier 
ex 
 ./publish_repo.sh -r percona_plugins -a -c


=== Update repo ===

pulp-admin -u admin -p admin rpm repo 
pulp-admin -u admin -p admin rpm repo sync
pulp-admin -u admin -p admin rpm repo sync run
pulp-admin -u admin -p admin rpm repo sync run --repo-id perconna-test
pulp-admin -u admin -p admin rpm repo 
pulp-admin -u admin -p admin rpm repo update 
pulp-admin -u admin -p admin rpm repo update --feed https://www.percona.com/downloads/percona-monitoring-plugins/1.1.7 
pulp-admin -u admin -p admin rpm repo update --feed https://www.percona.com/downloads/percona-monitoring-plugins/1.1.7 --repo-id perconna-test


=== Synchro de repo ===

pulp-admin -u admin -p admin rpm repo sync run --repo-id perconna-test
pulp-admin -u admin -p admin rpm repo update --feed https://www.percona.com/downloads/percona-toolkit/3.0.2/binary/redhat/6/ --repo-id perconna-test
pulp-admin -u admin -p admin rpm repo sync run --repo-id perconna-test
pulp-admin -u admin -p admin -v rpm repo sync run --repo-id perconna-test



=== ajout rpm dans le repo ==

apres la creation d'une arbo 

ex : 
[root@xinfpulp00uv /var/lib/scripts] # tree /var/lib/pulp/rpms/percona_toolkit
/var/lib/pulp/rpms/percona_toolkit
├── percona-toolkit-3.0.2-1.el6.x86_64.rpm
└── percona-toolkit-debuginfo-3.0.2-1.el6.x86_64.rpm

0 directories, 2 files
il faut ajouter les rpms à l'arbo du repo et sa gestion 

./add_rpms.sh -r percona_toolkit -d /var/lib/pulp/rpms/percona_toolkit -c



== Synchro des repos ==

une fois qu'on a ajouter un rpm dans un repo ; on va devoir synchroniser les mirroir vers les pools :

exemple ici une maj du repo Misc_el6 :

./sync_repo.sh -r Misc_el6 -t dated  -c 

./sync_repo.sh -r Misc_el6 -t testing  -c

 ./sync_repo.sh -r Misc_el6 -t prod  -c





 == Gestion gpg ==
on peut gérer le gpg en downlodant la clé gpg du repo distant puis en la passant en argument  

wget https://packages.gitlab.com/runner/gitlab-ci-multi-runner/gpgkey
pulp-admin -u admin -p admin rpm repo update --gpg-key ./gpgkey --repo-id gitlab_runner_centos7




pulp-admin -u admin -p admin rpm repo create --feed "https://packages.elastic.co/elasticsearch/5.x/centos" --require-signature true --gpg-key https://packages.elastic.co/GPG-KEY-elasticsearch --repo-id "elastic-search-test"
vi GPG-KEY-elasticsearch 
pulp-admin -u admin -p admin rpm repo create --feed "https://packages.elastic.co/elasticsearch/5.x/centos" --require-signature true --gpg-key /root/GPG-KEY-elasticsearch --repo-id "elastic-search-test"
pulp-admin -u admin -p admin rpm repo sync
pulp-admin -u admin -p admin rpm repo sync run --repo-id elastic-search-test
pulp-admin -u admin -p admin rpm repo update 
pulp-admin -u admin -p admin rpm repo update --serve-http true --repo-id elastic-search-test
pulp-admin -u admin -p admin rpm repo publish 
pulp-admin -u admin -p admin rpm repo publish  run --repo-id elastic-search-test
pulp-admin -u admin -p admin rpm repo update --relative-url elastic-search-test --repo-id elastic-search-test
pulp-admin -u admin -p admin rpm repo publish  run --repo-id elastic-search-test


==  synchro d'un repo : ==

on peut forcer la synchro d'un repo depuis sa source : 
pulp-admin -u admin -p admin rpm repo sync run --repo-id Elastic_2x-mirror


= mise a jour d'une url de repo : =

si notre repo source change d'url , on peut la changer :


pulp-admin -u admin -p admin rpm repo update --feed https://packages.elastic.co/elasticsearch/2.x/centos --repo-id Elastic_2x-mirror


