=== notes video vim oreilly ===

= help =

depuis l'éditeur : 
:help 
:help <topic> 
ex : :help regex

on peut utiliser la touche tab pour completer notre recherche si on ne sait pas exactement ce qu'on recherche :
:help map + tab
on peut utiliser sinon :
:helpgrep map
si on a plusieurs occurence du mot recherché , on peut utiliser cnext pour allez à la suivante

:cnext
on peut revenir en arriere :
:cpriv

si on est pas du tout dans la bonne section on peut passer a la page suivante :
:cnfile
on peut retourner à la section précedente :
:cpfile

on peut rechercher avec vimgrep par exemple dans une arbo : 
vimgrep /pattern/ files 

Quand on affiche  l'aide vim souvent l'aide prend quasiment toute la place sur la page.
On peut ajouter un bloc de code dans notre vimrc :
autocmd : signifie q'une action est fait automatiquement des la présence d'un pattern, evenement défini.

= vim - alphabet =

pour améliorer notre productivite :

:help normal-index
:help insert-index

= move / deplacements =

on peut savoir ou on est dans le fichier  en saisissant <CTRL>+G 


on peut le setter directement dans notre vimrc :

set ruler

on pourra avoir directement les infos de lignes, colonnes et pourcentage de l'espace du document parcouru
on pourra configurer completement notre "ruler" dans le .vimrc 

> voir  vim.org pour plugins et scripts dispos.

w  -> on peut passer au mot suivant d'un texte 
b  -> on revient au mot précédent
e  -> on va à la fin du mot suivant
ge -> on va a la fin du mot précédent

0  -> deplacement en debut de ligne courante
^  -> deplacement en debut de ligne
$  -> deplacement en fin de ligne
CR  -> deplacement au debut de la ligne suivante
-   -> deplacement au debut de la ligne précédente

On va pouvoir se déplacer de paragraphe en paragraphe : un paragraphe est un ensemble de lignes finisaant par une ligne vide :

{  -> deplacement au début du paragraphe courant
}  -> deplacement à la fin du paragraphe courant
 
gg -> deplacement au debut du texte
G  -> deplacement à la fin du texte
nG ou ngg -> deplacement au numero de ligne n du texte
P% ->  deplacement au pourcentage P du texte 

on peut se deplacer de maniere native entre differentes paires de caractères : {}, () [] à l'aide du caractère %
il est possible de configurer des caractères particulier si besoin dans notre vimrc on peut rajouter par exemple:

set matchpairs+=<:>,":"

On peut mettre n'importe quelle suite de deux  caractères même s'ils ne sont pas identiques : ex : set matchpairs+==:;
/!\ il est important d'ajouter un + devant le signe = afin de rajouter un matching 

pour des cas plus complexes on peut utiliser le plugin matchit.vim

pour se deplacer plus simplement il y a egalement des raccourcis :
ex : 
5l  -> déplacement de 5 caractères à droites
3k  -> déplacement de 3 lignes au dessus 
4}  -> déplacement de 4 paragraphe plus bas 


= insertion :
CTRL-Y : copie ce qui est dans  la colonne précédente
CTRL-E : copie ce qui est dans  la colonne suivante
CTRL-A : ajoute le texte précédemment ajouté
CTRL-R= : permet d'ajouter le résultat de l'evaluation 
CTRL-T -> ajoute une tabulation au debut de la ligne
CTRL-D -> supprime une tabulation en debut de ligne
CTRL-V -> ajoute un caraterere brut sans interprétation : exemple on peut vouloir ajouter dans notre texte "^M" qui correspont au caractere "entrée"
CTRL-W -> permet de supprimer le mot avant le curseur.

= recherche :

les regexp sont basés sur sed 
dans vim il faut cependant protéger nos caractères s'ils sont spéciaux :
ex :
\d\+
foo\|bar

-> On peut bypasser ce système un peu lourd en préfixant nos recherches avec : \v : qui va permettre d'interpreter les caractères speciaux pour les regexp :
\v\d+
\vfoo|bar
 
on peut automatiser cette conf en ajoutant dans notre .vimrc :
nnoremap / /\v  : exemple a chaque fois qu'un saisi un slash , \v sera ajouté automatiquement.
on pourra donc chercher directement dans notre texte par exemple : Lapin et youK simultanément 
\vLapin|youK

-> on peut avoir la possibilité de chercher par exemple un mot suivi plus loin d'un autre mot : un "and" (contrairement à "|" qui est un ou)
on utilise le caractère "&" 
/.*Lapin&.*youK 

-> on peut chercher aussi un mot spécifiquement délimité : "for" mais pas fortune , effort ...

/\<for\>

-> pour trouver la prochaine instance d'un mot qu'on cherche :
*
-> pour trouver la précédente instance d'un mot qu'on cherche :
#

-> pour trouver la prochaine instance d'un mot qu'on cherche :
e> pour trouver la prochaine instance d'un mot qu'on cherche :



-Recherche de pattern sans case :

set ignorecase 

-Bypasse de recherche sans casse : dans certains cas precis on peut avoir besoin de recherchercher la casse apres l'avoir désactiver :
ex les mots contenant une maj :

set smartcase

on va pouvoir si ignorecase est setté et smartcase aussi chercher /Python ..et trouver Python mais pas python ou pythoN

python
Tython
pUthon
pYthon
Python

> set ignorecase
> set smartcase
/Python 


- Recherche incrementale : 

set incsearch 

on va pouvoir des la saisie de la regexp a chercher ..avoir des résultat afficher par vim 

- Recherche large : 

set hlsearch 

on va pouvoir elargir le champe de notre recherche : vim va nous montrer les differentes possibilités pouvant matcher notre regexp de recherche.

ex : on cherche la dans un texte on aura : la, lapin, labourer etc ..de surligner

Il est possible de désactiver une fois la recherche lancée le highlight sur toutes nos occurences avec le :
nohlsearch 

Attention a ne pas confondre avec le set nohlsearch : qui désactive la fonctionalité de highlight 
