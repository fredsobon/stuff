= vault notes =


=== vault theorie : ===

on va pouvoir stocker des mots de passe ou des clés dans des env applicatifs / microservices .
Vault permettant de stocker des secrets puis les récupérer dans une application. Il est également possible d' attribuer des droits différents suivant l’application.
Il faut savoir que Vault est juste un service permettant d’échanger des données qu’il chiffre pour les stocker, mais il ne stocke rien lui-même ! Il a donc besoin d’un backend de stockage.
Ce backend a un rôle très important : il doit assurer la disponibilité et la résilience des données. Il doit donc vérifier lui-même ces critères.
Vault stocke ses secrets dans la partie base clefs/valeurs de Consul.
Pour que Vault puisse communiquer avec Consul malgré l’activation des ACL, il faut lui préciser le  token : permettant l’écriture dans la base clefs/valeurs et l’ajout de service 
a notion de scellement dans Vault permet de protéger vos données en les rendant inaccessibles en lecture et en écriture. Par exemple, lors d’une attaque de votre application, vous pouvez sceller votre Vault et plus personne n’y aura accès, même vos applications.
Cela implique aussi qu’un redémarrage du démon vous obligera à désceller à nouveau votre Vault. Il vous faudra désceller votre Vault pour retrouver l’état initial. Si vous utilisez Consul comme backend de stockage vous pouvez constater que le service n’est indiqué comme accessible que si le Vault est déscellé.



Shematiquement : dans le cas ou les clés sont déja crées.

1/ les clients identifie la clé de l'appli dont il a besoin : il interroge vault 
2/ vault pour la coup interroge consul qui sert juste à stocker les secrets : l'id de la clé demandée par le client ainsi que le secret sont envoyés au client.
3/ le client peut maintenant chiffrer le messages 
4/ le clients peut maintenant envoyer le message chiffrer + l'id de la clé correspondant à une bdd ( mysql, autre )

pour recupérer le messages chiffrés , l 'id de la clé servira dont à requetter la db.



L'initialisation de vault chez nous va générer 3 clés :

 /tmp  $  ./vault init -address=http://127.0.0.1:8200
Unseal Key 1: dcdfdfdfdfdfdfdfdfdfd
Unseal Key 2: cddsdsjljskjjjkj
Unseal Key 3: cwrdsdfkljflktlkjnnj
Unseal Key 4: dfdfdsffplmkl
Unseal Key 5: dfelfzefzefzf 
Initial Root Token: de6c41ad-be7d-8405-7e2c-2b5daa586dc9

Vault initialized with 5 keys and a key threshold of 3. Please
securely distribute the above keys. When the vault is re-sealed,
restarted, or stopped, you must provide at least 3 of these keys
to unseal it again.

Vault does not store the master key. Without at least 3 keys,
your vault will remain permanently sealed.


verif du status de vault : 

 /tmp  $  ./vault status -address=http://127.0.0.1:8200
Type: shamir
Sealed: true
Key Shares: 5
Key Threshold: 3
Unseal Progress: 0
Unseal Nonce: 
Version: 0.9.0

High-Availability Enabled: true
	Mode: sealed

on va forcer un export pour facilier 
export VAULT_ADDR=http://127.0.0.1:8200


Quand on va deceller : on le fait que pour un cluster : le cluster vault est composé par un serveur consul egalement : 

on va deceller maintenant quand c'est locker :

 /tmp  $   ./vault unseal 
Key (will be hidden): 
Sealed: true
Key Shares: 5
Key Threshold: 3
Unseal Progress: 1
Unseal Nonce: 9f53f8b4-ff9e-0f3e-4110-c552016f1ea2

 /tmp  $  ./vault unseal 
Key (will be hidden): 
Sealed: true
Key Shares: 5
Key Threshold: 3
Unseal Progress: 2
Unseal Nonce: 9f53f8b4-ff9e-0f3e-4110-c552016f1ea2
 /tmp  $  ./vault unseal 

Key (will be hidden): 
Sealed: false
Key Shares: 5
Key Threshold: 3
Unseal Progress: 0
Unseal Nonce: 

On verifie que le status est bien délocker : 
 /tmp  $  ./vault status -address=http://127.0.0.1:8200
Type: shamir
Sealed: false
Key Shares: 5
Key Threshold: 3
Unseal Progress: 0
Unseal Nonce: 
Version: 0.9.0
Cluster Name: vault-cluster-f1f40934
Cluster ID: 55d2c9db-66bc-78c0-367c-3188adf935e7

High-Availability Enabled: false

On va maintenant receller notre appli :
pour cela on utilise le token root definie à l'init (sinon on a l'erreur suivante :) 

 /tmp  $  ./vault seal 
Error sealing: Error making API request.

URL: PUT http://127.0.0.1:8200/v1/sys/seal
Code: 500. Errors:

* 1 error occurred:

* missing client token
 /tmp  $  export VAULT_TOKEN=de6c41ad-be7d-8405-7e2c-2b5daa586dc9
 /tmp  $  ./vault seal 
Vault is now sealed.


On verifie le status :
 /tmp  $  ./vault status
Type: shamir
Sealed: true
Key Shares: 5
Key Threshold: 3
Unseal Progress: 0
Unseal Nonce: 
Version: 0.9.0

High-Availability Enabled: true
	Mode: sealed

Ajout d'un path specifique : il faut que vault soit unsealed avant . 

 /tmp  $  cat <<EOF >myroute-acl.json
> path "myroute/*" {
>   policy = "write"
> }
> EOF


 /tmp  $  ./vault policy-write myroute myroute-acl.json
Policy 'myroute' written.
 /tmp  $  ./vault mount -path=myroute generic
Successfully mounted 'generic' at 'myroute'!

 /tmp  $  ./vault mounts
Path        Type       Accessor            Plugin  Default TTL  Max TTL  Force No Cache  Replication Behavior  Description
cubbyhole/  cubbyhole  cubbyhole_c39a304c  n/a     n/a          n/a      false           local                 per-token private secret storage
identity/   identity   identity_297d1c0e   n/a     n/a          n/a      false           replicated            identity store
myroute/    generic    generic_c1b8c784    n/a     system       system   false           replicated            
secret/     kv         kv_6f216211         n/a     system       system   false           replicated            key/value secret storage
sys/        system     system_243c7fac     n/a     n/a          n/a      false           replicated            system endpoints used for control, policy and debugging

on peut updater les data : 
-> on peut le faire en cli :
Attention on presupose que en cli le token root est chargé dans l'env 
 /tmp  $  ./vault write myroute/test1 value=hello value2=lapin
Success! Data written to: myroute/test1
On peut verifier notre data :

 /tmp  $   ./vault read myroute/test1
Key             	Value
---             	-----
refresh_interval	768h0m0s
value           	hello
value2          	lapin
-> on peut le faire via l'api : 
curl -v -H "X-Vault-Token: ${VAULT_TOKEN}" -H "Content-Type: application/json" -X POST -d '{"value":"bar"}' http://127.0.0.1:8200/v1/myroute/test2


En cas de plantage de serveur on aura donc a unseal les clés .


on a en archi 
un HA qui va loadbalancer vers 2 vms chacune va porter le service vault 





== lecture de clé 


[root@bla ~] # export VAULT_ADDR='https://vault-app.meetic.ilius.net:8200'
[root@bla ~] # vault list m2m
Key
----
bla-20180604120006
bla-20180702120006
bla-20180806120003
bla-20180903120003
bla-20181001120002
bla-20181105120003
bla-active
bla-init
bla-recovery-20181106
pouetpouet

[root@bla ~] # vault read m2m/bla-20170601162739
Key               Value
---               -----
refresh_interval  87600h0m0s
iv                sdsddffgdfgdfgdfgdfgdfgdfg
key               ffddsdsdfsdfsf
method            AES-128-CBC



