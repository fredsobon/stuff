== tuto vim ==

*** Aide & recherche 

* help
On peut directement au sein de vim disposer de l'aide que l'on veut sur des domaines particulier. Il suffit de saisir ":help <keyword>" :
ex :
:help regex
On peut aussi demander à vim de nous aider à trouver ce que l'on cherche en saisissant :help un keyword +tab ..
:help map+<tab> 
va nous sortir tous les keywords pouvant nous aider.
On va pouvoir eventuellement rechercher dans l'aide un keyword grâce à :helpgrep
:helpgrep regex
On  va pouvoir  examiner les occurences suivantes du motr grâce à la commande <cnext> : cnext : ex on a 425 occurences du mot regex dans l'aide de vim : on les passe une à une en saisissant cnext :
: helpgrep regex PUIS :cnext
On va pouvoir revenir à l'instance précédente grâce à cprev
: helpgrep regex PUIS :cprev
S'il y a énormement de pattern trouvé alors on peut passer à une autre page de manuel grâce à cnfile: le défilement est beaucoup plus rapide.
:helpgrep regexp PUIS cnfile 
On va pouvoir revenir à la page précédente grâce à cpfile 
:helpgrep regexp PUIS cpfile 

On peut utiliser les regexp pour les recherches.

* vimgrep 
permet de rechercher au sein de notre arborescence directement un pattern . vimgrep /PATTERN/ files
:vimgrep /boogie/ awk.txt

On peut naviguer dans les pages d'aide de vim via les liens hypertextes ( couleurs différentes : on navigue en avant avec CTRL-] et on retourne avec CTRL-T

        On peut pendant qu'on travaille sur un fichier vouloir disposer de l'aide : dans ce cas notre fenetre active de travail avec notre texte est réduite et l'aide occupe la majorité de l'écran.
        Il est possible de définir des commandes automatiques qui s'exécuteront à chaque actions : dans notre cas on peut demander d'avoir le fichier d'aide qui s'affiche complétement dans un autre onglet à chaque fois que l'aide est appellée.

* Keyboard learning :

Pour connaitre les actions de touches du clavier on peut utiliser les commandes :
help normal-index (mode normal)
help insert-index (mode insertion) 

** How to move :
Pour savoir ou on se trouve dans le texte on utilise : <CTRL-G>

On peut rajouter dans notre .vimrc la directive : set ruler pour savoir ou on se trouve :
set ruler

Déplacements :

w -> debut du mot suivant
b -> debut du mot précedent
e -> fin du mot suivant
ge -> fin du mot precedent
0 -> debut de ligne
$ -> fin de ligne
^ -> premier mot de la ligne courante 
<CR (carriage return)/ Entree > -> debut de la prochaine ligne
    - -> debut de la ligne precedente 
} -> se deplace à la fin  du paragraphe actuel  (défini comme du texte suivant une ligne vide.)
{ -> se deplace au debut du paragraphe actuel.
gg -> deplacement au debut du buffer.(debut du fichier)
G -> deplacement à la fin du fichier
:<Number> -> deplacement à la ligne numero Number
<N>gg / <N>G -> identique ligne precedente 
<P>% -> deplacement à la ligne representant le pourcentage P du buffer        
% -> deplacement vers les paires de {} ; () ; [] .... (check de fermeture de balises pour le code) 
NB : on peut definir les caractères à matcher que l'on veut dans notre .vimrc avec : set matchpairs+=<:>,"":"" par exemple. On peut egalement si on veut rajouter un seul élément comme le ";" : dans ce cas on saisi : set matchpairs+==:; : nb le == qui est obligatoire quand on rajoute un seul caractère.Pour des besoins plus complets il y a un plugin matchit.vim

                                                                             
==== .vimrc : ===                                                    
                                                                             
Tweak de vi / vim                                                            
                                                                     
- emplacement dans le fichier :                                              
set ruler                                                                    
- Fixation de la tab horizontale à 4 espaces                         
set tabstop=4                                                                
                                                                             
set shiftwidth=4                                                             
set expandtab                                                                
                                                                             
set nolist / list : cache /affiche les caractères non imprimables.
set nonu / nu : cache / affiche les numeros de lignes 
set matchpairs+=<:>,"":"" : on defini des caractères à faire matcher en paire avec le signe % (check de fermeture de balise de code par exemple)
