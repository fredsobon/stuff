=== notes vimrc ===


-> set ruler  :permet d'avoir le numero de ligne, colonne et pourcentage du document parcouru.

-> set matchpairs+=<:>,":" -> va pouvoir rajouter du matching de paires de caracteres de base on peut naviguer ente les {},() et [] à l'aide de % : ici dans notre exemple on ajoute <> et "".
On peut mettre n'importe quelle suite de deux  caractères même s'ils ne sont pas identiques : ex : set matchpairs+==:;
/!\ il est important d'ajouter un + devant le signe = afin de rajouter un matching 

-> nnoremap / /\v  : exemple a chaque fois qu'un saisi un slash , \v sera ajouté automatiquement : cela permet de ne pas devoir protéger nos recherches dans vim ( sinon on doit rejouter un "\" devant les caractères que l'on cherche.

-> identation auto pour python : gestion tabulation :
# vim: ft=python ts=4 sw=4 et

-> gestion de la souris dans un term sous vim :
:set mouse=
on peut saisir des params pour gérer la souris.
En cas de soucis de copier /coller sous vim on peut flagger la gestion de la souris avec rien comme paramètre: ce qui a permi de retrouver la fonction copiert /coller dans une version . NB : d'autres param sont biensur dispo pour la souris (set mouse=a , ....)


= vim for puppet :

cd ~/.vim
git clone https://github.com/puppetlabs/puppet-syntax-vim.git

Create hidden file called .vimrc in user’s home directory.

vim ~/.vimrc

And add below given contents in .vimrc file.

set nocompatible
syntax on
filetype indent plugin on
set expandtab
set smarttab
set autoindent
au FileType puppet setlocal tabstop=8 expandtab shiftwidth=2 softtabstop=2


-Recherche sans precision de "casse" :

set ignorecase


-Bypasse de recherche sans casse : dans certains cas precis on peut avoir besoin de recherchercher la casse apres l'avoir désactiver :
ex les mots contenant une maj :

set smartcase

- Recherche incrementale :
on va pouvoir des le début de la recherche de pattern dans vim avoir des retours sur ce que l'on saisit 

set incsearch 

ex : on commence a chercher /py ..vim va surligner toutes les occurences de cette entrées ..si on continue /pyt ..il va continuer : très pratique pour voir si on a des fautes de frappe ou alors identifier rapidement des caracteres dans le texte.

set hlsearch

on va pouvoir elargir le champe de notre recherche : vim va nous montrer les differ
entes possibilités pouvant matcher notre regexp de recherche.

Il est possible de désactiver une fois la recherche lancée le highlight sur toutes nos occurences avec le :

nohlsearch 

Attention a ne pas confondre avec le set nohlsearch : qui désactive la fonctionalité de highlight 



- delete de whitespace indésirables à la fin de notre texte :

on va pouvoir créer un macro qui va pouvoir nous aider à supprimer directement tous les espaces de fin de lignes en appuyant sur une touche de clavier :

ex: de code que l'on peut mettre dans notre vimrc et qui permet le delete de whitespace de fin de ligne en appuyant sur F8 : 
" Delete trailling white space
" :map <F8> %s/\s\+$//<CR>
:nnoremap <silent> <F8> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

