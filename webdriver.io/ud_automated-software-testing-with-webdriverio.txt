===   notes automated-software-testing-with-webdriverio ud ===


= setup :


- pre requis : 
ide vscode 
projet wdio-testing
nodejs mini 12

vscode > view > terminal :
dans la section terminal :
 ~/Documents/lab/wdio/wdio-testing  node --version                                                                                    [☸ |kubernetes-admin@fso_sandbox:babar]
v12.18.2

- initialisation du projet : 

 boogie@boogieland  ~/Documents/lab/wdio/wdio-testing  npm init                                                                                            [☸ |kubernetes-admin@fso_sandbox:babar]
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (wdio-testing)
version: (1.0.0)
description: automating software testing with webdriverIO
entry point: (index.js)
test command:
git repository:
keywords: testing with webdriverIO
author: bob
license: (ISC)
About to write to /home/boogie/Documents/lab/wdio/wdio-testing/package.json:

{
  "name": "wdio-testing",
  "version": "1.0.0",
  "description": "automating software testing with webdriverIO",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "testing",
    "with",
    "webdriverIO"
  ],
  "author": "bob",
  "license": "ISC"
}


Is this OK? (yes) y


   ╭─────────────────────────────────────────────────────────────────╮
   │                                                                 │
   │      New patch version of npm available! 6.14.8 → 6.14.11       │
   │   Changelog: https://github.com/npm/cli/releases/tag/v6.14.11   │
   │                Run npm install -g npm to update!                │
   │                                                                 │
   ╰─────────────────────────────────────────────────────────────────╯

une fois généré , on voit dans notre project un fichier js crée :

package.json 

{
  "name": "wdio-testing",
  "version": "1.0.0",
  "description": "automating software testing with webdriverIO",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "testing",
    "with",
    "webdriverIO"
  ],
  "author": "bob",
  "license": "ISC"
}


on va maintenant installer wdio. Dans le terminal :

 boogie@boogieland  ~/Documents/lab/wdio/wdio-testing  npm install --save-dev @wdio/cli                                                                    [☸ |kubernetes-admin@fso_sandbox:babar]
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.1: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})
npm WARN wdio-testing@1.0.0 No repository field.

+ @wdio/cli@6.12.0
added 282 packages from 306 contributors and audited 283 packages in 13.917s

28 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities



   ╭─────────────────────────────────────────────────────────────────╮
   │                                                                 │
   │      New patch version of npm available! 6.14.8 → 6.14.11       │
   │   Changelog: https://github.com/npm/cli/releases/tag/v6.14.11   │
   │                Run npm install -g npm to update!                │
   │                                                                 │
   ╰─────────────────────────────────────────────────────────────────╯
   

on voit qu'on a un folder node_module de crée et que le fichier package.json a été updaté avec la version wdio :
{
  "name": "wdio-testing",
  "version": "1.0.0",
  "description": "automating software testing with webdriverIO",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "testing",
    "with",
    "webdriverIO"
  ],
  "author": "bob",
  "license": "ISC",
  "devDependencies": {
    "@wdio/cli": "^6.12.0"
  }
}

on va maintenant générer la config de webdriverIO :

 boogie@boogieland  ~/Documents/lab/wdio/wdio-testing  npx wdio config                                                                                     [☸ |kubernetes-admin@fso_sandbox:babar]

=========================
WDIO Configuration Helper
=========================

? Where is your automation backend located? On my local machine      <<<<< on va tester en local 
? Which framework do you want to use? mocha                          <<<< framework de base 
? Do you want to run WebdriverIO commands synchronous or asynchronous? sync  <<<< sync
? Where are your test specs located? ./test/specs/**/*.js             <<<<< pour l'instant on a rien de défini on presse donc enter 
? Do you want WebdriverIO to autogenerate some test files? No
? Are you using a compiler? No!
? Which reporter do you want to use? spec
? Do you want to add a service to your test setup? chromedriver     <<<<<< plus simple et tres puissant           
? What is the base url? http://localhost

Installing wdio packages:
- @wdio/local-runner
- @wdio/mocha-framework
- @wdio/spec-reporter
- wdio-chromedriver-service
- @wdio/sync
- chromedriver
npm WARN deprecated debug@4.2.0: Debug versions >=3.2.0 <3.2.7 || >=4 <4.3.1 have a low-severity ReDos regression when used in a Node.js environment. It is recommended you upgrade to 3.2.7 or 4.3.1. (https://github.com/visionmedia/debug/issues/797)
npm WARN deprecated fsevents@2.1.3: "Please update to latest v2.3 or v2.2"

> fibers@4.0.3 install /home/boogie/Documents/lab/wdio/wdio-testing/node_modules/fibers
> node build.js || nodejs build.js

`linux-x64-72-glibc` exists; testing
Binary is fine; exiting

> chromedriver@87.0.5 install /home/boogie/Documents/lab/wdio/wdio-testing/node_modules/chromedriver
> node install.js

Current existing ChromeDriver binary is unavailable, proceeding with download and extraction.
Downloading from file:  https://chromedriver.storage.googleapis.com/87.0.4280.20/chromedriver_linux64.zip
Saving to file: /tmp/87.0.4280.20/chromedriver/chromedriver_linux64.zip
Received 1040K...
Received 2080K...
Received 3120K...
Received 4160K...
Received 5200K...
Received 5433K total.
Extracting zip contents to /tmp/87.0.4280.20/chromedriver.
Copying to target path /home/boogie/Documents/lab/wdio/wdio-testing/node_modules/chromedriver/lib/chromedriver
Fixing file permissions.
Done. ChromeDriver binary available at /home/boogie/Documents/lab/wdio/wdio-testing/node_modules/chromedriver/lib/chromedriver/chromedriver
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules/mocha/node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})
npm WARN wdio-testing@1.0.0 No repository field.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.1 (node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.1: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ wdio-chromedriver-service@6.0.4
+ chromedriver@87.0.5
+ @wdio/mocha-framework@6.11.0
+ @wdio/local-runner@6.12.0
+ @wdio/sync@6.11.0
+ @wdio/spec-reporter@6.11.0
added 149 packages from 125 contributors and audited 433 packages in 10.776s

44 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities


Packages installed successfully, creating configuration file...

Configuration file was created successfully!
To run your tests, execute:
$ npx wdio run wdio.conf.js


 on voit que le fichier principal a updaté ces dépendances :

 {
  "name": "wdio-testing",
  "version": "1.0.0",
  "description": "automating software testing with webdriverIO",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "testing",
    "with",
    "webdriverIO"
  ],
  "author": "bob",
  "license": "ISC",
  "devDependencies": {
    "@wdio/cli": "^6.12.0",
    "@wdio/local-runner": "^6.12.0",
    "@wdio/mocha-framework": "^6.11.0",
    "@wdio/spec-reporter": "^6.11.0",
    "@wdio/sync": "^6.11.0",
    "chromedriver": "^87.0.5",
    "wdio-chromedriver-service": "^6.0.4"
  }
}

le fichier de conf wdio.conf.js est crée.

- wdio overview :

on va examiner le fichier de conf wdio.conf.js  créée au set up et le modifier :

on creer dans notre rep de projet un repertoire "tests" qui va contenir nos tests : 

exports.config = {
    //
    // ====================
    // Runner Configuration
    // ====================
    //
    // WebdriverIO allows it to run your tests in arbitrary locations (e.g. locally or
    // on a remote machine).
    runner: 'local',           <<<<<< on execute les tests localement 
    //
    // ==================
    // Specify Test Files
    // ==================
    // Define which test specs should run. The pattern is relative to the directory
    // from which `wdio` was called. Notice that, if you are calling `wdio` from an
    // NPM script (see https://docs.npmjs.com/cli/run-script) then the current working
    // directory is where your package.json resides, so `wdio` will be called from there.
    //
    specs: [
        './tests/**.js'              <<<<<<<< on rensigne ici le path relatif au projet de notre rep contenant les tests que nous avons crée.
....
..... 
    maxInstances: 10,
    //
    // If you have trouble getting all important capabilities together, check out the
    // Sauce Labs platform configurator - a great tool to configure your capabilities:
    // https://docs.saucelabs.com/reference/platforms-configurator
    //
    capabilities: [{

        // maxInstances can get overwritten per capability. So if you have an in-house Selenium
        // grid with only 5 firefox instances available you can make sure that not more than
        // 5 instances get started at a time.
        maxInstances: 5,
        //
        browserName: 'chrome',    <<<<<<<<<< on a selectionner chrome lors du setup 
.....
    // Level of logging verbosity: trace | debug | info | warn | error | silent
    logLevel: 'info',             <<<<<  on peut selectionner le log level qu'on veut.       

......

        // If you only want to run your tests until a specific amount of tests have failed use
    // bail (default is 0 - don't bail, run all tests).
    bail: 0,                     <<<<<< ici on va executer tous les tests même si certains sont ko ( on peut sinon arrêter l'execution si un ou des test de notre serie sont ko) 

.....

    // Set a base URL in order to shorten url command calls. If your `url` parameter starts
    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.
    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url
    // gets prepended directly.
    baseUrl: 'http://localhost',    <<<<<<  on peut spécifier l'url de base d'un site web que l'on veut tester
    //
    // Default timeout for all waitFor* commands.
    waitforTimeout: 10000,         <<<<<<   params de base à partir duquel on attend le retour de la commande avant le déco ( de base 10 secondes.) 
    //
    // Default timeout in milliseconds for request
    // if browser driver or grid doesn't send response
    connectionRetryTimeout: 120000,
    //
    // Default request retries count
    connectionRetryCount: 3,
....

    // Test runner services
    // Services take over a specific job you don't want to take care of. They enhance
    // your test setup with almost no effort. Unlike plugins, they don't add new
    // commands. Instead, they hook themselves up into the test process.
    services: ['chromedriver'],             <<<<<<  c'est ce qu'on a selectionné au set up.

    // Framework you want to run your specs with.
    // The following are supported: Mocha, Jasmine, and Cucumber
    // see also: https://webdriver.io/docs/frameworks.html
    //
    // Make sure you have the wdio adapter package for the specific framework installed
    // before running any tests.
    framework: 'mocha',        <<<<<< framework sélectionné au setup 
 ....

    //
    // Test reporter for stdout.
    // The only one supported by default is 'dot'
    // see also: https://webdriver.io/docs/dot-reporter.html
    reporters: ['spec'],
    port: 4444,                <<<<<<<< ici on rajoute la section port avec comme valeur 4444 sinon cela ne fonctionne pas. 

on a ensuite la section hooks qui concerne les parties avancées de wdio





